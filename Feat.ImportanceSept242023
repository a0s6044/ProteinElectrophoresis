{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "20cf5d8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# install fast_ml library\n",
    "! pip install fast_ml --quiet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cdeba524",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt# Pie chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "04db9869",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "20898e34",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get a Regressor first! \n",
    "\n",
    "# Explicitly require this experimental feature\n",
    "from sklearn.experimental import enable_hist_gradient_boosting\n",
    "#from sklearn.experimental import \n",
    "\n",
    "# Now you can import normally from ensemble\n",
    "from sklearn.ensemble import HistGradientBoostingRegressor\n",
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import BaggingClassifier\n",
    "#from sklearn.ensemble import DecisionTreeClassifier\n",
    "#from sklearn.ensemble import \n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import SGDClassifier \n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "from lightgbm import LGBMRegressor\n",
    "from lightgbm import LGBMClassifier\n",
    "from xgboost import XGBRegressor\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9fdad874",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cf3cc7ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:143: FutureWarning: The sklearn.utils.testing module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.utils. Anything that cannot be imported from sklearn.utils is now part of the private API.\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "from lazypredict.Supervised import LazyClassifier, LazyRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a9c3b472",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluate a logistic regression model using k-fold cross-validation\n",
    "from numpy import mean\n",
    "from numpy import std\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "56fe7d59",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fast_ml.model_development import train_valid_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bbad7f5",
   "metadata": {},
   "source": [
    "## Reading the saved and already processed data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3e8f4137",
   "metadata": {},
   "outputs": [],
   "source": [
    "# loading\n",
    "full_df = pd.read_pickle('full_df_saved27Aug2023')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1b48a80f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Healthy</th>\n",
       "      <th>M-KOMPD</th>\n",
       "      <th>M-KOMPA</th>\n",
       "      <th>M-KOMPG</th>\n",
       "      <th>M-KOMPM</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67183</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67184</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67185</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67186</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67187</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67059 rows × 305 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Healthy  M-KOMPD  M-KOMPA  M-KOMPG  M-KOMPM  0  1  2  3   4  ...  290  \\\n",
       "0            1        0        0        0        0  0  3  5  9   6  ...   17   \n",
       "1            0        0        0        1        0  0  2  3  6  10  ...    1   \n",
       "2            1        0        0        0        0  1  0  0  2   1  ...    1   \n",
       "3            1        0        0        0        0  0  2  3  6  10  ...    1   \n",
       "4            1        0        0        0        0  0  2  4  3   6  ...    4   \n",
       "...        ...      ...      ...      ...      ... .. .. .. ..  ..  ...  ...   \n",
       "67183        0        0        0        1        0  0  0  0  1   2  ...    0   \n",
       "67184        1        0        0        0        0  0  0  0  0   0  ...    1   \n",
       "67185        1        0        0        0        0  0  0  0  1   1  ...    0   \n",
       "67186        1        0        0        0        0  6  6  6  6   6  ...    4   \n",
       "67187        1        0        0        0        0  2  2  2  3   3  ...    0   \n",
       "\n",
       "       291  292  293  294  295  296  297  298  299  \n",
       "0       23   25   34   43   57   72   69   54   45  \n",
       "1        1    2    3    3    3    4    6    9   14  \n",
       "2        2    2    2    2    3    6    9   13   17  \n",
       "3        1    2    3    3    3    4    6    9   14  \n",
       "4        4    6    8   14   16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  \n",
       "67183    0    1    2    3    3    4    5    7    7  \n",
       "67184    1    1    1    1    1    1    1    1    3  \n",
       "67185    0    0    0    0    0    0    1    1    2  \n",
       "67186    1    0    0    0    0    0    0    1    1  \n",
       "67187    1    2    2    3    3    3    3    4    6  \n",
       "\n",
       "[67059 rows x 305 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b125e9fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "No need to run this\n",
    "labels = list(full_df.columns[:5]) #['Frogs', 'Hogs', 'Dogs', 'Logs']\n",
    "sizes = [sum(full_df.iloc[:,i]) for i in range(5)]# [2018, 9234, 18, 1529, 16]#[15, 30, 45, 10]#colors\n",
    "colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#ffb3e6']#['red','#66b3ff','#99ff99','brown']#,'pink','brown']\n",
    " \n",
    "fig1,ax1 = plt.subplots(figsize=(6,6), facecolor=\"w\", dpi=200)#1200)\n",
    "#fig1, ax1 = plt.subplots()\n",
    "patches, texts, autotexts = ax1.pie(sizes, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90)\n",
    "for text in texts:\n",
    "    text.set_color('black')#'grey')\n",
    "for autotext in autotexts:\n",
    "    autotext.set_color('black')#'grey')# Equal aspect ratio ensures that pie is drawn as a circle\n",
    "ax1.axis('equal')  \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cf96eacb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_dataframe(dfin, ratio):\n",
    "    training_data = dfin.sample(frac=ratio, random_state=25)\n",
    "    testing_data = dfin.drop(training_data.index)\n",
    "    \n",
    "    return training_data, testing_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9bea8384",
   "metadata": {},
   "outputs": [],
   "source": [
    "def one_hot(i, vec_len):\n",
    "  vector = [0]*vec_len\n",
    "  vector[i] = 1\n",
    "  return vector\n",
    "\n",
    "def evaluate(y,y_hat,labels):\n",
    "  print(classification_report(y,y_hat))\n",
    "  cm = confusion_matrix(y,y_hat)\n",
    "  cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "  cmat = pd.DataFrame(cm)\n",
    "  cmat.columns = labels\n",
    "  #cmat.set_index([pd.Index(labels, \"\")],inplace=True)\n",
    "  sns.heatmap(cmat,cmap=\"YlGnBu\", annot=True)\n",
    "  plt.title(\"Confusion Matrix\")\n",
    "  plt.show()\n",
    "\n",
    "def format_prediction(predicted_outputs):\n",
    "  predicted_image_array = np.zeros_like(image_array)\n",
    "  i = 0\n",
    "  for row,pixels in enumerate(predicted_image_array):\n",
    "    for column in range(len(pixels)):\n",
    "      p = np.argmax(predicted_outputs[i])\n",
    "      predicted_image_array[row][column] = [WHITE,RED,BLUE][p]\n",
    "      i += 1\n",
    "  return predicted_image_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6d5545cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "No need to run this\n",
    "training_inputs = full_df.iloc[:,5:]\n",
    "training_outputs_labels = full_df.iloc[:,:5]\n",
    "#xgb_classifier.fit(training_inputs, training_outputs_labels)\n",
    "#xgb_predictions_labels = xgb_classifier.predict(training_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "87a96dee",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'new_full_df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [21]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mnew_full_df\u001b[49m\u001b[38;5;241m.\u001b[39mindex\n",
      "\u001b[0;31mNameError\u001b[0m: name 'new_full_df' is not defined"
     ]
    }
   ],
   "source": [
    "new_full_df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "faeecc66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Healthy</th>\n",
       "      <th>M-KOMPD</th>\n",
       "      <th>M-KOMPA</th>\n",
       "      <th>M-KOMPG</th>\n",
       "      <th>M-KOMPM</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67183</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67184</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67185</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67186</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67187</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67059 rows × 305 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Healthy  M-KOMPD  M-KOMPA  M-KOMPG  M-KOMPM  0  1  2  3   4  ...  290  \\\n",
       "0            1        0        0        0        0  0  3  5  9   6  ...   17   \n",
       "1            0        0        0        1        0  0  2  3  6  10  ...    1   \n",
       "2            1        0        0        0        0  1  0  0  2   1  ...    1   \n",
       "3            1        0        0        0        0  0  2  3  6  10  ...    1   \n",
       "4            1        0        0        0        0  0  2  4  3   6  ...    4   \n",
       "...        ...      ...      ...      ...      ... .. .. .. ..  ..  ...  ...   \n",
       "67183        0        0        0        1        0  0  0  0  1   2  ...    0   \n",
       "67184        1        0        0        0        0  0  0  0  0   0  ...    1   \n",
       "67185        1        0        0        0        0  0  0  0  1   1  ...    0   \n",
       "67186        1        0        0        0        0  6  6  6  6   6  ...    4   \n",
       "67187        1        0        0        0        0  2  2  2  3   3  ...    0   \n",
       "\n",
       "       291  292  293  294  295  296  297  298  299  \n",
       "0       23   25   34   43   57   72   69   54   45  \n",
       "1        1    2    3    3    3    4    6    9   14  \n",
       "2        2    2    2    2    3    6    9   13   17  \n",
       "3        1    2    3    3    3    4    6    9   14  \n",
       "4        4    6    8   14   16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  \n",
       "67183    0    1    2    3    3    4    5    7    7  \n",
       "67184    1    1    1    1    1    1    1    1    3  \n",
       "67185    0    0    0    0    0    0    1    1    2  \n",
       "67186    1    0    0    0    0    0    0    1    1  \n",
       "67187    1    2    2    3    3    3    3    4    6  \n",
       "\n",
       "[67059 rows x 305 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "618b2afa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>28</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>28</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67054</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67055</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67056</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67057</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67058</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67059 rows × 301 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Result  0  1  2  3   4   5   6   7   8  ...  290  291  292  293  294  \\\n",
       "0           0  0  3  5  9   6   9  15  18  22  ...   17   23   25   34   43   \n",
       "1           3  0  2  3  6  10  15  17  22  28  ...    1    1    2    3    3   \n",
       "2           0  1  0  0  2   1   3   2   3   4  ...    1    2    2    2    2   \n",
       "3           0  0  2  3  6  10  15  17  22  28  ...    1    1    2    3    3   \n",
       "4           0  0  2  4  3   6   7   9  13  15  ...    4    4    6    8   14   \n",
       "...       ... .. .. .. ..  ..  ..  ..  ..  ..  ...  ...  ...  ...  ...  ...   \n",
       "67054       3  0  0  0  1   2   2   3   4   5  ...    0    0    1    2    3   \n",
       "67055       0  0  0  0  0   0   0   1   1   1  ...    1    1    1    1    1   \n",
       "67056       0  0  0  0  1   1   1   1   1   1  ...    0    0    0    0    0   \n",
       "67057       0  6  6  6  6   6   6   6   6   5  ...    4    1    0    0    0   \n",
       "67058       0  2  2  2  3   3   3   3   3   4  ...    0    1    2    2    3   \n",
       "\n",
       "       295  296  297  298  299  \n",
       "0       57   72   69   54   45  \n",
       "1        3    4    6    9   14  \n",
       "2        3    6    9   13   17  \n",
       "3        3    4    6    9   14  \n",
       "4       16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  \n",
       "67054    3    4    5    7    7  \n",
       "67055    1    1    1    1    3  \n",
       "67056    0    0    1    1    2  \n",
       "67057    0    0    0    1    1  \n",
       "67058    3    3    3    4    6  \n",
       "\n",
       "[67059 rows x 301 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "X = full_df.drop(columns=['Healthy','M-KOMPG','M-KOMPD','M-KOMPA','M-KOMPM'])\n",
    "y = full_df[{'Healthy','M-KOMPG','M-KOMPD','M-KOMPA','M-KOMPM'}]\n",
    "cat_labels = np.where(y==1)[1]\n",
    "y = pd.DataFrame(cat_labels,columns=['Result'])\n",
    "\n",
    "X = X.reset_index(drop=True) # otherwise below will produce many more rows\n",
    "\n",
    "# Adding dataframe to the right of the y dataframe\n",
    "df_main = pd.concat([y,X], axis=1)\n",
    "df_main#.drop(columns=['index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f37faaf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are total numbers contained in each category in the dataset: \n",
      " Healthy: 52552, \n",
      " M: 2215,\n",
      " A: 1745,\n",
      " D: 9,\n",
      " G: 10538\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y = full_df[{'M-KOMPG','M-KOMPD','M-KOMPA','M-KOMPM','Healthy'}]\n",
    "print('There are total numbers contained in each category in the dataset: \\n Healthy: {}, \\n M: {},\\n A: {},\\n D: {},\\n G: {}\\n'.format(len(df_main)-len(y[y['M-KOMPM']==1])-len(y[y['M-KOMPA']==1])-len(y[y['M-KOMPD']==1])-len(y[y['M-KOMPG']==1]),len(y[y['M-KOMPM']==1]),len(y[y['M-KOMPA']==1]),len(y[y['M-KOMPD']==1]), len(y[y['M-KOMPG']==1])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9326308d",
   "metadata": {},
   "source": [
    "#### Removing the D as well since only 9 exist "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "66b1d09b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Healthy</th>\n",
       "      <th>M-KOMPD</th>\n",
       "      <th>M-KOMPA</th>\n",
       "      <th>M-KOMPG</th>\n",
       "      <th>M-KOMPM</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>817</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8609</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8611</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "      <td>25</td>\n",
       "      <td>39</td>\n",
       "      <td>59</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8612</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "      <td>27</td>\n",
       "      <td>47</td>\n",
       "      <td>57</td>\n",
       "      <td>49</td>\n",
       "      <td>34</td>\n",
       "      <td>30</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8620</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8623</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32337</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32365</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46316</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9 rows × 305 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Healthy  M-KOMPD  M-KOMPA  M-KOMPG  M-KOMPM  0  1  2  3   4  ...  290  \\\n",
       "817          0        1        0        0        0  0  0  1  1   1  ...    2   \n",
       "8609         0        1        0        0        0  2  0  3  5   5  ...    2   \n",
       "8611         0        1        0        0        0  0  2  3  5   7  ...    4   \n",
       "8612         0        1        0        0        0  0  2  5  9  12  ...   13   \n",
       "8620         0        1        0        0        0  0  0  1  1   1  ...    4   \n",
       "8623         0        1        0        0        0  1  0  0  5   4  ...    1   \n",
       "32337        0        1        0        0        0  0  0  3  7   7  ...    3   \n",
       "32365        0        1        0        0        0  0  2  4  6  10  ...    0   \n",
       "46316        0        1        0        0        0  1  0  0  1   1  ...    0   \n",
       "\n",
       "       291  292  293  294  295  296  297  298  299  \n",
       "817      2    3    3    3    3    3    3    2    3  \n",
       "8609     4    6    5    3    4    6    7   10   13  \n",
       "8611     4    7    9   11   16   25   39   59   70  \n",
       "8612    17   27   47   57   49   34   30   21    8  \n",
       "8620     5    6    6    7    8   10   12   15   21  \n",
       "8623     1    1    4    5    3    3    6    6    7  \n",
       "32337    4    4    5    8   10   11   17   23   31  \n",
       "32365    1    0    1    1    2    3    6    4    5  \n",
       "46316    0    0    1    1    1    1    2    3    4  \n",
       "\n",
       "[9 rows x 305 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_df.loc[y[y['M-KOMPD']==1].index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9f568e14",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_full_df = full_df.drop(y[y['M-KOMPD']==1].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8564eb39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Healthy</th>\n",
       "      <th>M-KOMPD</th>\n",
       "      <th>M-KOMPA</th>\n",
       "      <th>M-KOMPG</th>\n",
       "      <th>M-KOMPM</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67183</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67184</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67185</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67186</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67187</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 305 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Healthy  M-KOMPD  M-KOMPA  M-KOMPG  M-KOMPM  0  1  2  3   4  ...  290  \\\n",
       "0            1        0        0        0        0  0  3  5  9   6  ...   17   \n",
       "1            0        0        0        1        0  0  2  3  6  10  ...    1   \n",
       "2            1        0        0        0        0  1  0  0  2   1  ...    1   \n",
       "3            1        0        0        0        0  0  2  3  6  10  ...    1   \n",
       "4            1        0        0        0        0  0  2  4  3   6  ...    4   \n",
       "...        ...      ...      ...      ...      ... .. .. .. ..  ..  ...  ...   \n",
       "67183        0        0        0        1        0  0  0  0  1   2  ...    0   \n",
       "67184        1        0        0        0        0  0  0  0  0   0  ...    1   \n",
       "67185        1        0        0        0        0  0  0  0  1   1  ...    0   \n",
       "67186        1        0        0        0        0  6  6  6  6   6  ...    4   \n",
       "67187        1        0        0        0        0  2  2  2  3   3  ...    0   \n",
       "\n",
       "       291  292  293  294  295  296  297  298  299  \n",
       "0       23   25   34   43   57   72   69   54   45  \n",
       "1        1    2    3    3    3    4    6    9   14  \n",
       "2        2    2    2    2    3    6    9   13   17  \n",
       "3        1    2    3    3    3    4    6    9   14  \n",
       "4        4    6    8   14   16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  \n",
       "67183    0    1    2    3    3    4    5    7    7  \n",
       "67184    1    1    1    1    1    1    1    1    3  \n",
       "67185    0    0    0    0    0    0    1    1    2  \n",
       "67186    1    0    0    0    0    0    0    1    1  \n",
       "67187    1    2    2    3    3    3    3    4    6  \n",
       "\n",
       "[67050 rows x 305 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_full_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "01940161",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52553"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "67073-14520"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "8ecbaf42",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['M-KOMPD'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[0;32mIn [104]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m new_full_df \u001b[38;5;241m=\u001b[39m \u001b[43mnew_full_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mM-KOMPD\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py:3990\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3858\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   3859\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   3860\u001b[0m     labels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3866\u001b[0m     errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   3867\u001b[0m ):\n\u001b[1;32m   3868\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   3869\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   3870\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3988\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   3989\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 3990\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   3991\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3992\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3993\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3994\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3995\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3996\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3997\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3998\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py:3936\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3934\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   3935\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 3936\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3938\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   3939\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py:3970\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   3968\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   3969\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 3970\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3971\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreindex(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m{axis_name: new_axis})\n\u001b[1;32m   3973\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   3974\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py:5018\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   5016\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   5017\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 5018\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlabels[mask]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   5019\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   5020\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['M-KOMPD'] not found in axis\""
     ]
    }
   ],
   "source": [
    "new_full_df = new_full_df.drop(columns=['M-KOMPD'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3b12ed6",
   "metadata": {},
   "source": [
    "### Feature Selection "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "faba8d04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "      <th>M-KOMPD</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67045</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67046</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67047</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67048</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67049</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 302 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Result  M-KOMPD  0  1  2  3   4   5   6   7  ...  290  291  292  293  \\\n",
       "0          1        0  0  3  5  9   6   9  15  18  ...   17   23   25   34   \n",
       "1          3        0  0  2  3  6  10  15  17  22  ...    1    1    2    3   \n",
       "2          1        0  1  0  0  2   1   3   2   3  ...    1    2    2    2   \n",
       "3          1        0  0  2  3  6  10  15  17  22  ...    1    1    2    3   \n",
       "4          1        0  0  2  4  3   6   7   9  13  ...    4    4    6    8   \n",
       "...      ...      ... .. .. .. ..  ..  ..  ..  ..  ...  ...  ...  ...  ...   \n",
       "67045      3        0  0  0  0  1   2   2   3   4  ...    0    0    1    2   \n",
       "67046      1        0  0  0  0  0   0   0   1   1  ...    1    1    1    1   \n",
       "67047      1        0  0  0  0  1   1   1   1   1  ...    0    0    0    0   \n",
       "67048      1        0  6  6  6  6   6   6   6   6  ...    4    1    0    0   \n",
       "67049      1        0  2  2  2  3   3   3   3   3  ...    0    1    2    2   \n",
       "\n",
       "       294  295  296  297  298  299  \n",
       "0       43   57   72   69   54   45  \n",
       "1        3    3    4    6    9   14  \n",
       "2        2    3    6    9   13   17  \n",
       "3        3    3    4    6    9   14  \n",
       "4       14   16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  ...  \n",
       "67045    3    3    4    5    7    7  \n",
       "67046    1    1    1    1    1    3  \n",
       "67047    0    0    0    1    1    2  \n",
       "67048    0    0    0    0    1    1  \n",
       "67049    3    3    3    3    4    6  \n",
       "\n",
       "[67050 rows x 302 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = new_full_df.drop(columns=['Healthy','M-KOMPG','M-KOMPA','M-KOMPM'])\n",
    "y = new_full_df[{'Healthy','M-KOMPG','M-KOMPA','M-KOMPM'}]\n",
    "cat_labels = np.where(y==1)[1]\n",
    "y = pd.DataFrame(cat_labels,columns=['Result'])\n",
    "y = y.astype('object') # Making it categorical\n",
    "\n",
    "X = X.reset_index(drop=True) # otherwise below will produce many more rows\n",
    "y = y.reset_index(drop=True)\n",
    "# Adding dataframe to the right of the y dataframe\n",
    "df_main = pd.concat([y,X], axis=1)\n",
    "df_main#.drop(columns=['index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ba7a9107",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"None of [Index(['M-KOMPM', 'Healthy', 'M-KOMPA', 'M-KOMPG'], dtype='object')] are in the [columns]\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[0;32mIn [20]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdf_main\u001b[49m\u001b[43m[\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mHealthy\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mM-KOMPG\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mM-KOMPA\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mM-KOMPM\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m}\u001b[49m\u001b[43m]\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py:2806\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2804\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   2805\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 2806\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_listlike_indexer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mraise_missing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   2808\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   2809\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1552\u001b[0m, in \u001b[0;36m_NDFrameIndexer._get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1549\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1550\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m ax\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 1552\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_read_indexer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1553\u001b[0m \u001b[43m    \u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_axis_number\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mraise_missing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mraise_missing\u001b[49m\n\u001b[1;32m   1554\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1555\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m keyarr, indexer\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1640\u001b[0m, in \u001b[0;36m_NDFrameIndexer._validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1638\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m missing \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(indexer):\n\u001b[1;32m   1639\u001b[0m     axis_name \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39m_get_axis_name(axis)\n\u001b[0;32m-> 1640\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   1642\u001b[0m \u001b[38;5;66;03m# We (temporarily) allow for some missing keys with .loc, except in\u001b[39;00m\n\u001b[1;32m   1643\u001b[0m \u001b[38;5;66;03m# some cases (e.g. setting) in which \"raise_missing\" will be False\u001b[39;00m\n\u001b[1;32m   1644\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mname \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mloc\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m raise_missing):\n",
      "\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['M-KOMPM', 'Healthy', 'M-KOMPA', 'M-KOMPG'], dtype='object')] are in the [columns]\""
     ]
    }
   ],
   "source": [
    "df_main[{'Healthy','M-KOMPG','M-KOMPA','M-KOMPM'}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "19a5ad8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating our target variable\n",
    "target = 'Healthy','M-KOMPG','M-KOMPA','M-KOMPM'#'ICOS'\n",
    "y = df_main[{'Healthy','M-KOMPG','M-KOMPA','M-KOMPM'}]\n",
    "X = df_main.drop(columns=['Healthy','M-KOMPG','M-KOMPA','M-KOMPM'])\n",
    "\n",
    "# Splitting our data into a train and test set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,\n",
    "                                                    test_size=0.1,\n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "9424a3e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 5,\n",
       " 6,\n",
       " 7,\n",
       " 8,\n",
       " 9,\n",
       " 10,\n",
       " 11,\n",
       " 12,\n",
       " 13,\n",
       " 14,\n",
       " 15,\n",
       " 16,\n",
       " 17,\n",
       " 18,\n",
       " 19,\n",
       " 20,\n",
       " 21,\n",
       " 22,\n",
       " 23,\n",
       " 24,\n",
       " 25,\n",
       " 26,\n",
       " 27,\n",
       " 28,\n",
       " 29,\n",
       " 30,\n",
       " 31,\n",
       " 32,\n",
       " 33,\n",
       " 34,\n",
       " 35,\n",
       " 36,\n",
       " 37,\n",
       " 38,\n",
       " 39,\n",
       " 40,\n",
       " 41,\n",
       " 42,\n",
       " 43,\n",
       " 44,\n",
       " 45,\n",
       " 46,\n",
       " 47,\n",
       " 48,\n",
       " 49,\n",
       " 50,\n",
       " 51,\n",
       " 52,\n",
       " 53,\n",
       " 54,\n",
       " 55,\n",
       " 56,\n",
       " 57,\n",
       " 58,\n",
       " 59,\n",
       " 60,\n",
       " 61,\n",
       " 62,\n",
       " 63,\n",
       " 64,\n",
       " 65,\n",
       " 66,\n",
       " 67,\n",
       " 68,\n",
       " 69,\n",
       " 70,\n",
       " 71,\n",
       " 72,\n",
       " 73,\n",
       " 74,\n",
       " 75,\n",
       " 76,\n",
       " 77,\n",
       " 78,\n",
       " 79,\n",
       " 80,\n",
       " 81,\n",
       " 82,\n",
       " 83,\n",
       " 84,\n",
       " 85,\n",
       " 86,\n",
       " 87,\n",
       " 88,\n",
       " 89,\n",
       " 90,\n",
       " 91,\n",
       " 92,\n",
       " 93,\n",
       " 94,\n",
       " 95,\n",
       " 96,\n",
       " 97,\n",
       " 98,\n",
       " 99,\n",
       " 100,\n",
       " 101,\n",
       " 102,\n",
       " 103,\n",
       " 104,\n",
       " 105,\n",
       " 106,\n",
       " 107,\n",
       " 108,\n",
       " 109,\n",
       " 110,\n",
       " 111,\n",
       " 112,\n",
       " 113,\n",
       " 114,\n",
       " 115,\n",
       " 116,\n",
       " 117,\n",
       " 118,\n",
       " 119,\n",
       " 120,\n",
       " 121,\n",
       " 122,\n",
       " 123,\n",
       " 124,\n",
       " 125,\n",
       " 126,\n",
       " 127,\n",
       " 128,\n",
       " 129,\n",
       " 130,\n",
       " 131,\n",
       " 132,\n",
       " 133,\n",
       " 134,\n",
       " 135,\n",
       " 136,\n",
       " 137,\n",
       " 138,\n",
       " 139,\n",
       " 140,\n",
       " 141,\n",
       " 142,\n",
       " 143,\n",
       " 144,\n",
       " 145,\n",
       " 146,\n",
       " 147,\n",
       " 148,\n",
       " 149,\n",
       " 150,\n",
       " 151,\n",
       " 152,\n",
       " 153,\n",
       " 154,\n",
       " 155,\n",
       " 156,\n",
       " 157,\n",
       " 158,\n",
       " 159,\n",
       " 160,\n",
       " 161,\n",
       " 162,\n",
       " 163,\n",
       " 164,\n",
       " 165,\n",
       " 166,\n",
       " 167,\n",
       " 168,\n",
       " 169,\n",
       " 170,\n",
       " 171,\n",
       " 172,\n",
       " 173,\n",
       " 174,\n",
       " 175,\n",
       " 176,\n",
       " 177,\n",
       " 178,\n",
       " 179,\n",
       " 180,\n",
       " 181,\n",
       " 182,\n",
       " 183,\n",
       " 184,\n",
       " 185,\n",
       " 186,\n",
       " 187,\n",
       " 188,\n",
       " 189,\n",
       " 190,\n",
       " 191,\n",
       " 192,\n",
       " 193,\n",
       " 194,\n",
       " 195,\n",
       " 196,\n",
       " 197,\n",
       " 198,\n",
       " 199,\n",
       " 200,\n",
       " 201,\n",
       " 202,\n",
       " 203,\n",
       " 204,\n",
       " 205,\n",
       " 206,\n",
       " 207,\n",
       " 208,\n",
       " 209,\n",
       " 210,\n",
       " 211,\n",
       " 212,\n",
       " 213,\n",
       " 214,\n",
       " 215,\n",
       " 216,\n",
       " 217,\n",
       " 218,\n",
       " 219,\n",
       " 220,\n",
       " 221,\n",
       " 222,\n",
       " 223,\n",
       " 224,\n",
       " 225,\n",
       " 226,\n",
       " 227,\n",
       " 228,\n",
       " 229,\n",
       " 230,\n",
       " 231,\n",
       " 232,\n",
       " 233,\n",
       " 234,\n",
       " 235,\n",
       " 236,\n",
       " 237,\n",
       " 238,\n",
       " 239,\n",
       " 240,\n",
       " 241,\n",
       " 242,\n",
       " 243,\n",
       " 244,\n",
       " 245,\n",
       " 246,\n",
       " 247,\n",
       " 248,\n",
       " 249,\n",
       " 250,\n",
       " 251,\n",
       " 252,\n",
       " 253,\n",
       " 254,\n",
       " 255,\n",
       " 256,\n",
       " 257,\n",
       " 258,\n",
       " 259,\n",
       " 260,\n",
       " 261,\n",
       " 262,\n",
       " 263,\n",
       " 264,\n",
       " 265,\n",
       " 266,\n",
       " 267,\n",
       " 268,\n",
       " 269,\n",
       " 270,\n",
       " 271,\n",
       " 272,\n",
       " 273,\n",
       " 274,\n",
       " 275,\n",
       " 276,\n",
       " 277,\n",
       " 278,\n",
       " 279,\n",
       " 280,\n",
       " 281,\n",
       " 282,\n",
       " 283,\n",
       " 284,\n",
       " 285,\n",
       " 286,\n",
       " 287,\n",
       " 288,\n",
       " 289,\n",
       " 290,\n",
       " 291,\n",
       " 292,\n",
       " 293,\n",
       " 294,\n",
       " 295,\n",
       " 296,\n",
       " 297,\n",
       " 298,\n",
       " 299]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_feats = [c for c in X.columns]\n",
    "num_feats\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "ca9f108d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#cat_feats = [c for c in y.columns]\n",
    "cat_feats = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e1385658",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting autofeatselect\n",
      "  Downloading AutoFeatSelect-0.1.5-py3-none-any.whl (12 kB)\n",
      "Collecting Boruta\n",
      "  Downloading Boruta-0.3-py3-none-any.whl (56 kB)\n",
      "\u001b[K     |████████████████████████████████| 56 kB 3.1 MB/s eta 0:00:011\n",
      "\u001b[?25hRequirement already satisfied: xgboost in /usr/local/lib/python3.8/dist-packages (from autofeatselect) (1.1.1)\n",
      "Requirement already satisfied: lightgbm in /usr/local/lib/python3.8/dist-packages (from autofeatselect) (2.3.1)\n",
      "Collecting category-encoders\n",
      "  Downloading category_encoders-2.6.2-py2.py3-none-any.whl (81 kB)\n",
      "\u001b[K     |████████████████████████████████| 81 kB 11.8 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: scikit-learn>=0.17.1 in /usr/local/lib/python3.8/dist-packages (from Boruta->autofeatselect) (0.23.1)\n",
      "Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.8/dist-packages (from Boruta->autofeatselect) (1.19.1)\n",
      "Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.8/dist-packages (from Boruta->autofeatselect) (1.5.4)\n",
      "Requirement already satisfied: importlib-resources; python_version < \"3.9\" in /usr/local/lib/python3.8/dist-packages (from category-encoders->autofeatselect) (5.7.1)\n",
      "Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.8/dist-packages (from category-encoders->autofeatselect) (1.0.5)\n",
      "Collecting patsy>=0.5.1\n",
      "  Downloading patsy-0.5.3-py2.py3-none-any.whl (233 kB)\n",
      "\u001b[K     |████████████████████████████████| 233 kB 28.9 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting statsmodels>=0.9.0\n",
      "  Downloading statsmodels-0.14.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (10.2 MB)\n",
      "\u001b[K     |████████████████████████████████| 10.2 MB 12.3 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.8/dist-packages (from scikit-learn>=0.17.1->Boruta->autofeatselect) (1.0.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from scikit-learn>=0.17.1->Boruta->autofeatselect) (3.1.0)\n",
      "Requirement already satisfied: zipp>=3.1.0; python_version < \"3.10\" in /usr/local/lib/python3.8/dist-packages (from importlib-resources; python_version < \"3.9\"->category-encoders->autofeatselect) (3.8.0)\n",
      "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.8/dist-packages (from pandas>=1.0.5->category-encoders->autofeatselect) (2022.1)\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.8/dist-packages (from pandas>=1.0.5->category-encoders->autofeatselect) (2.8.2)\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from patsy>=0.5.1->category-encoders->autofeatselect) (1.15.0)\n",
      "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.8/dist-packages (from statsmodels>=0.9.0->category-encoders->autofeatselect) (21.3)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging>=21.3->statsmodels>=0.9.0->category-encoders->autofeatselect) (3.0.9)\n",
      "Installing collected packages: Boruta, patsy, statsmodels, category-encoders, autofeatselect\n",
      "Successfully installed Boruta-0.3 autofeatselect-0.1.5 category-encoders-2.6.2 patsy-0.5.3 statsmodels-0.14.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install autofeatselect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "52f07046",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "787f0cb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "bestfeatures = SelectKBest(score_func = chi2, k=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "94aada9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ydata = y.iloc[:,-1]\n",
    "#Xdata = X.iloc[:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d64f3950",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67045</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67046</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67047</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67048</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67049</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Result\n",
       "0           1\n",
       "1           3\n",
       "2           1\n",
       "3           1\n",
       "4           1\n",
       "...       ...\n",
       "67045       3\n",
       "67046       1\n",
       "67047       1\n",
       "67048       1\n",
       "67049       1\n",
       "\n",
       "[67050 rows x 1 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "37536d6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = y.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "34af757a",
   "metadata": {},
   "outputs": [],
   "source": [
    "bestfit = bestfeatures.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "00b5f61b",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfscores = pd.DataFrame(bestfit.scores_)\n",
    "dfcolumns= pd.DataFrame(X.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6358ec12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Specs      Score\n",
      "228   227 1303245.80\n",
      "227   226 1294766.94\n",
      "229   228 1276631.53\n",
      "226   225 1251192.80\n",
      "230   229 1223367.51\n",
      "225   224 1185695.74\n",
      "231   230 1155193.21\n",
      "224   223 1099604.66\n",
      "232   231 1083018.56\n",
      "243   242 1054508.17\n",
      "242   241 1040989.41\n",
      "244   243 1038266.42\n",
      "233   232 1018014.91\n",
      "241   240 1007667.40\n",
      "223   222 1000398.87\n",
      "245   244  997562.76\n",
      "240   239  980028.94\n",
      "234   233  967845.61\n",
      "239   238  966111.50\n",
      "238   237  955467.25\n"
     ]
    }
   ],
   "source": [
    "#concat two dataframes for better visualization \n",
    "featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n",
    "featureScores.columns = ['Specs','Score']  #naming the dataframe columns\n",
    "print(featureScores.nlargest(20,'Score'))  #print 10 best features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "00942247",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "301"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(model.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "14553a8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 6000x3600 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "model = ExtraTreesClassifier()\n",
    "model.fit(X,y)\n",
    "#bestfeatures.fit(X,y)\n",
    "#print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n",
    "#plot graph of feature importances for better visualization\n",
    "feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n",
    "#feat_importances = pd.Series(bestfit.scores_, index=X.columns)\n",
    "\n",
    "\n",
    "fig = plt.figure(figsize=(10,6), dpi=600)\n",
    "ax = fig.gca()\n",
    "\n",
    "feat_importances.nlargest(10).plot(kind='barh')\n",
    "\n",
    "#ax.legend(title=\"Number in Group\", handles=legend_elements)#, loc='center')\n",
    "ax.axes.set_title(\"Ten Largest Features\",fontsize=30)\n",
    "ax.set_ylabel(\"Features\",fontsize=20)\n",
    "#ax.set_yticklabels(ax.get_yticklabels(),rotation=30)\n",
    "ax.set_xlabel(\"Importance Score\",fontsize=20)\n",
    "ax.tick_params(labelsize=15)\n",
    "plt.grid()\n",
    "ax.xaxis.grid(True)\n",
    "ax.yaxis.grid(True)\n",
    "plt.show()\n",
    "#fig.savefig('ten_most_import_feat_Sept17.tiff', dpi=600, format=\"tiff\", pil_kwargs={\"compression\": \"tiff_lzw\"})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f5e838ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 6000x3600 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10,6), dpi=600)\n",
    "ax = fig.gca()\n",
    "\n",
    "#plt.plot(range(300),dfscores)\n",
    "plt.plot(range(301), model.feature_importances_)\n",
    "#ax.legend(title=\"Number in Group\", handles=legend_elements)#, loc='center')\n",
    "#ax.axes.set_title(\"Title\",fontsize=30)\n",
    "ax.set_xlabel(\"Features\",fontsize=20)\n",
    "#ax.set_yticklabels(ax.get_yticklabels(),rotation=30)\n",
    "ax.set_ylabel(\"Importance Score\",fontsize=20)\n",
    "ax.tick_params(labelsize=15)\n",
    "plt.grid()\n",
    "ax.xaxis.grid(True)\n",
    "ax.yaxis.grid(True)\n",
    "fig.savefig('all_feat_import_Sept23.tiff', dpi=600, format=\"tiff\", pil_kwargs={\"compression\": \"tiff_lzw\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "cd386c7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1143.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>845.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>799.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>867.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1007.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>519.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>1425.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>2414.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>3108.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>3500.79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0\n",
       "0   1143.43\n",
       "1    845.36\n",
       "2    799.62\n",
       "3    867.61\n",
       "4   1007.59\n",
       "..      ...\n",
       "295  519.53\n",
       "296 1425.64\n",
       "297 2414.22\n",
       "298 3108.93\n",
       "299 3500.79\n",
       "\n",
       "[300 rows x 1 columns]"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfscores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "fcc8e5d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 6000x3600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fig setup\n",
    "fig = plt.figure(figsize=(10,6), dpi=600)\n",
    "ax = fig.gca()\n",
    "\n",
    "plt.plot(range(300),dfscores)\n",
    "#ax.legend(title=\"Number in Group\", handles=legend_elements)#, loc='center')\n",
    "#ax.axes.set_title(\"Title\",fontsize=30)\n",
    "ax.set_xlabel(\"Features\",fontsize=20)\n",
    "#ax.set_yticklabels(ax.get_yticklabels(),rotation=30)\n",
    "ax.set_ylabel(\"Importance Score\",fontsize=20)\n",
    "ax.tick_params(labelsize=15)\n",
    "plt.grid()\n",
    "ax.xaxis.grid(True)\n",
    "ax.yaxis.grid(True)\n",
    "#fig.savefig('all_feat_import_Sept17.tiff', dpi=600, format=\"tiff\", pil_kwargs={\"compression\": \"tiff_lzw\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "d879d013",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "e9a3717e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>24</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>28</td>\n",
       "      <td>33</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>28</td>\n",
       "      <td>33</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67045</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67046</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67047</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67048</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67049</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 300 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0    1    2    3    4    5    6    7    8    9    ...  290  291  292  \\\n",
       "0        0    3    5    9    6    9   15   18   22   24  ...   17   23   25   \n",
       "1        0    2    3    6   10   15   17   22   28   33  ...    1    1    2   \n",
       "2        1    0    0    2    1    3    2    3    4    6  ...    1    2    2   \n",
       "3        0    2    3    6   10   15   17   22   28   33  ...    1    1    2   \n",
       "4        0    2    4    3    6    7    9   13   15   18  ...    4    4    6   \n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
       "67045    0    0    0    1    2    2    3    4    5    6  ...    0    0    1   \n",
       "67046    0    0    0    0    0    0    1    1    1    1  ...    1    1    1   \n",
       "67047    0    0    0    1    1    1    1    1    1    1  ...    0    0    0   \n",
       "67048    6    6    6    6    6    6    6    6    5    5  ...    4    1    0   \n",
       "67049    2    2    2    3    3    3    3    3    4    4  ...    0    1    2   \n",
       "\n",
       "       293  294  295  296  297  298  299  \n",
       "0       34   43   57   72   69   54   45  \n",
       "1        3    3    3    4    6    9   14  \n",
       "2        2    2    3    6    9   13   17  \n",
       "3        3    3    3    4    6    9   14  \n",
       "4        8   14   16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  ...  ...  \n",
       "67045    2    3    3    4    5    7    7  \n",
       "67046    1    1    1    1    1    1    3  \n",
       "67047    0    0    0    0    1    1    2  \n",
       "67048    0    0    0    0    0    1    1  \n",
       "67049    2    3    3    3    3    4    6  \n",
       "\n",
       "[67050 rows x 300 columns]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = X#pd.DataFrame(X,columns = dfcolumns)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "d9c473da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corrmat = df1.corr()\n",
    "plt.figure(figsize=(8,5))\n",
    "sns.heatmap(corrmat, annot=True, cmap='RdYlGn')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86911ea9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2bb687e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "96ab721e",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "__init__() got an unexpected keyword argument 'default_model_linear'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [116]\u001b[0m, in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m model \u001b[38;5;241m=\u001b[39m DecisionTreeClassifier()\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#FS = FeatureSelector(objective='classification', \u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m#                     auto=True, \u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m#                     final_scoring_model=model)\u001b[39;00m\n\u001b[0;32m----> 8\u001b[0m FS \u001b[38;5;241m=\u001b[39m \u001b[43mFeatureSelector\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdefault_model_linear\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m     10\u001b[0m X_selected \u001b[38;5;241m=\u001b[39m FS\u001b[38;5;241m.\u001b[39mfit_transform(X, y)\n",
      "\u001b[0;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'default_model_linear'"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "model = DecisionTreeClassifier()\n",
    "#FS = FeatureSelector(objective='classification', \n",
    "#                     auto=True, \n",
    "#                     final_scoring_model=model)\n",
    "\n",
    "\n",
    "FS = FeatureSelector(default_model_linear = True)\n",
    "\n",
    "X_selected = FS.fit_transform(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "d278ba11",
   "metadata": {},
   "outputs": [],
   "source": [
    "from autofeatselect import CorrelationCalculator, FeatureSelector, AutoFeatureSelect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "150d4d77",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "object of type 'NoneType' has no len()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [111]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#Create AutoFeatureSelect class\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m feat_selector \u001b[38;5;241m=\u001b[39m \u001b[43mAutoFeatureSelect\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodeling_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mclassification\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;66;43;03m#,'regression',#\u001b[39;49;00m\n\u001b[1;32m      3\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43mX_train\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43my_train\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43mX_test\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX_test\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43my_test\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my_test\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      7\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43mnumeric_columns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_feats\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      8\u001b[0m \u001b[43m                                  \u001b[49m\u001b[38;5;66;43;03m#categorical_columns=cat_feats,\u001b[39;49;00m\n\u001b[1;32m      9\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43mseed\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m24\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m#Detect Correlated Features\u001b[39;00m\n\u001b[1;32m     12\u001b[0m corr_features \u001b[38;5;241m=\u001b[39m feat_selector\u001b[38;5;241m.\u001b[39mcalculate_correlated_features(static_features\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     13\u001b[0m                                                             num_threshold\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.9\u001b[39m,\n\u001b[1;32m     14\u001b[0m                                                             cat_threshold\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.9\u001b[39m)\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/autofeatselect/auto_feat_select.py:398\u001b[0m, in \u001b[0;36mFeatureSelector.__init__\u001b[0;34m(self, modeling_type, X_train, y_train, weight_train, X_test, y_test, numeric_columns, categorical_columns, seed)\u001b[0m\n\u001b[1;32m    395\u001b[0m     col_list \u001b[38;5;241m=\u001b[39m col_list \u001b[38;5;241m+\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcategorical_columns\n\u001b[1;32m    396\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mX_train \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mX_train[col_list]\n\u001b[0;32m--> 398\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mX_train\u001b[38;5;241m.\u001b[39mloc[\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mX_train)] \u001b[38;5;241m=\u001b[39m [np\u001b[38;5;241m.\u001b[39mnan] \u001b[38;5;241m*\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnumeric_columns) \u001b[38;5;241m+\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124munknown\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m*\u001b[39m \u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcategorical_columns\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    399\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39my_train\u001b[38;5;241m.\u001b[39mloc[\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39my_train)] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39my_train\u001b[38;5;241m.\u001b[39mmode()\u001b[38;5;241m.\u001b[39mvalues[\u001b[38;5;241m0\u001b[39m]\n\u001b[1;32m    401\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnumeric_columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mTypeError\u001b[0m: object of type 'NoneType' has no len()"
     ]
    }
   ],
   "source": [
    "#Create AutoFeatureSelect class\n",
    "feat_selector = AutoFeatureSelect(modeling_type='classification',#,'regression',#\n",
    "                                  X_train=X_train,\n",
    "                                  y_train=y_train,\n",
    "                                  X_test=X_test,\n",
    "                                  y_test=y_test,\n",
    "                                  numeric_columns=num_feats,\n",
    "                                  #categorical_columns=cat_feats,\n",
    "                                  seed=24)\n",
    "\n",
    "#Detect Correlated Features\n",
    "corr_features = feat_selector.calculate_correlated_features(static_features=None,\n",
    "                                                            num_threshold=0.9,\n",
    "                                                            cat_threshold=0.9)\n",
    "#Drop Correlated Features\n",
    "feat_selector.drop_correlated_features()\n",
    "\n",
    "#Determine Selection Methods to Apply\n",
    "#Options: 'lgbm', 'xgb', 'rf','perimp', 'rfecv', 'boruta', 'lassocv'\n",
    "#Note: Hyperparameters of all methods can be changed\n",
    "selection_methods = ['lgbm']#, 'xgb', 'rf','perimp', 'rfecv', 'boruta']\n",
    "final_importance_df = feat_selector.apply_feature_selection(selection_methods=selection_methods,\n",
    "                                                            lgbm_hyperparams=None,\n",
    "                                                            xgb_hyperparams=None,\n",
    "                                                            rf_hyperparams=None,\n",
    "                                                            lassocv_hyperparams=None,\n",
    "                                                            perimp_hyperparams=None,\n",
    "                                                            rfecv_hyperparams=None,\n",
    "                                                            boruta_hyperparams=None)\n",
    "\n",
    "#Print Results\n",
    "final_importance_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a7ec4c69",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_main = full_df.drop(columns=['Healthy','M-KOMPG','M-KOMPD','M-KOMPA','M-KOMPM'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "859d5480",
   "metadata": {},
   "outputs": [],
   "source": [
    "#M = 000\n",
    "#X = X.iloc[:M]\n",
    "#y = y.iloc[:M]\n",
    "\n",
    "# Creating train test split\n",
    "# Call train_test_split on the data and capture the results\n",
    "#X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3,test_size=0.25)\n",
    "\n",
    "# train, test, validation split\n",
    "X_train, y_train, X_valid, y_valid, X_test, y_test = train_valid_test_split(df_main, \n",
    "                                                                            target = 'Result', \n",
    "                                                                            random_state=3,\n",
    "                                                                            train_size=0.1,#0.7, \n",
    "                                                                            valid_size=0.6,#0.00002, \n",
    "                                                                            test_size=0.01)##0.29998)\n",
    "\n",
    "# reset index\n",
    "#for data in [X_train, y_train, X_valid, y_valid, X_test, y_test]:\n",
    "#    data.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4eaf8e5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The test samples for M-KOMPG have: 34\n",
      "The test samples for Healthy have: 157\n",
      "The test samples for M-KOMPM have: 766\n",
      "The test samples for M-KOMPA have: 33\n"
     ]
    }
   ],
   "source": [
    "word = ['M-KOMPG','Healthy','M-KOMPM','M-KOMPA']\n",
    "for k in range(len(word)):\n",
    "    print(\"The test samples for {} have: {}\".format(word[k], len(y_test[y_test==k])))\n",
    "\n",
    "#A = len(y_test[y_test==4])\n",
    "#A = len(y_test[y_test==4])\n",
    "#print('The test samples: M: {}, A: {}, D: {}, G: {}'.format(len(y[y['M-KOMPM']==1]),len(y[y['M-KOMPA']==1]),len(y[y['M-KOMPD']==1]), len(y[y['M-KOMPG']==1])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "987142a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The length of training data is 6705 and the testing data length is 990.\n"
     ]
    }
   ],
   "source": [
    "print('The length of training data is {} and the testing data length is {}.'.format(len(y_train),len(y_test)))\n",
    "#len(y_test[y_test==4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "b3fe93df",
   "metadata": {},
   "outputs": [],
   "source": [
    "#print('The test samples: M: {}, A: {}, D: {}, G: {}'.format(len(y[y['M-KOMPM']==1]),len(y[y['M-KOMPA']==1]),len(y[y['M-KOMPD']==1]), len(y[y['M-KOMPG']==1])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "204c65c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#roc = {label: [] for label in multi_class_series.unique()}\n",
    "#for label in multi_class_series.unique():\n",
    "#    selected_classifier.fit(train_set_dataframe, train_class == label)\n",
    "#    predictions_proba = selected_classifier.predict_proba(test_set_dataframe)\n",
    "#    roc[label] += roc_auc_score(test_class, predictions_proba[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1a90ec31",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.metrics import roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "24bf6c48",
   "metadata": {},
   "outputs": [],
   "source": [
    "#roc_auc_score(YTEST,YPRED, multi_class='ovr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0661cbf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#myscore = make_scorer(roc_auc_score, multi_class='ovo',needs_proba=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39457656",
   "metadata": {},
   "source": [
    "### Classification "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b444e6eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  3%|█▌                                          | 1/29 [00:05<02:32,  5.46s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for AdaBoostClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 10%|████▌                                       | 3/29 [00:34<04:31, 10.44s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for BaggingClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "ROC AUC couldn't be calculated for BernoulliNB\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 17%|███████▌                                    | 5/29 [02:07<11:04, 27.68s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for CalibratedClassifierCV\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "CategoricalNB model failed to execute\n",
      "Negative values in data passed to CategoricalNB (input X)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 28%|████████████▏                               | 8/29 [02:13<03:33, 10.18s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for DecisionTreeClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "ROC AUC couldn't be calculated for DummyClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "ROC AUC couldn't be calculated for ExtraTreeClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 34%|██████████████▊                            | 10/29 [02:15<01:53,  5.97s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for ExtraTreesClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "ROC AUC couldn't be calculated for GaussianNB\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 38%|████████████████▎                          | 11/29 [02:17<01:29,  4.95s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for KNeighborsClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 41%|█████████████████▊                         | 12/29 [02:19<01:08,  4.00s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for LabelPropagation\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 45%|███████████████████▎                       | 13/29 [02:21<00:54,  3.44s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for LabelSpreading\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 48%|████████████████████▊                      | 14/29 [02:22<00:39,  2.61s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for LinearDiscriminantAnalysis\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 52%|██████████████████████▏                    | 15/29 [02:47<02:11,  9.40s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for LinearSVC\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 59%|█████████████████████████▏                 | 17/29 [02:48<00:57,  4.82s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for LogisticRegression\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "ROC AUC couldn't be calculated for NearestCentroid\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 62%|██████████████████████████▋                | 18/29 [02:48<00:37,  3.42s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NuSVC model failed to execute\n",
      "specified nu is infeasible\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 66%|████████████████████████████▏              | 19/29 [02:49<00:24,  2.50s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for PassiveAggressiveClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 69%|█████████████████████████████▋             | 20/29 [02:49<00:16,  1.82s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for Perceptron\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 72%|███████████████████████████████▏           | 21/29 [02:49<00:11,  1.41s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for QuadraticDiscriminantAnalysis\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|██████████████████████████████████         | 23/29 [03:03<00:21,  3.66s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for RandomForestClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "ROC AUC couldn't be calculated for RidgeClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 83%|███████████████████████████████████▌       | 24/29 [03:04<00:13,  2.68s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for RidgeClassifierCV\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 86%|█████████████████████████████████████      | 25/29 [03:07<00:11,  2.85s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for SGDClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 90%|██████████████████████████████████████▌    | 26/29 [03:13<00:11,  3.87s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for SVC\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "StackingClassifier model failed to execute\n",
      "__init__() missing 1 required positional argument: 'estimators'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 97%|█████████████████████████████████████████▌ | 28/29 [03:15<00:02,  2.53s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for XGBClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████| 29/29 [03:17<00:00,  6.83s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC couldn't be calculated for LGBMClassifier\n",
      "multi_class must be in ('ovo', 'ovr')\n",
      "                               Accuracy  Balanced Accuracy ROC AUC  F1 Score  \\\n",
      "Model                                                                          \n",
      "BaggingClassifier                  0.90               0.58    None      0.89   \n",
      "DecisionTreeClassifier             0.86               0.55    None      0.86   \n",
      "ExtraTreesClassifier               0.92               0.55    None      0.90   \n",
      "RandomForestClassifier             0.90               0.54    None      0.89   \n",
      "XGBClassifier                      0.91               0.53    None      0.89   \n",
      "LGBMClassifier                     0.91               0.52    None      0.89   \n",
      "GaussianNB                         0.78               0.48    None      0.77   \n",
      "KNeighborsClassifier               0.87               0.48    None      0.85   \n",
      "ExtraTreeClassifier                0.82               0.46    None      0.82   \n",
      "QuadraticDiscriminantAnalysis      0.90               0.46    None      0.87   \n",
      "SVC                                0.87               0.45    None      0.85   \n",
      "LabelPropagation                   0.62               0.45    None      0.69   \n",
      "LabelSpreading                     0.62               0.45    None      0.69   \n",
      "AdaBoostClassifier                 0.80               0.40    None      0.78   \n",
      "NearestCentroid                    0.53               0.40    None      0.59   \n",
      "BernoulliNB                        0.42               0.39    None      0.48   \n",
      "Perceptron                         0.79               0.38    None      0.77   \n",
      "PassiveAggressiveClassifier        0.78               0.36    None      0.76   \n",
      "LogisticRegression                 0.81               0.35    None      0.77   \n",
      "LinearDiscriminantAnalysis         0.80               0.35    None      0.75   \n",
      "SGDClassifier                      0.78               0.34    None      0.74   \n",
      "LinearSVC                          0.81               0.34    None      0.76   \n",
      "CalibratedClassifierCV             0.80               0.31    None      0.74   \n",
      "RidgeClassifier                    0.80               0.31    None      0.74   \n",
      "RidgeClassifierCV                  0.80               0.31    None      0.73   \n",
      "DummyClassifier                    0.62               0.23    None      0.61   \n",
      "\n",
      "                               Time Taken  \n",
      "Model                                      \n",
      "BaggingClassifier                   28.67  \n",
      "DecisionTreeClassifier               5.03  \n",
      "ExtraTreesClassifier                 2.37  \n",
      "RandomForestClassifier              13.95  \n",
      "XGBClassifier                        1.94  \n",
      "LGBMClassifier                       2.31  \n",
      "GaussianNB                           0.11  \n",
      "KNeighborsClassifier                 2.32  \n",
      "ExtraTreeClassifier                  0.09  \n",
      "QuadraticDiscriminantAnalysis        0.44  \n",
      "SVC                                  6.26  \n",
      "LabelPropagation                     1.63  \n",
      "LabelSpreading                       2.03  \n",
      "AdaBoostClassifier                   5.46  \n",
      "NearestCentroid                      0.13  \n",
      "BernoulliNB                          0.12  \n",
      "Perceptron                           0.24  \n",
      "PassiveAggressiveClassifier          0.34  \n",
      "LogisticRegression                   0.65  \n",
      "LinearDiscriminantAnalysis           0.61  \n",
      "SGDClassifier                        3.25  \n",
      "LinearSVC                           25.64  \n",
      "CalibratedClassifierCV              93.49  \n",
      "RidgeClassifier                      0.15  \n",
      "RidgeClassifierCV                    0.38  \n",
      "DummyClassifier                      0.07  \n",
      "CPU times: user 8min 22s, sys: 2min 5s, total: 10min 27s\n",
      "Wall time: 3min 17s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "reg = LazyClassifier(ignore_warnings=False, custom_metric=None)\n",
    "\n",
    "#reg = LazyRegressor(ignore_warnings=False, custom_metric=None)\n",
    "#N=16500\n",
    "models, predictions = reg.fit(X_train, X_test, y_train, y_test)\n",
    "print(models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9542ad75",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "clf = LogisticRegression(solver=\"liblinear\").fit(X_train, y_train)\n",
    "preds = clf.predict_proba(X_test)\n",
    "roc_auc = roc_auc_score(y_test,preds, multi_class='ovr')\n",
    "print(roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "602cbd11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43634    2\n",
       "23889    1\n",
       "47455    2\n",
       "16844    3\n",
       "65951    1\n",
       "        ..\n",
       "43883    2\n",
       "11261    2\n",
       "25365    2\n",
       "48056    2\n",
       "59011    2\n",
       "Name: Result, Length: 20115, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('We have {} for training and {} for testing.'.format(len(y_train), len(y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7832e098",
   "metadata": {},
   "source": [
    "### Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "44538abb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 21%|█████████▍                                  | 9/42 [01:25<07:12, 13.12s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GammaRegressor model failed to execute\n",
      "Some value(s) of y are out of the valid range for family GammaDistribution\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|█████████████████████████████████▊         | 33/42 [03:33<00:55,  6.19s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RANSACRegressor model failed to execute\n",
      "RANSAC could not find a valid consensus set. All `max_trials` iterations were skipped because each randomly chosen sub-sample failed the passing criteria. See estimator attributes for diagnostics (n_skips*).\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████| 42/42 [08:12<00:00, 11.74s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                              Adjusted R-Squared  \\\n",
      "Model                                                                              \n",
      "ExtraTreesRegressor                                                         0.21   \n",
      "RandomForestRegressor                                                       0.17   \n",
      "LGBMRegressor                                                               0.13   \n",
      "BaggingRegressor                                                            0.11   \n",
      "HistGradientBoostingRegressor                                               0.10   \n",
      "GradientBoostingRegressor                                                   0.06   \n",
      "XGBRegressor                                                                0.04   \n",
      "SVR                                                                        -0.02   \n",
      "MLPRegressor                                                               -0.03   \n",
      "NuSVR                                                                      -0.06   \n",
      "KNeighborsRegressor                                                        -0.09   \n",
      "PoissonRegressor                                                           -0.30   \n",
      "LassoLarsCV                                                                -0.33   \n",
      "LassoCV                                                                    -0.33   \n",
      "ElasticNetCV                                                               -0.33   \n",
      "GeneralizedLinearRegressor                                                 -0.34   \n",
      "TweedieRegressor                                                           -0.34   \n",
      "RidgeCV                                                                    -0.34   \n",
      "LassoLarsIC                                                                -0.34   \n",
      "BayesianRidge                                                              -0.35   \n",
      "OrthogonalMatchingPursuit                                                  -0.35   \n",
      "ExtraTreeRegressor                                                         -0.36   \n",
      "Ridge                                                                      -0.36   \n",
      "OrthogonalMatchingPursuitCV                                                -0.37   \n",
      "TransformedTargetRegressor                                                 -0.38   \n",
      "LinearRegression                                                           -0.38   \n",
      "LassoLars                                                                  -0.44   \n",
      "Lasso                                                                      -0.44   \n",
      "LarsCV                                                                     -0.44   \n",
      "ElasticNet                                                                 -0.44   \n",
      "DummyRegressor                                                             -0.44   \n",
      "LinearSVR                                                                  -0.45   \n",
      "HuberRegressor                                                             -0.52   \n",
      "AdaBoostRegressor                                                          -0.58   \n",
      "DecisionTreeRegressor                                                      -0.66   \n",
      "PassiveAggressiveRegressor                                                 -2.33   \n",
      "GaussianProcessRegressor                                                   -7.24   \n",
      "KernelRidge                                                                -7.46   \n",
      "SGDRegressor                                               -65717276666825656.00   \n",
      "Lars                          -2301632285516105282849785103931912079869150043...   \n",
      "\n",
      "                                                                       R-Squared  \\\n",
      "Model                                                                              \n",
      "ExtraTreesRegressor                                                         0.45   \n",
      "RandomForestRegressor                                                       0.42   \n",
      "LGBMRegressor                                                               0.39   \n",
      "BaggingRegressor                                                            0.38   \n",
      "HistGradientBoostingRegressor                                               0.38   \n",
      "GradientBoostingRegressor                                                   0.35   \n",
      "XGBRegressor                                                                0.33   \n",
      "SVR                                                                         0.29   \n",
      "MLPRegressor                                                                0.28   \n",
      "NuSVR                                                                       0.26   \n",
      "KNeighborsRegressor                                                         0.24   \n",
      "PoissonRegressor                                                            0.10   \n",
      "LassoLarsCV                                                                 0.07   \n",
      "LassoCV                                                                     0.07   \n",
      "ElasticNetCV                                                                0.07   \n",
      "GeneralizedLinearRegressor                                                  0.07   \n",
      "TweedieRegressor                                                            0.07   \n",
      "RidgeCV                                                                     0.07   \n",
      "LassoLarsIC                                                                 0.06   \n",
      "BayesianRidge                                                               0.06   \n",
      "OrthogonalMatchingPursuit                                                   0.06   \n",
      "ExtraTreeRegressor                                                          0.06   \n",
      "Ridge                                                                       0.05   \n",
      "OrthogonalMatchingPursuitCV                                                 0.04   \n",
      "TransformedTargetRegressor                                                  0.04   \n",
      "LinearRegression                                                            0.04   \n",
      "LassoLars                                                                  -0.00   \n",
      "Lasso                                                                      -0.00   \n",
      "LarsCV                                                                     -0.00   \n",
      "ElasticNet                                                                 -0.00   \n",
      "DummyRegressor                                                             -0.00   \n",
      "LinearSVR                                                                  -0.01   \n",
      "HuberRegressor                                                             -0.06   \n",
      "AdaBoostRegressor                                                          -0.10   \n",
      "DecisionTreeRegressor                                                      -0.15   \n",
      "PassiveAggressiveRegressor                                                 -1.32   \n",
      "GaussianProcessRegressor                                                   -4.74   \n",
      "KernelRidge                                                                -4.90   \n",
      "SGDRegressor                                               -45782814583865392.00   \n",
      "Lars                          -1603462734803434231273845759997891117421339313...   \n",
      "\n",
      "                                                      RMSE  Time Taken  \n",
      "Model                                                                   \n",
      "ExtraTreesRegressor                                   0.40       34.34  \n",
      "RandomForestRegressor                                 0.41      270.91  \n",
      "LGBMRegressor                                         0.42        0.69  \n",
      "BaggingRegressor                                      0.42       28.10  \n",
      "HistGradientBoostingRegressor                         0.43        8.85  \n",
      "GradientBoostingRegressor                             0.44       26.32  \n",
      "XGBRegressor                                          0.44        0.68  \n",
      "SVR                                                   0.45        6.19  \n",
      "MLPRegressor                                          0.46        7.14  \n",
      "NuSVR                                                 0.46       24.09  \n",
      "KNeighborsRegressor                                   0.47        2.39  \n",
      "PoissonRegressor                                      0.51        0.16  \n",
      "LassoLarsCV                                           0.52        3.74  \n",
      "LassoCV                                               0.52       12.05  \n",
      "ElasticNetCV                                          0.52       12.39  \n",
      "GeneralizedLinearRegressor                            0.52        0.15  \n",
      "TweedieRegressor                                      0.52        0.14  \n",
      "RidgeCV                                               0.52        0.44  \n",
      "LassoLarsIC                                           0.52        0.72  \n",
      "BayesianRidge                                         0.52        0.45  \n",
      "OrthogonalMatchingPursuit                             0.52        0.12  \n",
      "ExtraTreeRegressor                                    0.52        0.46  \n",
      "Ridge                                                 0.52        0.20  \n",
      "OrthogonalMatchingPursuitCV                           0.53        0.50  \n",
      "TransformedTargetRegressor                            0.53        0.24  \n",
      "LinearRegression                                      0.53        0.26  \n",
      "LassoLars                                             0.54        0.19  \n",
      "Lasso                                                 0.54        0.16  \n",
      "LarsCV                                                0.54        2.34  \n",
      "ElasticNet                                            0.54        0.11  \n",
      "DummyRegressor                                        0.54        0.08  \n",
      "LinearSVR                                             0.54        8.93  \n",
      "HuberRegressor                                        0.55        1.36  \n",
      "AdaBoostRegressor                                     0.57        4.63  \n",
      "DecisionTreeRegressor                                 0.58        4.73  \n",
      "PassiveAggressiveRegressor                            0.82        0.21  \n",
      "GaussianProcessRegressor                              1.29       11.81  \n",
      "KernelRidge                                           1.31        1.69  \n",
      "SGDRegressor                                  115189443.96        0.16  \n",
      "Lars                          6816962003552599751524352.00        0.49  \n",
      "CPU times: user 36min 17s, sys: 30min 56s, total: 1h 7min 13s\n",
      "Wall time: 8min 13s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "#reg = LazyClassifier(ignore_warnings=False, custom_metric=None)\n",
    "\n",
    "reg = LazyRegressor(ignore_warnings=False, custom_metric=None)\n",
    "N=10000\n",
    "models, predictions = reg.fit(X_train, X_test, y_train, y_test)\n",
    "print(models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "293799d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "XX_train, yy_train, XX_valid, yy_valid, XX_test, yy_test = train_valid_test_split(df_main, \n",
    "                                                                            target = 'Result', \n",
    "                                                                            random_state=3,\n",
    "                                                                            train_size=0.7, \n",
    "                                                                            valid_size=0.2, \n",
    "                                                                            test_size=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "081de5c3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eafe4ec9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "755597c7",
   "metadata": {},
   "source": [
    "### We now use ALL the data for training, validation and testing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "73d4c696",
   "metadata": {},
   "outputs": [],
   "source": [
    "XX_train, yy_train, XX_valid, yy_valid, XX_test, yy_test = train_valid_test_split(df_main, \n",
    "                                                                            target = 'Result', \n",
    "                                                                            random_state=3,\n",
    "                                                                            train_size=0.9, \n",
    "                                                                            valid_size=0.00002, \n",
    "                                                                            test_size=0.09998)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "75fca246",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The test samples for M-KOMPG have: 185\n",
      "The test samples for Healthy have: 1020\n",
      "The test samples for M-KOMPM have: 5300\n",
      "The test samples for M-KOMPA have: 199\n"
     ]
    }
   ],
   "source": [
    "word = ['M-KOMPG','Healthy','M-KOMPM','M-KOMPA']\n",
    "for k in range(len(word)):\n",
    "    print(\"The test samples for {} have: {}\".format(word[k], len(yy_test[yy_test==k])))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "d04d1388",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The test samples for M-KOMPG have: 1560\n",
      "The test samples for Healthy have: 9517\n",
      "The test samples for M-KOMPM have: 47252\n",
      "The test samples for M-KOMPA have: 2016\n"
     ]
    }
   ],
   "source": [
    "word = ['M-KOMPG','Healthy','M-KOMPM','M-KOMPA']\n",
    "for k in range(len(word)):\n",
    "    print(\"The test samples for {} have: {}\".format(word[k], len(yy_train[yy_train==k])))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "254514e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "xgb_classifier = OneVsRestClassifier(XGBClassifier())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "40e698d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneVsRestClassifier(estimator=XGBClassifier(base_score=None, booster=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, gamma=None,\n",
       "                                            gpu_id=None, importance_type='gain',\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_rate=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            n_estimators=100, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=None, reg_alpha=None,\n",
       "                                            reg_lambda=None,\n",
       "                                            scale_pos_weight=None,\n",
       "                                            subsample=None, tree_method=None,\n",
       "                                            validate_parameters=None,\n",
       "                                            verbosity=None))"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_classifier.fit(XX_train, yy_train)#training_inputs, training_outputs_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4d88974",
   "metadata": {},
   "outputs": [],
   "source": [
    "'Healthy','M-KOMPG','M-KOMPD','M-KOMPA','M-KOMPM'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9cae531a",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = ['Healthy','M-KOMPA','M-KOMPG','M-KOMPM']#,'M-KOMPD']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0722f1c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_predictions_labels = xgb_classifier.predict(XX_valid)\n",
    "#xgb_predictions_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "3fc873ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#training_outputs_labels_l = [np.argmax(training_outputs_labels.iloc[p,:]) for p in range(len(training_outputs_labels))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8acdf5ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.38      0.51       190\n",
      "           1       0.95      1.00      0.97      5267\n",
      "           2       0.78      0.61      0.68       185\n",
      "           3       0.90      0.82      0.86      1063\n",
      "\n",
      "    accuracy                           0.94      6705\n",
      "   macro avg       0.85      0.70      0.76      6705\n",
      "weighted avg       0.94      0.94      0.94      6705\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(yy_test, xgb_predictions_labels, labels)#(testing_outputs_labels_l, rf_predictions_labels, labels)\n",
    "#xgb_predictions = [one_hot(p,z) for p in xgb_predictions_labels]\n",
    "#Image.fromarray(xgb_predictions_labels)#format_prediction(xgb_predictions_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ee1c94f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 110,   45,   23,    7],\n",
       "       [   2, 5289,    9,    0],\n",
       "       [   4,  134,  870,   12],\n",
       "       [   7,   46,   67,   79]])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(yy_test, xgb_predictions_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "d85bf336",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "461"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kommlen(y_test[y_test==1]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea80b0e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_classifier = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "34bfe027",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training the Random forest here\n",
    "rf_classifier.fit(XX_train, yy_train)#training_inputs, training_outputs_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a0e47b4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_predictions_labels = rf_classifier.predict(XX_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "bdcbb5fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.60      0.71       185\n",
      "           1       0.97      1.00      0.98      5300\n",
      "           2       0.87      0.88      0.88      1020\n",
      "           3       0.84      0.38      0.52       199\n",
      "\n",
      "    accuracy                           0.95      6704\n",
      "   macro avg       0.89      0.71      0.77      6704\n",
      "weighted avg       0.95      0.95      0.94      6704\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAAEICAYAAAD8yyfzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAyY0lEQVR4nO3dd3gUVffA8e/ZTSGQkJBAEkrooAJSJEqTKlVexYIFuy+I/iz4Wqk2FFCkiAoiVsSOSlEioKCCiAgqBkGE0FsSCCX0JLv398cuYRNIZTO7CefzPPOQmblz59xh9+zdO2XFGINSSilr2HwdgFJKnU806SqllIU06SqllIU06SqllIU06SqllIU06SqllIU06apsIhIiIl+LyCERmXkO9dwqIgu9GZsviMi3InKnr+NQZYsm3VJIRG4RkVUickRE9riTw+VeqLovEANEGWNuKG4lxpiPjDHdvRBPDiLSSUSMiMzKtbyZe/mPhaznWRH5sKByxphexpjpxQxXqbPSpFvKiMijwCvAaFwJsiYwBejjheprARuMMVleqKuk7AXaiEiUx7I7gQ3e2oG46HtDlQxjjE6lZALCgSPADfmUCcaVlHe7p1eAYPe6TsBO4DEgFdgD3O1e9xyQAWS699EfeBb40KPu2oABAtzzdwGbgcPAFuBWj+U/e2zXFlgJHHL/29Zj3Y/A88Aydz0Lgcp5tO1U/FOBB9zL7MAu4GngR4+yk4AdQDrwO9Devbxnrnb+5RHHKHccx4H67mUD3OvfAL70qP8lYBEgvn5d6FS6Jv00L13aAOWAWfmUGQ60BpoDzYDLgBEe62NxJe/quBLrZBGpZIx5Blfv+TNjTKgx5p38AhGRCsCrQC9jTBiuxLr6LOUigXnuslHABGBerp7qLcDdQDQQBDye376BD4A73H/3AP7G9QHjaSWuYxAJfAzMFJFyxpj5udrZzGOb24GBQBiwLVd9jwEXi8hdItIe17G70xij99GrItGkW7pEAftM/l//bwVGGmNSjTF7cfVgb/dYn+len2mMScDV27ugmPE4gSYiEmKM2WOMWXuWMr2BjcaYGcaYLGPMJ8B64CqPMu8ZYzYYY44Dn+NKlnkyxvwCRIrIBbiS7wdnKfOhMSbNvc/xuL4BFNTO940xa93bZOaq7xiu4zgB+BB4yBizs4D6lDqDJt3SJQ2oLCIB+ZSpRs5e2jb3suw6ciXtY0BoUQMxxhwFbgLuA/aIyDwRubAQ8ZyKqbrHfHIx4pkBPAh05iw9fxF5XET+cV+JcRBX775yAXXuyG+lMWYFruEUwfXhoFSRadItXZYDJ4Fr8imzG9cJsVNqcuZX78I6CpT3mI/1XGmMWWCM6QZUxdV7fasQ8ZyKaVcxYzplBnA/kODuhWZzf/1/ErgRqGSMicA1niynQs+jznyHCkTkAVw95t3u+pUqMk26pYgx5hCuE0aTReQaESkvIoEi0ktExrqLfQKMEJEqIlLZXb7Ay6PysBroICI1RSQcGHpqhYjEiEgf99juSVzDFM6z1JEANHRf5hYgIjcBjYBvihkTAMaYLUBHXGPYuYUBWbiudAgQkaeBih7rU4DaRblCQUQaAi8At+EaZnhSRJoXL3p1PtOkW8q4xycfxXVybC+ur8QPArPdRV4AVgGJwBrgD/ey4uzrO+Azd12/kzNR2txx7Ab240qA/3eWOtKA/+A6EZWGq4f4H2PMvuLElKvun40xZ+vFLwDm47qMbBtwgpxDB6du/EgTkT8K2o97OOdD4CVjzF/GmI3AMGCGiASfSxvU+Uf05KtSSllHe7pKKWUhTbpKKWUhTbpKKWUhTbpKKWWh/C6y94r6U5fomTq3r25M93UIfiMyWF8Wp1Qtn/sy5vOXXZpKwaXyF1KzX6FfXMe3f3LO+yuqEk+6SillJX9/QJwmXaVUmSJ+PmqqSVcpVaZoT1cppSykSVcppSwkYvd1CPnSpKuUKlO0p6uUUhbSpKuUUhbSqxeUUspC2tNVSikLadJVSikL2fTqBaWUso72dJVSykKadJVSykKadJVSylKadJVSyjI2m3+nNf+OTimlikhvjlBKKQvpmK5SSllIxPJf4CkSTbpKqTJFe7pKKWUhHdNVSikL6dULFuoQV4kR7ephF+Hzf5J5c/WOM8pcWa8yg1rWwgD/pB3l0UXrrQ+0hPy5fD3vvTIbp8PJFVe34to7rsix/utPfmLR3BXY7TYqRlTg/uE3UaVqJFs27OKtl7/k+NET2Gw2rrvrCtp1beGjVnjHb8vWM3ncHJwOJ1de24p+d3fJsT7x901MHj+XzRv3MGLMrXTs2ix7XcqeA4x/fiZ7kw+CwJjXBhBbLdLiFpybpUv/ZMyo93A4nfTtewX3DLw2x/qMjEyGDH6NtWs3ExERxoQJj1C9RjS/LPuLCeM/IjMzi8DAAB5/8nZat76Yo0eOc9ttT2Vvn5K8n6uubs/QYXdb3bQCaU/XIjaBZy+vz53frCH56Em+uq4Fi7alkXTgWHaZWuHluK9FTW6c/RfpGVlElgv0YcTe5XA4eWf8Vzw16V4io8MZ+t9XiG/fmLg6sdll6jSszkvv/Y/gckEs+OoXZkz+hkdfuIPgckE89HQ/qsZVYf/eQwy+eyLNW11IhbAQH7ao+BwOJ6++NIuxUwZSJSac+2+bRJuOjahd9/SxiK5aiSefvYmZM346Y/uXnv6EW/p3Jb51Q44fO+n3J2ZyczgcvDDyHd5+9yliYiK56YahdO4ST/36cdllvvxiMRUrhrJg4eskzFvG+PEfMmHio0RUqsiUN4YQHRPJxg3buWfAC/y4ZBoVQkOYNXtc9vZ9r3uSbt1a+aJ5BfPzMV3/jq4ImkWHsS39ODsOnyDTaZi3aS9da0flKHPTRVX58O/dpGdkAbD/RKYvQi0RSeu2E1sjipjqUQQGBtCuawtWLVmbo0yTlvUJLhcEQMPGNdmfegiAajWrUDWuCgCRVcIJrxRK+sEj1jbAi9b/vZ3qNaKoVsN1LDr3aM4vP+Y8FrHVIqnXsBpiy5lQt25OxuFwEt+6IQAh5YMpFxJkWezesCYxiZo1Y4mLiyEoKJBeV7Zj8aJVOcosXrSSa67pCED3Hq35dfnfGGNo1KgO0TGuXn39BnGcOJlBRkbO98nWLbvZvz+dlvEXWdOgIhKxFXryhTKTdGMqBLPnyMns+eQjJ4mpkPPNUic8hNoRIXx2TTO+uLY5HeIqWR1midm/9xBR0RHZ85HR4aTtPZRn+UVf/0aLNheesXzj2u1kZTqIqR51lq1Kh317D1ElNiJ7vkp0BPtS8z4WnnZu20eF0BCeeex97u03gTcnfo3D4SyhSEtGSsp+Yque/v+LjY0kNSUtZ5nU/cRWrQxAQICdsLDyHDx4OEeZhQt+pVGjugQF5fxGmJCwjJ692vrtNwARKfTkCwUmXRG5UEQGi8ir7mmwiPjnR1wB7DahdngIt85N5H/fr2dUx4aEBfn3szdLwpL5v7N5/Q6uvrVzjuUH9qXz2siPuX/EzdhsZebzuEgcDgd/r97CvY9cxZQZD7Nn134WfL3S12FZbuPGHUwY/xHPPjfwjHUJCcvo3budD6IqHMFW6MkX8t2riAwGPgUE+M09CfCJiAzJZ7uBIrJKRFalL53rzXjzlHL0JFVDg7PnY0ODSTmakaNM8pGTLNqaRpbTsPPwCbYcPEbt8NI5bplbZJVw0lIPZs/vTz1EVJXwM8ol/raBr97/nsFj/0tg0Okh/WNHTzDmsbfpd28vGjapZUXIJaZylXDXSTC3vakHqRx95rE4myrREdRrWI1qNaKwB9hp16kJG//ZVUKRloyYmEiS95zu2SYn7yc6Juc3l5joSJL37AMgK8vB4cPHiIgIc5dPY9CDLzPmpQepWTM2x3br12/FkeWkcZN6JdyK4hObvdCTLxSU6vsDlxpjXjTGfOieXgQuc687K2PMNGNMvDEmvmL7q70Zb54SUw9TKzyEGmHlCLQJvetVYdHWnF+pvt+aRqtqEQBUKhdAnYjy7Eg/YUl8Ja3+RXHs2bGPlN1pZGZmsez7P4lv3zhHmS3/7mTa2C8Y/PJ/CY8My16emZnFy4Pfo2OveNp0aZa76lLnwsZx7Nqxjz27XMfihwWraduxccEbAhc0juPI4eMcPOAa0/5z5UZq1Y0pyXC9rsnF9dm2bQ87d6aQkZHJtwnL6NwlPkeZzl3imT3bdRJx4YJfadW6CSJCevpR/u/eMTz62K1ccsmZw08J837mSj/u5QKurFbYyQcKunrBCVQDtuVaXtW9zm84DDz3cxLv9W6CXYSZ/yaz8cAxHo6vxd97D7No236W7DjA5TUqMf/GljgMvLh8MwdPZvk6dK+wB9jp/9h1jPrfNJxOQ+f/XEZc3Vg+nTafehfV4NL2TZjx+jecOHaS8cM/AKByTARDXu7P8kV/8c/qzRxOP8YPCa6v0g+MuJk6Dav7sknFZg+w89Dgaxn8wFs4nYZeV19K7XqxvPfGfC5oFEfbjo1Zv3Y7zzw2nSPpx1i+ZB3Tpy7k3S+ewG63ce8jV/H4vW8ChgYX1aD3dX56lj4PAQF2hj/Vn3v6j8LpdHLt9Z1p0CCO1179lMZN6tGly6Vc37cLg598jR7dHyQiPJRxEx4B4OOP5rN9ezJTpsxkypSZALz9zlNERbm+Kcz/djlTpw3zWdsKxU/Hmk8RY0zeK0V6Aq8DG4FTF73WBOoDDxpj5he0g/pTl+S9g/PMVzem+zoEvxEZrC+LU6qWL93DOd5kl6bnnDEbtp1a6BfXhl/uszxD59vTNcbMF5GGuIYTTnV7dgErjTGOkg5OKaWKzM/PARd4c4Qxxgn8akEsSil1zozNv4cXyswdaUopBbhuT/VjmnSVUmWLn59I06SrlCpb/DvnatJVSpUxOryglFIW0uEFpZSykN2/k66fX9GmlFJFJEWYCqpKpKeI/CsiSWd73oyI1BSRH0TkTxFJFJErC6pTk65SqkwxIoWe8iMidmAy0AtoBPQTkUa5io0APjfGtABuBqYUFJ8mXaVU2WKTwk/5uwxIMsZsNsZk4HriYp9cZQxQ0f13OLC7wPCK2ByllPJvRRhe8HwMrXvyfIBwdU4/cwZgJ6cfh3DKs8BtIrITSAAeKig8PZGmlCpbinD1gjFmGjDtHPbWD3jfGDNeRNoAM0SkifvxCWelSVcpVbZ47+qFXUCcx3wN9zJP/YGeAMaY5SJSDqgMpOZVqQ4vKKXKFpHCT/lbCTQQkToiEoTrRFnun8LZDlzh2q1cBJQD9uZXqfZ0lVJli5dujjDGZInIg8ACwA68a4xZKyIjgVXGmLnAY8BbIvIIrpNqd5n8HlKOJl2lVFnjxe/vxpgEXCfIPJc97fH3OqBIv1+kSVcpVbbobcBKKWUd4+e3AWvSVUqVLdrTVUopC/l3ztWkq5QqY/R5ukopZaHzfXgh6b7Ykt5FqRFS8w1fh+A3jm9/ztchqLLKv3Ou9nSVUmVMgH/faKtJVylVphjt6SqllIX0RJpSSlnofD+RppRSltKerlJKWci/z6Np0lVKlTF2/866mnSVUmVKQb/y62uadJVSZYt/d3Q16Sqlyhg9kaaUUhbS4QWllLKQPsRcKaWsY3R4QSmlLKRJVymlLKRjukopZSG9ZEwppSykPV2llLKQPsRcKaWso7cBK6WUlfy7o6tJVylVxmhPVymlLKTX6RbfkiW/M2rUWzidTm64oRsDB96QY31GRiZPPjmBtWs3ERERxsSJT1KjRgwAb745ky+++A6bzcaIEQNp3/6SfOu85ZbBHD16HIC0tEM0bdqAKVNGsGLFGu6//4Xsert1a8ODD/az6hB41dSX76XXFS3Ym5ZOfLcnfR2OV3j7NXLyZAa33jqEjIxMHA4HPXq0Y9CgWwEwxvDKKzOYP38ZNpuNfv16cccdV1veZk9Wvkc+/PAbpk+fy/bte1i+/EMiI8MBOHToCMOGTWL79mSCgwMZPfphGjasZeFRyEWTbvE4HA5GjpzKe+89T0xMFH37PkqXLq2oX79mdpmZMxdSsWIo3303jXnzljBu3Pu88spgkpK2M2/eEubNm0xKShp33/0UCxZMBcizzo8/fim73oceGs0VV7TOno+Pb8Sbbz5jXeNLyIyZPzF1+gLenni/r0PxipJ4jQQFBTJ9+igqVAghMzOLW24ZTIcOLWne/EK++moRe/bs49tv38Bms5GWdtB3jcf698gll1xEp06Xcscdw3LEMXXq51x0UV0mTx7Opk07GDlyKtOnj7L0WHgyfv7sBb8dck5M3EitWlWJi4slKCiQ3r07sGjRihxlFi9ewbXXXgFAjx7tWL78L4wxLFq0gt69OxAUFEhcXCy1alUlMXFjoeo8cuQYv/6aSNeurSlrlv22nv0Hj/g6DK8pideIiFChQggAWVlZZGVlIe4xwk8+SeCBB27GZnO9baKiIqxr7FlY/R5p1Khedi/Z06ZNO2jduikA9erFsWtXKvv2HSjh1udDpPCTD/ht0k1JSSM2tnL2fExMFCkpaWeUqVrVVSYgwE5YWAUOHEg/y7aVSUlJK1Sd33//K23aNCM0tHz2stWr/+Xqqx9iwIBn2Lhxm1fbqYqvJF4j4OpB9ukziLZtb6dt2xY0a3YBADt2JJOQsJTrrnuEAQOeYevW3SXdxHz56j2S24UX1mHhwl8ASEzcwO7dqSQn579NibJJ4SdfhFfcDUXk7nzWDRSRVSKyatq0z4q7C5/45puf6N27Q/Z848b1WLz4HebOfY3bb7+KBx7w3dcmZQ273c6cOa/y00/vkZi4gQ0bXB+0GRmZBAcH8dVXE7nxxh4MGzbJx5H6h4ED+3L48FH69BnEjBlfc9FFdbH78nfKpAiTD5zLkXkurxXGmGnGmHhjTPzAgTcVq/KYmCiSk/dlz6ekpBETE3VGmT17XGWyshwcPnyUSpUqnmXbfcTERBVY5/79h1izZiOdOl2avSw0tHz2182OHePJynKwf/+hYrVJeVdJvEY8VawYSqtWF7N06e/ZdXXr1gZwnVD999+tJdGsQvPFe+RsQkPLM2bM/5gz51XGjn2UAwfSiYuL9UYTi8VmK/zkk/jyWykiiXlMa4AzB3e86OKLG7B162527EgmIyOTefOW0KXLZTnKdOnSilmzFgGwYMEyWrduiojQpctlzJu3hIyMTHbsSGbr1t00bdqgwDoXLPiFTp0uJTg4KHvZ3r0HMMYArq9OTqeTSpUqlmTTVSGVxGtk//5DpKe7xr1PnDjJL7+spm7dGgB07dqaFSvWAPDbb39Tu3Y1C1t7Jl+8R84mPf0IGRmZgOvEXXx84xzDc1bzZtIVkZ4i8q+IJInIkDzK3Cgi60RkrYh8XFCdBV29EAP0AHKPigvwS8EhF19AgJ2nn76PAQOeweFwcv31XWnQoBaTJn1IkyYNuOKKVvTt240nnphAt24DCQ8PZeJE12VQDRrUolevy7nyyvux21312O12gLPWeUpCwhLuuadvjjgWLFjGJ58kYLfbKVcumAkTnsw+sVLaTH/tIdq3uYjKlcJIWvE6z0/4gumf/ejrsIqtJF4jqan7GTLkFRwOJ8Y46dnzcjp3diWdgQP78vjj45k+fQ7ly5dj1KhBvmy+5e+RDz6Yy9tvf8W+fQe4+upBdOzYklGjBrFp006GDJkICA0a1PT5cfHW+1NE7MBkoBuwE1gpInONMes8yjQAhgLtjDEHRCS6wHpP9eLy2Ok7wHvGmJ/Psu5jY8wtBYe+Ie8dnGdCapb+y8685fj2PEen1Hmt4TlnzPpTlxQ65yTd1yHP/YlIG+BZY0wP9/xQAGPMGI8yY4ENxpi3C7vPfDvYxpj+Z0u47nWFSLhKKWWtolwx5nnS3z0N9KiqOrDDY36ne5mnhkBDEVkmIr+KSM+C4vPbmyOUUqo4pAgnyIwx04Bp57C7AKAB0AmoASwRkYuNMQfz2sBvr9NVSqni8OK9EbuAOI/5Gu5lnnYCc40xmcaYLcAGXEk4T5p0lVJlit1W+KkAK4EGIlJHRIKAm4G5ucrMxtXLRUQq4xpu2JxfpTq8oJQqU7x1cZExJktEHgQWAHbgXWPMWhEZCawyxsx1r+suIusAB/CEMSbf2/E06SqlyhRvXtJpjEkAEnIte9rjbwM86p4KRZOuUqpMKcqJNF/QpKuUKlP8/d4lTbpKqTLFV89UKCxNukqpMsXPfzhCk65SqmzR4QWllLKQJl2llLKQ+Pn4giZdpVSZoj1dpZSykF69oJRSFvLz0QVNukqpskWHF5RSykJ6G7BSSllIe7pKKWUhf//hWE26SqkyRa9eUEopC/l5R7fkk65Bf4H9lOSkO30dgt+o1zKh4ELniaTfe/k6BL/hjXypl4wppZSFNOkqpZSFbOLf36416SqlypQA7ekqpZR1tKerlFIW0jFdpZSykJ9fpqtJVylVtmhPVymlLCQ6pquUUtbRqxeUUspCevWCUkpZSMd0lVLKQnr1glJKWUh7ukopZSEd01VKKQvp1QtKKWUh7ekqpZSF/H1M199P9CmlVJHYpPBTQUSkp4j8KyJJIjIkn3LXi4gRkfgC4ytac5RSyr/ZijDlR0TswGSgF9AI6Ccijc5SLgx4GFhR2PiUUqrMCLCZQk8FuAxIMsZsNsZkAJ8Cfc5S7nngJeBEYeLTpKuUKlOK0tMVkYEisspjGuhRVXVgh8f8TveybCJyCRBnjJlX2Pj0RJpSqkwpyok0Y8w0YFpx9iMiNmACcFdRtis1SXfpkt8ZNeptnE4HfW/ozsCBfXOsz8jIZPCTE1m7NomIiIpMmPgENWrEAPDmmzP58ovvsNnsDB9xD+3bXwJAevoRRox4nY0btiEijBo9iBYtLmT9+i0888wUjh07QfXq0Ywb9xihoeUtb3NRLf/5H8a/9BVOh5M+17XmzgHdcqz/Y1USE8fOImnDbl4YeydXdG+evW7QfW/wd+I2mrWow8TJ91ocufd1aFOLpx7viN1u47PZf/Pm+6tyrK8aG8a457oTFhqM3S68/Noyfly2lYAAG2Oe6krjC6Ox223MmvcPU99b6aNWFI233yObN+/k0Udezt5+x45kBg26hTvv6sM//2zm2WemcPJkJna7nWeevY+mTRta2t68ePHRjruAOI/5Gu5lp4QBTYAfRQQgFpgrIlcbY3K+4DyUiuEFh8PByJFv8tbbz/DNvMnM+2YJSUnbc5T5YuZ3VKwYysLvpnHnXVczftx0AJKStpMwbynfzJvM228/w8jnpuJwOAAYNeot2re/hG/nv8HsOZOoV68GACOGv8Zjj93J11+/RreurXnn7a+sbXAxOBxOxo6ayaQp9/LZnKEs+PYPNm9KzlEmtmolnn7+Frpf2fKM7W+7qwvPjb7NqnBLlM0mPDukM/8dNJsefT/gqh4XUL9OZI4yD/a/jHnfbeTqWz/m4aHf8tyQLgD06tqAoEA7V970IX1u+5h+111M9aoVfdGMIimJ90jdujWYPWcSs+dM4suvJhASEkzXbm0AePnl93nggX7MnjOJQQ/fwssvv291k/PkxasXVgINRKSOiAQBNwNzT600xhwyxlQ2xtQ2xtQGfgXyTbhQSpJuYuJGataqSlxcLEFBgVzZuz2LFuU8Ubho8Qquudb1xunRox3Ll/+FMYZFi1ZwZe/2BAUFUiMulpq1qpKYuJHDh4+yauVa+vZ19QaDggKpWDEUgK1bd3PppY0BaNuuOQsXLrewtcWzds02atSsQvW4ygQGBtC91yUs+WFNjjLVqkfR4ILq2OTMV9tlrS+gfIVgq8ItUc0ax7JtxyF27EonM8vJNws30LVTvRxljIHQCkEAhIUGk7r3iHsFhIQEYrcL5YIDyMx0cOToSaubUGQl8R7xtHx5InFxsVSvHg2AiHDk6DEADh8+SnR0zg81X/LW1QvGmCzgQWAB8A/wuTFmrYiMFJGrixtfgcMLInIhrsHjFcaYIx7Lexpj5hd3x0WRkpJG1djK2fOxMZX5K/HfHGVSU9KoWtVVJiDATlhYBQ4eOExKShrNm13gsW0UKSlplCsXRGRkOEOHTuLf9Vto3Lg+w4bfQ/ny5ajfoCaLFq2ga9fWzJ+/jD179lnRzHOyN/UQMbER2fPRMRGsTdzmu4B8KCa6AntSDmfPJ6ccplmT2BxlJk1bzvTJ13HHTc0oHxLIHf/n+jbz7aKNdO1Yl+UL7iGkXCCjxv/EoXT/T7ol8R7xlDBvCb3/0yF7ftiwAQzo/wxjX3oPp9PJJ5+OLYlmFUshrkooNGNMApCQa9nTeZTtVJg68032IjIImAM8BPwtIp6XS4zOZ7vsM4LTpn1WmDgsl5XlYN26TfTr14tZsycRElKOt6Z9AcDoUYP4+OMErrvuEY4ePU5gUKkZ+laFdFWPC/jy63VcfuU79B80h3HP90AEmjWOweE0tO35Np2uepf+t11CXHX/H14oSRkZmSxe/Bs9e7bLXvbJJ98yZOgAfvzpXYYOHcCI4a/5MMKcvHlzRInEV8D6e4CWxphrgE7AUyLysHtdniEbY6YZY+KNMfEDB950zkHGxESxJ/l0bzM5ZR8xMVE5ykTHRGX3SLOyHBw+fJSISmFn2TaNmJgoYmMrExNbmWbuT/gePduybt1mAOrWq8G7747kq68m0rt3B2rG5ewl+aMq0eGkJB/Mnk9NOUiVmHDfBeRDKalHqRoTlj0fGxNGyt6jOcrc0KcJCd9tAODPNXsIDgogMiKEq3peyJJftpKV5STtwHF+/2sPFzeKsTT+4iiJ98gpS5f8TqPG9ahcuVL2stmzFtO9u2t8t2evdiQmbiiRdhWHvQiTLxSUdG2nhhSMMVtxJd5eIjKBfJKut118cQO2bd3Nzh3JZGRkkjBvKV26tMpRpkuXy5g9azEACxYso3XrpogIXbq0ImHeUjIyMtm5I5ltW3fTtGkDqlSpRNXYymzevBOA5cv/ol4914nKtLSDADidTqa+8Tk339zTqqYWW6MmNdmxbS+7dqaRmZnFwm//oH2nJr4OyycS1yVTOy6CGtUqEhhg4z/dG7Lop005yuxJPkzby2oCUK92JYKD7aQdOM7u5MO0udT1OggpF0Dzi2PZtOWA5W0oqpJ4j5wyb95SevfukKOu6OhIfvvtbwB+/TWRWrWrlXALC88mptCTL4gxee9YRBYDjxpjVnssCwDeBW41xhT4YWH41yst++mnVYwe/TZOh5Prr+/Kff93I69O+ogmTerT5YpWnDyZwZNPTOCffzYTHh7GhIlPEOfuoU5943O+/PJ77HY7w4YNoENH19n7f/7ZzIjhr5OZmUlcXCyjxzxMeHgoH0yfy0cfu4Zxundrw6OP3YGc5eRTUaVnbDnnOvKzbMlaJoydhdPh5KprW/Pfgd158/UELmocR4fOF7Pu7208+fA7pB8+TlBQAFGVK/LZ7KEA3HPnJLZtSeH4sQzCw8szfGQ/2rS7qMRivaTN+hKrG6BTu9qMeKwjNrvwxZy1THl3Jf+7rzVr1qWyaMlm6teJZPSIrpQvH4gx8NKrS/n51+2UDwnkpWe7Ub9OFCLw5dx1vDXj9xKNNen3Xl6ppyTeI8eOnaBz5/58//00wsIqZO/r91XrGDX6LRxZDoKDg3j6mfto0qT+ObdBuOCc32gv/vVdoXPOkGbdLB9kKCjp1gCyjDHJZ1nXzhizrKAdeCvplgUlnXRLk5JOuqWJt5JuWeCNpDs2sfBJ98mm1ifdfM8QGWN25rOuwISrlFJWC/TzC2H1tLxSqkzRh5grpZSF/P0h5pp0lVJliq8uBSssTbpKqTJFe7pKKWWhQC/eBlwSNOkqpcoU7ekqpZSFNOkqpZSFNOkqpZSF7HqdrlJKWcfPb0jTpKuUKlsC/DzratJVSpUpOryglFIW0hNpSillIU26SillIU26SillIb0NWCmlLOTnFy9o0lVKlS06vKCUUhaya9JVSinr6M/1KKWUhc774YUs5/GS3kWpcTAj09ch+I0erzXzdQh+49k/dvg6BL/x3CUXnHMdAed70lVKKSuJJl2llLKOn+dcTbpKqbJFe7pKKWUhvTlCKaUsJHrJmFJKWee8v2RMKaWs5Oc51++HP5RSqkhsUvipICLSU0T+FZEkERlylvWPisg6EUkUkUUiUqvA+IrXLKWU8k9ShCnfekTswGSgF9AI6CcijXIV+xOIN8Y0Bb4AxhYUnyZdpVSZIlL4qQCXAUnGmM3GmAzgU6CPZwFjzA/GmGPu2V+BGgVVqklXKVWm2IowichAEVnlMQ30qKo64HmP9k73srz0B74tKD49kaaUKlOKcvWCMWYaMO1c9ykitwHxQMeCymrSVUqVKV68emEXEOcxX8O9LOf+RLoCw4GOxpiTBVWqSVcpVaZ48eaIlUADEamDK9neDNySc1/SAngT6GmMSS1MpTqmq5QqU7x19YIxJgt4EFgA/AN8boxZKyIjReRqd7GXgVBgpoisFpG5BcWnPV2lVJnizQfeGGMSgIRcy572+LtrUevUpKuUKlP0N9KUUspCfp5zNekqpcoWfZ6uUkpZyM9zriZdpVTZoo92VEopC/l5zi2dSffnpat5cfT7OJxOru/bhQH3XJNjfUZGJkMHT2bdus1ERIQxbsLDVK8ezZrEJJ59xnXHnzGG+x+4ga7dLgOg+xUPUqFCOWx2G3a7nc+/GGN1s87Zyl/W88a4OTgdTnpe04qb7+6SY33iH5uYOm4um5P2MGz0rXTo6voZ9NUrk5g64fTlhTu2pjJs9G2069zE0vi9KW3NWjZ8/DnG6aRah3bU7t3zrOVSV/3BmsnTuPTpoVSsU4u0tevYNHM2zqwsbAEB1L/xOiIbXWhx9N61Z/Va/vjgC4zTSd3O7WjUp3uO9UnfLWXjd0sQmxBQLphLB9xCeI2qOLMc/DbtIw5s3YFxOKjdvhWNrunho1YUnk1/OcK7HA4nLzz/Lm+9M5zYmChuunEonTvHU6/+6Yf7fPXFYiqGV+DbBa+SMG8ZE8Z9zPiJ/6N+gzg+mzmGgAA7e1MPcP21T9Kpc0sCAuwAvDv9aSpVquirpp0Th8PJ6y/O4sUpA6kcE85Dt0+iTcdG1Kobm10mOrYSjz93E1/M+CnHts0vrc/UTx4FIP3QMe6+ZgwtWze0NH5vMk4n/874hBaPP0xwZCVWjhxD5eZNCa1eLUe5rOMn2PHdYirWrZO9LCg0lGYP309wpQiO7NzF6vGvcvnEl6xugtc4nU5Wvfc5nYc9REhUBN8NH0v1lhcTXqNqdpla7eKp3609ALtWJfLnjC/pNPRBtq/4A2dWFr3GDifrZAYJjz9PzXbxhFaJ8lVzCsXfT6SVujvS1iQmUbNmDHFxMQQGBdDryrYsXrwyR5nFi1fRp4/ruRPde7Rmxa9/Y4whJCQ4O8GezMj0//+dIvh37XaqxUVRtUYUgYEBdOzenF9+XJujTGy1SOo2qIbk0+6lixKJb3sh5UKCSjrkEpO+eSsh0dGERFfBFhBAzGWXsu/PxDPKbZ41l1pX9sAWeLrvEVarJsGVIgCoUL0ajsxMnJmZVoXudfuTthIWW4XQmMrYAwKo2aYlu1blPBaB5UOy/846mZH9+hCErJMncTocODIysAcEEBhSztL4i8Nbd6SVlFLX001N3U9s7OlP2piYKNYkJuUsk7Kf2KquMgEBdkLDynPw4GEqVapI4l8beWr4VHbv2cuYFx/MTsIiMLD/KESEG27qyg03FvlGE5/al3qIKjER2fNVYiJY//e2Itfz44I/uf7WAh+U5NdOHDhAuchK2fPBkRGkb9qSo0z61u2c2H+Ays0uZtu3C89aT+qqPwirVRNbYGCJxluSjh84SPmo08ciJCqC/Ulbzyi3ceFPrJ+3GGdWFl1GPAxAXKsW7Po9kTn/N4ysjAxa3H49waEVrAq92Py9J1lg0hWRywBjjFnpfmp6T2C9+/a4UqdpswbM+WY8mzbtZPjQKbTv0Jzg4CA++GgkMTGRpKUd4p7+L1CnTjXiL839kPiyLW1vOluTkolvc4GvQylRxulk46czaTTgzjzLHNm1m00zZ9H88YctjMx3GnTvSIPuHdm6bCVrZ82n9f13kLZpK2IT+kwZTcbRYyx6bgKxTS4kNKayr8PNl79/gc33Q0FEngFeBd4QkTHA60AFYIiIDM9nu+wHA7897UuvBhwdHUlyclr2fEpKGtExlXKWiYkkeY+rTFaWgyOHjxEREZajTL16NShfvhwbN7qeURwTEwlAVFQ4V3S9jDVrNnk17pJWOTqcvSkHs+f3phwkqkp4kepY8t1ftO3chIBAu5ejs1a5SpU4sf9A9vzJ/QcJrnT6NeI4cZKju3bzx4sTWPb4MNI3beGvV6eQvsX1zeDE/gMkvjaVRvfcRfnoKpbH700hlSI4lnb6WBxPO0iIe/jkbGq1acmuVX8BsG3ZKmKbNcIWYKdceBiVG9Zl/+aif3uymmAr9OQLBe21L9AO6AA8AFxjjHke6AHclNdGxphpxph4Y0z8gIHXey1YgCYX12P7tmR27kwlMyOLbxN+oXPn+BxlOneOZ84c18mihQt+pVXrxogIO3emkpXlAGD3rr1s2byb6tWrcOzYCY4ePQ7AsWMn+GVZIg0axFGaXNAojl079rFnVxqZmVn8tHA1bTo2LlIdPyz4k849WpRQhNYJq1OLY6mpHN+7D2dWFim/raRyi6bZ6wPKh9DhtfG0GzeaduNGU7FeHZoNup+KdWqReewYf73yOvX7XktEg/o+bIV3RNarxeHkVI6k7sORlcX25b9TveXFOcoc3nP6iYS7/1xLaGw0ABUqVyJ17QYAsk6cJC1pKxWrxeLvRGyFnnyhoOGFLGOMAzgmIpuMMekAxpjjIuIs+fDOFBBgZ9iI/3LvgNE4nE6uva4T9RvE8fqrn9O4SV06d4nnur6dGTr4dXr1GER4eCgvj3d9Rfzj9/W889YcAgLt2EQY8XR/KlWqyI4dKTz80DgAHFlOrvxPOy5v39wXzSs2e4CdB5+8lmEPvoXTYejR51Jq14tl+hvzadgojjYdG/Pv2u089/h0Dqcf49el65jx5kLemvkEAMm797M35SBNW9b1cUvOnc1u54Jbb+LP8a+C00nV9m0JrV6NTbPmUrF2Laq0aJbntju//5FjKXvZMnceW+bOA6DF44MIqlg6r2qx2e20vOtGfhozGafTSd1ObQiPq8aamd8QWacm1eObsnHhTySvWY8twE5QhfK0/r/bAajfvQO/Tf2QhMefB6BOx9ZE1Mrv12r8hX+PL4gxeV/TJiIrgM7GmGMiYjPGON3Lw4EfjDGXFLSDTOdq/75ozkK7j+0ouNB54qXEUF+H4DeqlHP4OgS/8dwlXc85Yx7KmF/onBMe1NPyDF1QT7fDqZ+fOJVw3QKBvM9CKKWUz/h3TzffpJvX7/0YY/YB+0okIqWUOge+GqstrFJ3na5SSuXHV1clFJYmXaVUmSKleXhBKaVKH+3pKqWUZfJ7tog/0KSrlCpjNOkqpZRldExXKaUsJPj3s0M06SqlyhQd01VKKUtp0lVKKcvozRFKKWUp7ekqpZRl9NkLSillIR1eUEopS+nwglJKWUZvjlBKKQvpdbpKKWUpHdNVSinL6Ik0pZSykA4vKKWUpbSnq5RSlvH3qxfEmEL/RHypJiIDjTHTfB2HP9BjcZoei9P0WFjDv/vh3jXQ1wH4ET0Wp+mxOE2PhQXOp6SrlFI+p0lXKaUsdD4lXR2rOk2PxWl6LE7TY2GB8+ZEmlJK+YPzqaerlFI+p0lXKaUs5NdJV0SO5Jq/S0ReL2ZdnUTkG4+/23qse19E+p5btN4lIkZEPvSYDxCRvafacJbyP4pIvPvvOiKyUUR6iEiQiLwiIknuZXNEpEZh9+M+5ntFZLWIrBORezzKXuPe/sKSOAaFie8s5X1xHHqKyG8ist69/jMRqXm+HQv3ciMiXT22PfUa8av3ly/5ddItQZ2AtgUV8rGjQBMRCXHPdwN2FbSR+80zH3jMGLMAGA2EARcYYxoAs4Gv5PQN6oXZz2fGmOa4jttoEYlxL+8H/Oz+t6T49XEQkSbAa8CdxpgL3es/AmoXvakF8utj4V6+BrjZo1w/4K/CNvB8UGqTrohUEZEvRWSle2rnXn6ZiCwXkT9F5BcRuSDXdrWB+4BH3J/U7d2rOrjLbz71qSwiH4jINR7bfiQifSxpoEsC0Nv9dz/gkwLKVwUWAsONMXNFpDxwN/CIMcYBYIx5DzgJdCnqfowxqcAmoJaIhAKXA/3J+SYrCX57HIDBwGhjzD8e6+caY5YUvnlF4s/HAmApcJmIBLpfI/WB1YVu3XnA35NuiDsxrhaR1cBIj3WTgInGmEuB64G33cvXA+2NMS2Ap3F9qmczxmwFprq3bW6MWepeVRVXEvkP8KJ72TvAXQAiEo6rdzzPmw0swKfAzSJSDmgKrCig/HTgdWPMF+75+sB2Y0x6rnKrgMZF3Y+I1AXqAklAH2C+MWYDkCYiLQvfrCLz5+PQGPijCG05V/58LAAM8D3QA9drZG5hGnU+8feke9ydGJu7v8o87bGuK/C6OxnPBSq6P1nDgZki8jcwkZwvpPzMNsY4jTHrgBgAY8xPQAMRqYLr0/5LY0yWNxpWGMaYRFxfU/vh6nkU5HvgNndvxpv7ucl9nD8B7jXG7HeX/dS9/lNKcIjBz49DNhGJcncQNojI40XZtxdjzM0Xx+JTXN9+bqbgnvh5x9+Tbn5sQGuPpFzdGHMEeB74wRjTBLgKKFfI+k56/O35mKIPgNtwfSV71wtxF9VcYBy5XrwissD9Bn/bY/FYYCWuD50AXF/7aopIWK46WwJrC7Mft8/cx7iVMWaWiETi+ir6tohsBZ4AbvQYEywJfncc3MvWApcAGGPS3J2DaUBoURtYBP56LAAwxvwGXAxUdn8TUh5Kc9JdCDx0akZEmrv/DOf0oP9deWx7GNeJhMJ4H/gfgLsXbLV3geeMMWs8Fxpjerhf9ANylf8fkI5raOQYrq+XE0TEDiAidwDlgcWF2U8e+gIzjDG1jDG1jTFxwBagfQHbnQt/PA7gSmrDReQij2VF6lUWg78eC09DgGHF2K7MK81JdxAQLyKJIrIO18kxcL0JxojIn+T9vOCvgWtznUg7K2NMCvAP8J6X4i4SY8xOY8yrRShvgDtxjVGPBYYCJ4ANIrIRuAG41uS6FbGI++kHzMq17EtKdojBH48D7oT0MPCBiPwrIsuAi4CPC1tHUfnrsci17bfGmB+Ks21Zp7cBF8A9FrYGuMQYc8jX8SilSrfS3NMtce6LvP8BXtOEq5TyBu3pKqWUhbSnq5RSFtKkq5RSFtKkq5RSFtKkq5RSFtKkq5RSFvp/td2onV5PZtoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(yy_test, rf_predictions_labels, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "747ecce4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 111,   40,   29,    5],\n",
       "       [   4, 5276,   19,    1],\n",
       "       [   7,  108,  897,    8],\n",
       "       [   7,   34,   83,   75]])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm = confusion_matrix(yy_test, rf_predictions_labels)\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3f00ce44",
   "metadata": {},
   "outputs": [],
   "source": [
    "def training_testing_model(train_data, train_labels, test_data, model_in):\n",
    "    # Training the Random forest here\n",
    "    model_in.fit(train_data, train_labels)#training_inputs, training_outputs_labels)\n",
    "    pred = model_in.predict(test_data)\n",
    "    pred = [np.int(np.round(k)) for k in list(pred)]\n",
    "    # Now fix the predictions\n",
    "    indices = [i for i, x in enumerate(pred) if x >= 3]\n",
    "    for k in indices:\n",
    "        pred[k]=3\n",
    "        \n",
    "    indices = [i for i, x in enumerate(pred) if x <= 0]\n",
    "    for k in indices:\n",
    "        pred[k]=0\n",
    "\n",
    "    return pred\n",
    "\n",
    "def prepare_confusion_matrix(in_test, in_pred):\n",
    "    \n",
    "    \n",
    "    cm = confusion_matrix(in_test, in_pred)\n",
    "    print(cm)\n",
    "\n",
    "    th = cm[:,1].sum() # total healthy\n",
    "    fph= th-cm[1,1]\n",
    "    tg = cm[:,0].sum() # total IgG\n",
    "    fpg= tg-cm[0,0]\n",
    "    tm = cm[:,2].sum()\n",
    "    fpm= tm-cm[2,2]\n",
    "    ta = cm[:,3].sum()\n",
    "    fpa= ta-cm[3,3]\n",
    "    print('The proportion of false positives: Healthy = {:f}, IgG={:f}, IgA={:f}, IgM={:f}'.format(fph/th,fpg/tg,fpa/ta,fpm/tm))\n",
    "    return th,fph, tg, fpg, tm, fpm, ta, fpa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "02f30434",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import the class\n",
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "32c0e9eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelETR = ExtraTreesRegressor() # 10 minutes\n",
    "modelXGBM = XGBRegressor()  # 10 seconds\n",
    "modelHGBR = HistGradientBoostingRegressor() # 14 seconds\n",
    "modelRF = RandomForestRegressor() # 54 minutes!\n",
    "modelLGBM = LGBMRegressor() # 2 seconds\n",
    "modelBC   = BaggingClassifier()\n",
    "dtr1 = DecisionTreeRegressor(max_depth=2,\n",
    "                             random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5171eb39",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def search_grid(model_in, train_in, label_in):\n",
    "    \n",
    "    if model_in == LGBMRegressor():#model = DecisionTreeRegressor()\n",
    "        param_grid = {\n",
    "                'min_child_weight': [1, 5, 10],\n",
    "                #'gamma': [0.5, 1, 1.5, 2, 5],\n",
    "                'subsample': [0.6, 0.8, 1.0],\n",
    "                'colsample_bytree': [0.6, 0.8, 1.0],\n",
    "                'max_depth': [3, 4, 5]\n",
    "                },\n",
    "    elif model_in == DecisionTreeRegressor():\n",
    "        param_grid = {'max_depth': range(1, 11),\n",
    "                'min_samples_split': range(10, 60, 10)},\n",
    "        \n",
    "    gs = GridSearchCV(model_in,\n",
    "                      param_grid,\n",
    "                      cv=5,\n",
    "                      n_jobs=1,\n",
    "                      scoring='neg_mean_squared_error')\n",
    "\n",
    "    gs.fit(train_in, label_in)\n",
    "\n",
    "    print(gs.best_params_)\n",
    "    print(-gs.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "93e43301",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't set num_leaves and 2^max_depth > num_leaves\n",
      "{'colsample_bytree': 1.0, 'max_depth': 5, 'min_child_weight': 1, 'subsample': 0.6}\n",
      "0.12921708902031584\n"
     ]
    }
   ],
   "source": [
    "search_grid(LGBMRegressor(), XX_train, yy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "70c9ba43",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_model = LGBMRegressor(colsample_bytree=1.0, max_depth=5, min_child_weight=1, subsample=0.6)\n",
    "#DecisionTreeRegressor(max_depth=9,\n",
    "#                                  min_samples_split=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "4604d08e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The size of the training and testing data is 60345 and 6704 respectively\n",
      "For Model RF\n",
      "[[  46  108   31    0]\n",
      " [   1 5261   38    0]\n",
      " [   0  132  885    3]\n",
      " [   0   29  141   29]]\n",
      "The proportion of false positives: Healthy = 0.048644, IgG=0.021277, IgA=0.093750, IgM=0.191781\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.25      0.40       185\n",
      "           1       0.95      0.99      0.97      5300\n",
      "           2       0.81      0.87      0.84      1020\n",
      "           3       0.91      0.15      0.25       199\n",
      "\n",
      "    accuracy                           0.93      6704\n",
      "   macro avg       0.91      0.56      0.61      6704\n",
      "weighted avg       0.93      0.93      0.91      6704\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "labels = ['Healthy','M-KOMPA','M-KOMPG','M-KOMPM']\n",
    "modelnames = ['RF']#', \n",
    "#modelnames = ['XGBM', 'HGBR']\n",
    "print('The size of the training and testing data is {} and {} respectively'.format(len(yy_train),len(yy_test)))\n",
    "k=0\n",
    "for model_in in [RandomForestRegressor()]:#\n",
    "#for model_in in [XGBRegressor(), HistGradientBoostingRegressor()]:#xgb_classifier, rf_classifier]:\n",
    "    print('For Model {}'.format(modelnames[k]))\n",
    "    pred = training_testing_model(XX_train, yy_train, XX_test, model_in)\n",
    "\n",
    "    th,fph, tg, fpg, tm, fpm, ta, fpa = prepare_confusion_matrix(yy_test, pred)\n",
    "    evaluate(yy_test, pred, labels)\n",
    "    \n",
    "    k+=1\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "30b6068c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The size of the training and testing data is 60345 and 6704 respectively\n",
      "For Model LGBM\n",
      "[[  38  123   24    0]\n",
      " [   0 5277   23    0]\n",
      " [   1  238  778    3]\n",
      " [   0   51  132   16]]\n",
      "The proportion of false positives: Healthy = 0.072420, IgG=0.025641, IgA=0.157895, IgM=0.187043\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.21      0.34       185\n",
      "           1       0.93      1.00      0.96      5300\n",
      "           2       0.81      0.76      0.79      1020\n",
      "           3       0.84      0.08      0.15       199\n",
      "\n",
      "    accuracy                           0.91      6704\n",
      "   macro avg       0.89      0.51      0.56      6704\n",
      "weighted avg       0.91      0.91      0.89      6704\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "For Model ETR\n",
      "[[  53  111   21    0]\n",
      " [   2 5273   25    0]\n",
      " [   1  101  916    2]\n",
      " [   0   27  133   39]]\n",
      "The proportion of false positives: Healthy = 0.043360, IgG=0.053571, IgA=0.048780, IgM=0.163470\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.29      0.44       185\n",
      "           1       0.96      0.99      0.98      5300\n",
      "           2       0.84      0.90      0.87      1020\n",
      "           3       0.95      0.20      0.32       199\n",
      "\n",
      "    accuracy                           0.94      6704\n",
      "   macro avg       0.92      0.59      0.65      6704\n",
      "weighted avg       0.94      0.94      0.92      6704\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "labels = ['Healthy','M-KOMPA','M-KOMPG','M-KOMPM']\n",
    "modelnames = ['LGBM', 'ETR']#', \n",
    "#modelnames = ['XGBM', 'HGBR']\n",
    "print('The size of the training and testing data is {} and {} respectively'.format(len(yy_train),len(yy_test)))\n",
    "k=0\n",
    "for model_in in [LGBMRegressor(), ExtraTreesRegressor()]:#\n",
    "#for model_in in [XGBRegressor(), HistGradientBoostingRegressor()]:#xgb_classifier, rf_classifier]:\n",
    "    print('For Model {}'.format(modelnames[k]))\n",
    "    pred = training_testing_model(XX_train, yy_train, XX_test, model_in)\n",
    "\n",
    "    th,fph, tg, fpg, tm, fpm, ta, fpa = prepare_confusion_matrix(yy_test, pred)\n",
    "    evaluate(yy_test, pred, labels)\n",
    "    \n",
    "    k+=1\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "353ae19a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The size of the training and testing data is 60345 and 6704 respectively\n",
      "For Model XGBM\n",
      "[[  53  102   30    0]\n",
      " [   2 5275   22    1]\n",
      " [   0  211  781   28]\n",
      " [   1   43  107   48]]\n",
      "The proportion of false positives: Healthy = 0.063221, IgG=0.053571, IgA=0.376623, IgM=0.169149\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.29      0.44       185\n",
      "           1       0.94      1.00      0.97      5300\n",
      "           2       0.83      0.77      0.80      1020\n",
      "           3       0.62      0.24      0.35       199\n",
      "\n",
      "    accuracy                           0.92      6704\n",
      "   macro avg       0.83      0.57      0.64      6704\n",
      "weighted avg       0.91      0.92      0.91      6704\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "For Model HGBR\n",
      "[[  38  124   23    0]\n",
      " [   0 5280   20    0]\n",
      " [   0  245  770    5]\n",
      " [   1   44  138   16]]\n",
      "The proportion of false positives: Healthy = 0.072545, IgG=0.025641, IgA=0.238095, IgM=0.190326\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.21      0.34       185\n",
      "           1       0.93      1.00      0.96      5300\n",
      "           2       0.81      0.75      0.78      1020\n",
      "           3       0.76      0.08      0.15       199\n",
      "\n",
      "    accuracy                           0.91      6704\n",
      "   macro avg       0.87      0.51      0.56      6704\n",
      "weighted avg       0.91      0.91      0.89      6704\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "labels = ['Healthy','M-KOMPA','M-KOMPG','M-KOMPM']\n",
    "modelnames = ['LGBM', 'new_model']#', \n",
    "modelnames = ['XGBM', 'HGBR']\n",
    "print('The size of the training and testing data is {} and {} respectively'.format(len(yy_train),len(yy_test)))\n",
    "k=0\n",
    "#for model_in in [LGBMRegressor(), new_model]:#\n",
    "for model_in in [XGBRegressor(), HistGradientBoostingRegressor()]:#xgb_classifier, rf_classifier]:\n",
    "    print('For Model {}'.format(modelnames[k]))\n",
    "    pred = training_testing_model(XX_train, yy_train, XX_test, model_in)\n",
    "\n",
    "    th,fph, tg, fpg, tm, fpm, ta, fpa = prepare_confusion_matrix(yy_test, pred)\n",
    "    evaluate(yy_test, pred, labels)\n",
    "    \n",
    "    k+=1\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "e4da5546",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "404"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "334+118+61+564-(951-51-16-211)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "87cc1595",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  39,  121,   25,    0],\n",
       "       [   0, 5285,   15,    0],\n",
       "       [   0,  224,  788,    8],\n",
       "       [   1,   48,  128,   22]])"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(yy_test, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "460f99a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingClassifier()"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelBC.fit(X_train, y_train)#training_inputs, training_outputs_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "749a4787",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 1, 1, ..., 1, 0, 1])"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bc_predictions_labels = modelBC.predict(X_test)\n",
    "bc_predictions_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "b46b1702",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.87      0.86      2101\n",
      "           1       0.97      0.99      0.98     10487\n",
      "           2       0.66      0.35      0.46       461\n",
      "           3       0.77      0.54      0.64       362\n",
      "\n",
      "    accuracy                           0.94     13411\n",
      "   macro avg       0.81      0.69      0.73     13411\n",
      "weighted avg       0.93      0.94      0.93     13411\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(y_test, bc_predictions_labels, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf908f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "confusion_matrix(y_test, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eec54ca5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "002f1ad0",
   "metadata": {},
   "source": [
    "#### Decision Tree Regressor "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "643e13c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(max_depth=2, random_state=1)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create an object (model)\n",
    "dtr1 = DecisionTreeRegressor(max_depth=2,\n",
    "                             random_state=1)\n",
    "\n",
    "#Fit (train) the model\n",
    "dtr1.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4f8fa9e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 9, 'min_samples_split': 50}\n",
      "0.19994571397409436\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "model = DecisionTreeRegressor()\n",
    "\n",
    "gs = GridSearchCV(model,\n",
    "                  param_grid = {'max_depth': range(1, 11),\n",
    "                                'min_samples_split': range(10, 60, 10)},\n",
    "                  cv=5,\n",
    "                  n_jobs=1,\n",
    "                  scoring='neg_mean_squared_error')\n",
    "\n",
    "gs.fit(X_train, y_train)\n",
    "\n",
    "print(gs.best_params_)\n",
    "print(-gs.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "72cd2f5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(max_depth=9, min_samples_split=50)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sns.scatterplot(x=df['Longitude'],\n",
    "#                y=df['MedHouseVal'],\n",
    "#                label='data')\n",
    "\n",
    "new_model = DecisionTreeRegressor(max_depth=9,\n",
    "                                  min_samples_split=50)\n",
    "#or new_model = gs.best_estimator_\n",
    "new_model.fit(X_train, y_train)\n",
    "\n",
    "#plt.plot(df['Longitude'].sort_values(),       \n",
    "#         new_model.predict(df['Longitude'].sort_values().to_frame()),\n",
    "#         color='red', label='model',\n",
    "#         linewidth=2)\n",
    "\n",
    "#plt.legend()\n",
    "#plt.title('Best Fitting', pad=15, size=15)\n",
    "#plt.savefig('new_model.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "078ee7fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = new_model.predict(X_test)\n",
    "pred = [np.int(np.round(k)) for k in list(pred)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2c0e7bb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.50      0.12      0.19        34\n",
      "           1       0.88      0.99      0.93       766\n",
      "           2       0.82      0.56      0.67       157\n",
      "           3       0.07      0.03      0.04        33\n",
      "\n",
      "    accuracy                           0.86       990\n",
      "   macro avg       0.57      0.42      0.46       990\n",
      "weighted avg       0.83      0.86      0.84       990\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAAEICAYAAAD8yyfzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAA09UlEQVR4nO3dd3wU1drA8d+zu0kogTTIBklCMbHQBQRE6R1UUEDFcq++Kvfa9VpAUVRsiIr9esXeFfSCKEgRkHKlo4QqvQRIAqGTQLK75/1jl5AEyCaQzG7C8/UzH3dmzsw8Z9h99uyZMxMxxqCUUsoatkAHoJRS5xJNukopZSFNukopZSFNukopZSFNukopZSFNukopZSFNuiqPiFQWkZ9E5ICIjDuL/dwkItNKM7ZAEJFfROTvgY5DVSyadMshEblRRJaIyGER2eVLDleUwq4HAE4gxhgz8Ex3Yoz5yhjTvRTiKUBEOoqIEZHxhZY39S3/rZj7eUZEvvRXzhjTyxjz2RmGq9QpadItZ0TkX8AbwIt4E2Qi8G+gbynsvg6wzhjjKoV9lZXdwGUiEpNv2d+BdaV1APHSz4YqG8YYncrJBEQAh4GBRZQJw5uUd/qmN4Aw37qOQCrwMJAB7AJu8617FsgBcn3HuB14Bvgy377rAgZw+OZvBTYBh4DNwE35ls/Lt11bYDFwwPf/tvnW/QY8B/zPt59pQI3T1O14/P8B7vEtswM7gOHAb/nKvglsBw4CS4F2vuU9C9Vzeb44XvDFkQ0k+Zbd4Vv/HvBDvv2/DMwAJNDvC53K16Tf5uXLZUAlYHwRZYYBbYBmQFOgFfBkvvVxeJN3bbyJ9V0RiTLGPI239fydMSbcGPNRUYGISFXgLaCXMaYa3sT65ynKRQOTfGVjgNHApEIt1RuB24BYIBR4pKhjA58Df/O97gGsxPsFk99ivOcgGvgaGCcilYwxUwrVs2m+bW4BBgPVgK2F9vcw0FhEbhWRdnjP3d+NMXofvSoRTbrlSwywxxT98/8mYIQxJsMYsxtvC/aWfOtzfetzjTGT8bb2LjzDeDxAIxGpbIzZZYxZdYoyfYD1xpgvjDEuY8w3wFrgqnxlPjHGrDPGZANj8SbL0zLG/A5Ei8iFeJPv56co86UxJtN3zNfw/gLwV89PjTGrfNvkFtpfFt7zOBr4ErjPGJPqZ39KnUSTbvmSCdQQEUcRZc6jYCttq29Z3j4KJe0sILykgRhjjgDXA/8EdonIJBG5qBjxHI+pdr75tDOI5wvgXqATp2j5i8gjIrLGNxJjP97WfQ0/+9xe1EpjzEK83SmC98tBqRLTpFu+zAeOAf2KKLMT7wWx4xI5+ad3cR0BquSbj8u/0hgz1RjTDaiFt/X6QTHiOR7TjjOM6bgvgLuByb5WaB7fz//HgOuAKGNMJN7+ZDke+mn2WWRXgYjcg7fFvNO3f6VKTJNuOWKMOYD3gtG7ItJPRKqISIiI9BKRUb5i3wBPikhNEanhK+93eNRp/Am0F5FEEYkAHj++QkScItLX17d7DG83hecU+5gMXOAb5uYQkeuBBsDPZxgTAMaYzUAHvH3YhVUDXHhHOjhEZDhQPd/6dKBuSUYoiMgFwPPAzXi7GR4TkWZnFr06l2nSLWd8/ZP/wntxbDfen8T3AhN8RZ4HlgApwApgmW/ZmRxrOvCdb19LKZgobb44dgJ78SbAu06xj0zgSrwXojLxthCvNMbsOZOYCu17njHmVK34qcAUvMPItgJHKdh1cPzGj0wRWebvOL7unC+Bl40xy40x64EngC9EJOxs6qDOPaIXX5VSyjra0lVKKQtp0lVKKQtp0lVKKQtp0lVKKQsVNci+VOw79rNeqfO5ZIR+xx238plKgQ4haOR6svwXOkdEhV0p/ksVrXLioGLnnOxt35z18UqqzJOuUkpZKdgfEKdJVylVoUiQ95pq0lVKVSja0lVKKQtp0lVKKQuJ2AMdQpE06SqlKhRt6SqllIU06SqllIV09IJSSllIW7pKKWUhTbpKKWUhm45eUEop62hLVymlLKRJVymlLKRJVymlLKVJVymlLGOzBXdaC+7olFKqhPTmCKWUspD26SqllIVELP8LPCWiSVcpVaFoS1cppSykfbpKKWUhHb1QxubPW8vrL0/A4/Fw9bWt+dvtXQqs/2PJRl4f9SMb1+/iuZdvpnP3pgCsW7uDUc//wJEjR7HZbNx6Zxe69bwkEFUoNR2SazC8TwPsNuG7Jdt5b86mk8r0aRTHg12SMQbWpB3igbF/AjC0x4V0vjAWmwhzN+zh2UmrLY7+7P0+bxWvjhyL223o1/9ybrujR4H1OTm5DH/8M9as3kZEZFVGvnoH59WOITfXzXNPf8HaNdtxuzz0ubo1/3dnTwC++nwGE374HyKQlFybp5//G2FhIYGo3hk71z4j2tItQ263h1df/C9vjfkHsc4Ibhv0Bu06NqTe+XF5ZZy1onjq+Rv4+tPfCmxbqVIow18YRGKdmuzOOMCtN7xOm7YXUa16ZYtrUTpsAiOuasjNnywi7eBRJt51OdPXZLBh9+G8MnVjqnB3h/Pp//58Dh51EVM1FIDmiZG0rBNFz7fnAvD94MtoUy+aBZv3BqQuZ8Lt9jDy+W/59wf344yL4pbrR9KhUxPqn18rr8yE//5O9epV+PGXEUydvJi3Ro9n5Gt38Ou0peTmuBg7/imys3MY2PdZeva+FIfDzrdfzWLcj8OpVCmUIQ9/wNRflnB1v8sCWNOSOSc/I0Hepxvc0fmxeuU24hNjqB0fQ0iIg249L2HOrFUFypxXO5rkC85DbAWvaCbWrUlinZoA1IyNICo6nH37DlNeNYuPZOveLLbvyybXbfgpZRfdL3YWKHNDywQ+X7iVg0ddAGQeyfGuMBDmsBNitxHqsOGw29h9+JjVVTgrq1ZsISGxJvEJNQkJcdC9V0t+m7m8QJnZM5dzZd82AHTp3pxFC9dijEFEyM7OweVyc+xYDiEhDqqGVwLA7fJw7FguLpebo9k51KwZYXndzsa5+BkRsRV7CoRy3dLdnX6AWGdk3nysM4JVK7aVeD+rVmwjN9dNfEJMKUZnLWf1Suw8cDRvftfBbJolRBYoU79GVQC+H9wGuwhvzFzP7PV7WLZ9P/M3ZbJ4aBcQ+HzBVjbuPmJl+GctI2M/zriovHmnM4qVKzYXKLM7XxmHw054eGX27z9Cl27NmT1zOT06DeXo0RwefmwAERFVIQJuvrUrfboOI6xSCG3aXsxllzewtF5n61z8jJT7IWMichHQF6jtW7QDmGiMWVOWgVllz+6DPPvE1wx/fhA2W7lu+Ptlt9moV6MqN3y4kLiISoy9ow09355LVJVQkmLDaTNqJgBf3taKS+tEsXjrvgBHbI1VK7Zgs9uYMnMkhw4e4Y6/v0arNhdRvXoVZs9azk9TnyO8WhWGPPwBk39aSO+rWgc6ZEuVt89IsPfpFhmdiAwBvgUEWOSbBPhGRIYWsd1gEVkiIks+/XBKacZbQE1nBBnp+/PmM9IPUDO2+D//jhw+yr/u+ZB/3teLRk3rlEGE1kk/eJTzIirlzdeqXpn0AwW7CNIOHuXXNRm4PIbUfdlszjxC3Ziq9Gjg5I/t+8nKcZOV4+a3dbtpnhhV+BBBLTY2kvS0E18S6en7qBkbWaBMzXxlXC43hw9nExlZlSmTF9H28oaEhNiJjqlO02bns3rVNhYuWEvt2jWIiq5GSIidzl2asfzPky9OBrNz8TMiNnuxp0Dw95VwO3CpMWakMeZL3zQSaOVbd0rGmDHGmJbGmJa33tGzNOMt4OKGCWzfuoedqZnk5rqYPuUP2nVsWKxtc3NdDHnwE3pf1TLvam15tnzHAerGVCU+qjIhduGqJrWYvja9QJlpq9NoUy8agKgqIdSLqcq2vVnsPHCU1nWjsdsEh01oXS+6wAW48qBBozps35bBjtQ95Oa6mPbLEjp0alKgTIdOTfj5xwUAzJi2jEtbX4iIEFcrmsWL/gIgO+sYK1I2U6+ek7ha0axI2Ux2dg7GGBYtXEu9+nEnHTuYnZOfEVsJpgDw173gAc4DthZaXsu3LqAcDjuPPHEtD9w1Bo/bcGW/VtRPimPMu1O4qEE87Ts1YvXKbQx58FMOHcxm3uzVfPDeVL4Z/xi/Tl3OH8s2ceBAFpMmLgbgqedu4IKLavs5anByewzDf1rF57e2wi4wdlkq6zMO81CXZFbsOMCvazOYvX4P7ZJqMv2Bdrg98NKUtezPzmXyyl20rR/D1PvaYTDMXreHGWszAl2lEnE47Dz2xA3c+4+3cbs99L2mLecnncd77/xEg4aJdOjUlL7XXs5Tj39K317DiYiowouveNsN1w3qwDNPfsHAviMwxnB1v8tIvjAegC7dLuGm617EYbdx4UUJXDvwikBWs8TOyc9IkPfpijHm9CtFegLvAOuB7b7FiUAScK8xxm/fwb5jP5/+AOeYS0YEd1+TlVY+U8l/oXNEricr0CEEjaiwK886Y17Q9j/Fzjnrfv+n5Rm6yJauMWaKiFyAtzsh/4W0xcYYd1kHp5RSJRbkbRu/oxeMMR5ggQWxKKXUWTO24O5eKNfjdJVS6iSadJVSykJBfiFNk65SqmIJ7pyrSVcpVcFo94JSSlkoyLsXgnxwhVJKlZBdij/5ISI9ReQvEdlwqkcfiEiiiMwSkT9EJEVEevvbpyZdpVTFIiWYitqNiB14F+gFNAAGiUjhx8w9CYw1xlwC3AD82194mnSVUhWKESn25EcrYIMxZpMxJgfvw7/6Fj4cUN33OgLY6W+n2qerlKpYSnAhTUQGA4PzLRpjjBnje12bE48/AEgFCj/X8xlgmojcB1QFuvo7piZdpVTFUoLraL4EO8ZvwdMbBHxqjHlNRC4DvhCRRr47eU9Jk65SqmIpvdELO4CEfPPxvmX53Q70BDDGzBeRSkAN4LSP6dM+XaVUxVJ6oxcWA8kiUk9EQvFeKJtYqMw2oAuAiFwMVAJ2F7VTbekqpSqWUmrpGmNcInIvMBWwAx8bY1aJyAhgiTFmIvAw8IGIPIT3otqtpqjn5aJJVylV0ZTizRHGmMnA5ELLhud7vRq4vCT71KSrlKpYgrzTVJOuUqpiCfLbgDXpKqUqFFOM23sDSZOuUqpi0ZauUkpZKLhzriZdpVQFo8/TVUopC53r3QtRYReU9SHKjfQvng50CEGj6gvPBDqEoCHB/nu4vAny06ktXaVUxeII7oG6mnSVUhWK0ZauUkpZSC+kKaWUhc71C2lKKWUpbekqpZSFgvs6miZdpVQFYw/urKtJVylVoRTjr/wGlCZdpVTFEtwNXU26SqkKRi+kKaWUhbR7QSmlLKQPMVdKKesY7V5QSikLadJVSikLaZ+uUkpZSIeMKaWUhbSlq5RSFtKHmCullHX0NmCllLJScDd0NekqpSoYbekqpZSFgnycbpA3xM/enDlL6dHjn3TrNpgxY8YFOpwy1a1DU5bPeo2Vc17nkbuvPml9Yu0aTP5mGIumvszU756idlx03rrnHx/EkumjWDJ9FAOuamNl2Gdl7pyl9OxxF927DWbMmO9PWp+Tk8tDD46ie7fBXDfwEVJT0/PWvf/+OLp3G0zPHncxd+6yvOUHDx7m/vtH0qvnXfTudTd//LEWgLff/pr27W6lX98H6Nf3AWbPXlL2FSwBf+/1nJxcHnzwZbp1G8zAgQ+fdC66dRtMjx7/zDsXu3bt5pZbnqB377vp0+duPvtsYoH9ffHFT/Ts+U/69LmbUaM+KdvKlYRNij8FQIVu6brdbkaM+A+ffPIcTmcMAwb8i86dW5OUlBjo0EqdzSa88fxt9LnpRXbsymTeTy/w8/SlrF2/I6/MS0/exFc/zOWr7+fQoW1DRgy9gdsf/Dc9O19Cs0b1aN1zKGGhIUwb+xRTZy3n0OHsANbIP++/7/t8/MkInM4YBg54mM6dWxX49/1+3HSqVw9n2vQxTJo0h9de/YzX33iMDRu2MXnSXH6e9C4Z6Zncdttwpkx9D7vdzgsvfEC7ds15662h5OTkcvTosbz9/f3Wvtx++zWBqG6RivNeHzduGtWrhzPddy5effVT3nhjCBs2bGPSpDlMmvQu6emZ3HbbU0yd+h/sdjtDh/4fDRsmcfhwFv37P8TllzcjKSmRBQtSmDFjIRMnvk1oaAiZmfsDV/lCTJA/e6FCt3RTUtZTp04tEhLiCA0NoU+f9syYsTDQYZWJS5slsXFLGlu2ZZCb62bcT/O5snvLAmUuSo5n9v9WAjD791Vc2a0FABcn12bewjW43R6yso+xYs02undsankdSiolZT2J+f59e/dpd9K/74yZC+l3TWcAevS4nPnzl2OMYcaMhfTu047Q0BDiE+JIrFOLlJT1HDp0hCWLVzFgQDcAQkNDqF493PK6lVRx3uszZy7kmmu6ACefiz592hMaGkJCQhx1fOciNjaahg2TAAgPr0L9+gmkp2cC8M03kxk8eAChoSEAxMREWldZf0SKPwVAhU666emZxMXVyJt3OmPy3jQVzXlxUaTuPFG3Hbsyqe2MKlBmxeqt9O3VCoC+PS+lerUqREeGk7J6K907NqVypVBioqrRoW0D4mvFWBr/mUhPz6RWvn/fOGeNk/59M9IzqVXLW8bhsFOtWlX27zt0im29743U1HSioyN4/PE3uabfAzw57G2yso7mlfvqq0lcfdV9PPH4mxw4cLiMa1h8xXmvp5/iXOzbd/AU2558HlNT01mzZiNNm14IwJYtO1myZBUDBz7MzTcPJSVlXVlVreSCvHvhjJOuiNxWxLrBIrJERJaMGfPdmR5ClbLHX/iKdq0vZv7kl2jX5mJ27MrE7fEwY+4Kpsz8k1njn+Wzd+5j4dL1uD2eQIcbEC6Xm9WrNzJoUC/GT3iTypUr8YGvr3jQoF5Mn/4+E358k5qx0bw88qMAR2uNI0eyuf/+l3jiiTsJD68CeLszDhw4zNixr/LYY//Hgw++jDEmwJH6SAmmADiblu6zp1thjBljjGlpjGk5ePD1Z3GIs+N0xpCWtidvPj09E6cz+FtwZ2Jn2j7izztRt9q1YtiRvq9AmV3p+7jhH69zWe/HeXqU98vwwMEsAEa9M4E2vR7nypteRERYv2mXdcGfIaczhl35/n3T0vec9O8b64xh1y5vGZfLzaFDR4iMqnaKbb3vjbi4GjjjauS16Hr0bMvq1ZsAqFEjCrvdjs1mY+DA7qxYsb6sq1hsxXmvO09xLqKiqp9i2xPnMTfXxf33v8RVV3Wke/e2+fZVg27dLkNEaNLkAmw2G/v2HSzLKhabzVb8yR8R6Skif4nIBhEZepoy14nIahFZJSJf+43PzwFTTjOtAJz+Qw6sxo2T2bJlJ9u3p5GTk8ukSXPo3LlVoMMqE0uWbySpXhx1EmoSEmJn4FWXMWn60gJlYqKqIb5+rEfv6ctn3/0GeC/CRUd6+y0bXZRIo4sT+XVOiqXxn4nGjZPZumUnqb5/38mT5tK5c+sCZTp3bsWE8TMBmDr1f7Rp0wQRoXPn1kyeNJecnFxSt6exdctOmjRJpmbNKGrF1WDTplQA5s9fzvnnJwCQkbE3b7+//rqA5OQ6FtXUv+K81zt3bs348TOAwueiFZMmzSEnJ5ft29PY4jsXxhiGDXuL+vUTuO22fgX21bVrGxYu9L5HNm/eQW6ui6io6pbU1Z/SSroiYgfeBXoBDYBBItKgUJlk4HHgcmNMQ+BBf/H5G73gBHoA+wotF+B3fzsPNIfDzvDh/+SOO57G7fbQv3/XoPqglCa328NDT33KT188jt1u47PvfmPNulSe+tcAlq3YzKTpS2l/2cWMGHIDxsC8hWt48CnvMJ+QEAe//vA0AIcOZfN/D7yL2x383QsOh52nhv+D2+94Bk/ev28ib735FY0aJdG5S2sGDOjGY4+Opnu3wUREVGP0648CkJycSK9eV9Cn9z3Y7d73id1uB+DJpwbz6COjyc3NJSEhjhdfegCAV1/5lDVrNyNA7dpOnh1xd6CqfpLTvdfffPNLGjVKpovvXDz66Gi6dRtMREQ4r7/+GADJyXXo1esKeve+u8C5WLJkFT/+OIsLLqhL3773A/Cvf/2NDh1a0r9/V5544i2uvPIeQkIcjBz5YN4XeqCVYhytgA3GmE2+/X4L9AVW5ytzJ/CuMWYfgDEmw298RfXDiMhHwCfGmHmnWPe1MeZG/3GvC5KOnsCrnPh0oEMIGlnbngl0CEFDAtW5GJQuOOuTkfSfOcXOORvv6vAPYHC+RWOMMWMARGQA0NMYc4dv/hagtTHm3uOFRWQCsA64HLADzxhjphR1zCJbusaY24tYV4yEq5RS1ipJQ9eXYMecxeEcQDLQEYgH5ohIY2PM/tNtUKGHjCmlzj1iK/7kxw4gId98vG9ZfqnARGNMrjFmM95Wb3JRO9Wkq5SqUErx3ojFQLKI1BORUOAGYGKhMhPwtnIRkRrABcCmonZaoW8DVkqde+yl1JQ0xrhE5F5gKt7+2o+NMatEZASwxBgz0beuu4isBtzAo8aYIu/A0qSrlKpQSnMQhTFmMjC50LLh+V4b4F++qVg06SqlKpRgGbp2Opp0lVIVSjEukAWUJl2lVIUS5A1dTbpKqYqlOM9UCCRNukqpCiXI/1qPJl2lVMWi3QtKKWUhTbpKKWUhCfL+BU26SqkKRVu6SillIR29oJRSFgry3gVNukqpikW7F5RSykJ6G7BSSllIW7pKKWUhfcqYUkpZSEcvKKWUhYK8oVv2SddjXGV9iHLjkfGn/ePK55xmX2YEOoSgsWhQWKBDCBph9rPfhw4ZU0opC2nSVUopC9nEBDqEImnSVUpVKA5t6SqllHW0pauUUhbSPl2llLJQkA/T1aSrlKpYtKWrlFIWEu3TVUop6+joBaWUspCOXlBKKQtpn65SSllIRy8opZSFtKWrlFIW0j5dpZSykI5eUEopC2lLVymlLBTsfbrBfqFPKaVKxCbFn/wRkZ4i8peIbBCRoUWU6y8iRkRa+o2vZNVRSqngZivBVBQRsQPvAr2ABsAgEWlwinLVgAeAhcWNTymlKgyHzRR78qMVsMEYs8kYkwN8C/Q9RbnngJeBo8WJT5OuUqpCKUlLV0QGi8iSfNPgfLuqDWzPN5/qW5ZHRJoDCcaYScWNTy+kKaUqlJJcSDPGjAHGnMlxRMQGjAZuLcl25TLpzp27jBdf+AiPx8OAAV25c3D/AutzcnIZMuRNVq/aSGRkNUaPfoTa8bHs23eQBx94hZUrN9CvXyeeGn7iS+3OO0awe/c+XG43LVtczFPDB2O3l8Lfg7bQruWr+PPz7zEeD/U6Xc7FV3cvsH7Dr3PZOH0OYhMcYWG0uONGIuJr4XG5WfzBV+zfsh2P203ddq25uG+PANWidLStFcWQS+tjE2H8hjQ+XpVaYP3V9WN5qHl9MrKOAfDtup2M35AOQFyVMJ5pk4yzahjGwL2zVrLzyDHL63A25s1N4eWXvsDj9nDtgI7cfudVBdbn5OQybOj7rF61mYjIcF4ZfS+1a9dkx47d9LtyCHXr1gKgSdMknnrmNgDeemMcP02cx8EDR1i49EPL61Rcpfhoxx1AQr75eN+y46oBjYDfRAQgDpgoIlcbY5acbqflLum63W6eGzGGjz5+BqczhusGPkanzq1ISjpxbr7//lciqldl6rT3mDRpLq++9jmvv/4IYWGh3P/AINav38b6ddsK7Pf1Nx4hPLwKxhgeuH8UU6b8Tp8+7ayu3hnzeDws+2QsHR6/j8oxkfz65CjOa96YiPhaeWXqtG1JUldvnXYsTWH5lz/Qfui9bF+4DE+uix4vD8N1LIcpjz5HYtuWVK0ZE6jqnBWbwBOtzucfM1aSnnWMr3s147fUvWw6kFWg3LStu3lp8caTtn/+8gv4cMV2FqTtp7LDhgnuYZ8ncbs9vPj8Z4z5cAhOZzSDrh9Ox07NOT/pxC/j//4wm+rVqzJp6mv8Mnk+b7z2Ha+MvheA+IRYxo1/4aT9duh0CYNu6saVPR+xrC5nohSHjC0GkkWkHt5kewNw4/GVxpgDQI3j8yLyG/BIUQkXymGfbkrKehITa5GQEEdoaAi9e1/BzBmLCpSZOWMRfft1AqBHj7YsmJ+CMYYqVSrRokUDwkJDT9pveHgVAFwuN7m5LnzfXOXG3g1bCHfWJNxZA7vDQeJlLdi5NKVAmZAqlfNeu4/lgK+OIoLr2DE8bjfunBxsDgeOypUsjb80NYqpxvZDR9lx+Cguj2HKlt10jI8u1rb1I6rgEGFB2n4Asl0ejro9ZRht6Vu5YiOJiU7iE2IJCXXQs1cbZs1cWqDMbzOXcXW/KwDo1r0VCxeswvj5dmnaNImaNSPLKuxSU1qjF4wxLuBeYCqwBhhrjFklIiNE5Oozjc9vS1dELsLbebzQGHM43/KexpgpZ3rgM5WRvpe4WnlfLjjjYkhZvq5AmfSMTGr5yjgcdqpVq8L+/YeIiqpe5L7vuP1ZVqxYT7t2zenR47LSD74MZe/bT5WYqLz5ytGR7N2w5aRy66fNZt3kmXhcLjoOewCA+FaXsGNJCj/d/QSunBya3dyfsPCqVoVe6mKrhJGWdaI7ICMrh8Y1qp1UrktiDZrHRrD1YDavLN1IelYOdapV5lCOi9HtL6Z2eCUWpO3nzT824ylHrd309H044058yTjjolmRsrFQmb0447y/ZBwOO+HVqrB/v/fjvWPHbq679kmqhlfi3vsH0qLlhdYFXwqKMSqh2Iwxk4HJhZYNP03ZjsXZZ5HJXkTuB34E7gNWikj+4RIvFrFd3hXBMWPGFieOoPDhR08zZ+7H5OTksmDBikCHUyaSu3egzxvP0mRQP1ZP8H5n7t24BbEJV737In3eGMG6yTM4nL4nwJGWrdmpe+k1fhEDJy1jQdo+nm/rTSx2m3BJbASvLdvMjb/8QXx4JfrWdwY4WuvUrBnJtBlvMPa/z/PokJsY+ti/OXw4O9BhlUhp3hxRJvH5WX8n0MIY0w/oCDwlIg/41p02ZGPMGGNMS2NMy8GDryuVQI+LdUaTtutEQkhPy8TpLNj36IyNYZevjMvl5tChLCIjT27pnEpYWCidu7Q6qcsi2FWOiiQrc1/efPbe/VSOjjxt+cTLWrBzyXIAtv6+hLimDbA57FSKqEbMBfXZt3lrWYdcZjKyjhFXJSxvPrZKKOlZBS+EHchxketrvv53QxoXR4cDkJ51jL/2HWHH4aO4DczanslFvnXlhdMZRXra3rz59LS9xMZGFSoTTXpaJuD9jBw+lEVkZDihoSF5n5UGDeuRkBDL1i27rAu+FNhLMAWCv6RrO96lYIzZgjfx9hKR0RSRdMtS48bJbN26i9TUdHJycpk8eR6dOl9aoEynzpfy44RZAEyd+jtt2jQuso/2yJFsMjK8b1KXy83s2UupXz++7CpRBqLPr8PhtAwOZ+zB7XKxbf5SzmvRuECZQ7sy8l7v+mMV4XGxAFSJiSJjlbeLxnX0GHs3bKHaeXHWBV/KVmUeIrFaJWpXDcNhE3rWrcns1L0FytSoHJL3umN8DJt9F9lWZR6iWqidqDDv+lZxESddgAt2DRvVZ+vWNFJTM8jNcTHllwV07NS8QJmOnS5h4oR5AEyftohWrRsgIuzdexC3rw87dXsG27amEx8fa3kdzoZNTLGnQPDXp5suIs2MMX8CGGMOi8iVwMdA4yK3LCMOh50nn7qTO25/Fo/Hw7X9u5CcnMhbb31No0ZJdO7cigEDujLksTfo0f0uIiLCeW30w3nbd+k8mCNHssnNdTFjxiI+/OhpIiOrcc/dL5GTk4vHeGjdqjHX31C+hkzZ7Haa33odc0a+6x0y1vEyIuLPY+W4n4mqn0jtFk3YMG026SvXYnPYCalahVZ33QJAUvf2LP7Pl0x59DkA6rZvQ2Ri7aIOF9TcBl5avJH3ujTCJsKEjelsPJDF3U3qsGrvIWan7uXGC2vTMT4alzEcPObiqfneLx2PgdFLNzOma2MEWL33MD9sSAtshUrI4bDzxLC/cdedr+D2eOh3TXuSkuN59+0faNCwHp06N+ea/h14Ysh/6NPjYSIiwxn16j0ALF3yF/9++wccDjtiE558+lYiIr0t/dGvfsPkSfM5ejSHrp3u59r+Hbn73msDWdVTCvYH3khRVyxFJB5wGWNOeteJyOXGmP/5O4DHrC5HlyDK1tPLdgY6hKAxcU2Y/0LniEWD9FwcF2ZvddYpc1TK9GLnnMeadLM8RRfZ0jXGpBaxzm/CVUopq4UE+UDYcndzhFJKFUUfYq6UUhYK9j5dTbpKqQol2J+YoklXKVWhaEtXKaUsFFKKtwGXBU26SqkKRVu6SillIU26SillIU26SillIbuO01VKKesE+Q1pmnSVUhWLI8izriZdpVSFot0LSillIb2QppRSFtKkq5RSFtKkq5RSFtLbgJVSykJBPnhBk65SqmLR7gWllLKQXZOuUkpZR/9cj1JKWeic717I8Rwo60OUG/9NCQ10CEHjntbZgQ4haNileqBDqFAc53rSVUopK4kmXaWUsk6Q51xNukqpikVbukopZSG9OUIppSwkOmRMKaWsc84PGVNKKSsFec4N+u4PpZQqEZsUf/JHRHqKyF8iskFEhp5i/b9EZLWIpIjIDBGp4ze+M6uWUkoFJynBVOR+ROzAu0AvoAEwSEQaFCr2B9DSGNME+B4Y5S8+TbpKqQpFpPiTH62ADcaYTcaYHOBboG/+AsaYWcaYLN/sAiDe30416SqlKhRbCSYRGSwiS/JNg/PtqjawPd98qm/Z6dwO/OIvPr2QppSqUEoyesEYMwYYc7bHFJGbgZZAB39lNekqpSqUUhy9sANIyDcf71tW8HgiXYFhQAdjzDF/O9Wkq5SqUErx5ojFQLKI1MObbG8Abix4LLkEeB/oaYzJKM5OtU9XKVWhlNboBWOMC7gXmAqsAcYaY1aJyAgRudpX7BUgHBgnIn+KyER/8WlLVylVoZTmA2+MMZOByYWWDc/3umtJ96lJVylVoejfSFNKKQsFec7VpKuUqlj0ebpKKWWhIM+5mnSVUhWLPtpRKaUsFOQ5t3wm3f/NTeHll77G4/ZwzYD23H7nlQXW5+TkMmzoB6xZtYWIyHBGjb6L2rVrArDur+0898ynHD6cjc1m4+uxwwkLC+XtN77np4m/c/DAERYsfT8Q1TprV9SOYmjr87GL8MO6ND5csb3A+n5JTh6+tB4ZR3IA+HrNTn5YnwbAwy3r0T4+GhFh/s59vLRwo+Xxl6Yty1Yz+6MfMB4PDbtexqX9uxdYnzJlHim/zEFsNkIqhdHl7huISahF2rotzHjvW18pQ+vre5PUpqn1FShFc+f+ycgXP8Ht8dB/QBfuvLNfgfU5Obk8PuQdVq3eRGRkNV4b/SC1a8eSkrKBZ572fhaMgXvuGUjXbq0CUIOSselfjihdbreHF5//gvc/fBSnM5obr3+Wjp0u4fykE8+hGP/DHKpXr8LPU0fxy+QFvPHaOF4ZfTcul5snhrzPCyMHc+FFiezffxiHw3sKOnRqxg03deWqnkMCVbWzYhMY1iaJO6euID3rGN9ddQmztmWy8UBWgXJTNu/mhQUFE2qz2OpcEluda35cCsAXvZtxaVwEi9MOWBZ/afK4Pfw2ZhzXPHMP4TGRfPvYK9Rv1ZiYhFp5ZS5s34ImPa8AYNOiFcz9ZDz9ht9NTJ3zGPTqo9jsdo7sPcBXD42k/qWNsNntgarOWXG7Pbzw3Ed88NGTOJ0xXH/d43Tq1JKkpBMPw/rh+5lUj6jKlKlvM3nS/xj96le89vpDJCcnMHbcSBwOO7sz9nHtNY/SsVMLHI7gPhfBfiGt3N2RtnLFJhISncQnxBIS6qBnr9b8NvOPAmVmzfyDq/t5P1Ddul/KogWrMcYw/38rSb4ggQsvSgQgMjIcu917Cpo0TaJmzUhL61KaGteoxvZD2aQePkquxzB50246JcYUa1tjDKF2GyE2G6E2Gw6bkJmdU8YRl5309VuJqFWDiLga2EMcXHBFCzYtWlGgTFiVynmvc4+duF0+JCw0L8G6cnOD/xPsx4qUDSQkxpGQ4CQ01EHv3m2ZNXNxgTIzZy6hb9+OAHTv0YYFC1ZijKFy5bC8BHssJxcpJ+eitO5IKyvlrqWbkb6PuLjovPnYuChWpGw6bRmHw054tcrs33+YrVvTEIF/3vkq+/Yeomfv1tx2e29L4y8rziph7DpyInmkZx2jSc1qJ5XrVqcGLZwRbD2YzcuLNpF25BjLdx9iUdp+fru+DSLebodNB7KtDL9UHd67n2o1ovLmw2MiSVu35aRyyyfP4Y+Js3C7XFw74r685WnrtjD9na84tHsv3R/4W7lt5QKkZ+ylVtyJL1+nM4aUlPUFymSk7yWulreMw2GnWrUq7N9/iKio6qQsX8+Tw95j567djBx5X9C3ciH4W5J+k66ItAKMMWax76npPYG1vtvjyhW3y8Mfy9bz9dinqVQplMH/N4oGDerS+rLCD4OvmGZtz2TSpgxyPYaBF9bixXYX8n9TUkisVon6EVXoMnYBAB/0aEJzZ3WWpR8McMRlq2nv9jTt3Z61c5aweNxUuj9wCwBxF9TllreGsXd7GtPe+oK6zRvgCA0JcLSB0aRpMhN/Hs3Gjak88fi7tGvfjLCw0ECHVaRgb5AX+aUgIk8DbwHvichLwDtAVWCoiAwrYru8BwN/9MGE0oyXWGcUaWl78+Yz0vbhjI06bRmXy83hQ9lERoYTGxdFi5YXEhVVjcqVw7iifRPWrN5SqvEFSnrWMWpVDcubd1YJI/1IwS6CA8dc5Hq8Fxl+WLeLBjHhAHSpU4OU3YfIcnnIcnmYl7qXZjWrWxd8KQuPjuTQnn1584cz9xMeE3na8hde0ZyNi1JOWh6dEEdIpTAyt+0qizAt4YyNZldaZt58enomTmd0gTKxzmjSdnnLuFxuDh3KIjKy4K+k88+Pp0qVSqxfX/DibDASbMWeAsHfUQcAlwPtgXuAfsaY54AewPWn28gYM8YY09IY0/L2QldKz1bDRvXYtjWd1NTd5Oa4mPLLQjp0uqRAmY6dmjFxwjwApk9bTKvWFyMiXH55Y9avSyU7+xgul5uli/+iftJ5pRpfoKzcc4jE6pWpHV6JEJvQu35NZm3PLFCmRuUTLZROCTFs2u+9yLbryDFaxkVgF3CI0DIugk2FLsCVJ87kRPbv2s2B9D24c12sm7eU+pc2LlBm384TT+HbvHQVkbW8o1sOpO/B43YDcDBjL/t2pFM9tmCSKk8aNT6fbVt3kZqaQU6Oi8mTf6dTp5YFynTq1IIff/wNgGlTF9C6TUNEhNTUDFwu77nYuWM3mzftzBsFFMxEbMWeAsFf94LLGOMGskRkozHmIIAxJltEPGUf3skcDjuPD7uZu+58FY/HQ79r2pGUXJt33/4vDRvWo2PnS7imf3uGDRnDlT0eo3pkVUa9ehcA1SOqcsvfe3Djdc8iIrRr34T2HZoB8Pqr3zF50gKOHs2hW6eHuLZ/e+6695pAVPGMuA28sGADY7o3wibC+PVpbNyfxb2X1GHVnkPM2r6XmxucR6eEGNzGcOCYi2Hz/gJg2pbdtK4Vyfh+LQHDvNR9/LZ9b9EHDGI2u52Odw5kwrP/xngMDbq0ISaxFvO/noQzKZH6rRqTMnkO21L+wma3Uym8Ct3v93Yt7FyziSX/nY7NbkdsQqd/XEfl6uEBrtGZczjsDHvy/xh8xwt4PB6uubYTSckJvP3WdzRsdD6dO7ek/4DODB3yDj173EdERDivvvYgAMuWruXDDybgCLFjExtPDb+dqKjy8AsouPsXxJjTj2kTkYVAJ2NMlojYjDEe3/IIYJYxprm/Axx1zw/uQXMWavF5bqBDCBr3tD4a6BCCxuCLnIEOIWg4bE3POmMeyJlS7JwTEdrT8gztr6Xb/vifnziecH1CgL+XWVRKKXXGgrulW2TSPd3f+zHG7AH2lElESil1FgLVV1tc5W6crlJKFSVQoxKKS5OuUqpCkfLcvaCUUuWPtnSVUsoywf6MCE26SqkKRpOuUkpZRvt0lVLKQkJwPwlNk65SqkLRPl2llLKUJl2llLKM3hyhlFKW0pauUkpZRp+9oJRSFtLuBaWUspR2LyillGX05gillLKQjtNVSilLaZ+uUkpZJtgvpAV3dEopVUIiUuypGPvqKSJ/icgGERl6ivVhIvKdb/1CEanrb5+adJVSFYytBNPpiYgdeBfoBTQABolIg0LFbgf2GWOSgNeBl4sTnVJKVRhSgv/8aAVsMMZsMsbkAN8CfQuV6Qt85nv9PdBF/DShy7xPt5L9sqC4lCgig40xYwIZw6rbAnn0E4LhXAQLPRcnVJxzcUGxc46IDAYG51s0Jt85qA1sz7cuFWhdaBd5ZYwxLhE5AMRQxF9LP5dauoP9Fzln6Lk4Qc/FCefcuTDGjDHGtMw3lfmXzrmUdJVSqiR2AAn55uN9y05ZRkQcQASQWdRONekqpdSpLQaSRaSeiIQCNwATC5WZCPzd93oAMNMYY4ra6bk0TrcC9FWVGj0XJ+i5OEHPRT6+Ptp7gamAHfjYGLNKREYAS4wxE4GPgC9EZAOwF29iLpL4ScpKKaVKkXYvKKWUhTTpKqWUhYI66YrI4ULzt4rIO2e4r44i8nO+123zrftURAacXbSlS0SMiHyZb94hIruP1+EU5X8TkZa+1/VEZL2I9BCRUBF5w3eb4noR+VFE4ot7HN853y0if4rIahG5M1/Zfr7tLyqLc1Cc+E5RPhDnoaeILBKRtb7134lI4rl2LnzLjYh0zbft8fdIUH2+Aimok24Z6gi09VcowI4AjUSksm++GycPVzmJ78MzBXjYGDMVeBGoBlxojEkGJgD/zXfXTHGO850xphne8/aiiDh9ywcB83z/LytBfR5EpBHwNvB3Y8xFvvVfAXVLXlW/gvpc+JavoODFpEHA8uJW8FxQbpOuiNQUkR9EZLFvuty3vJWIzBeRP0TkdxG5sNB2dYF/Ag/5vqnb+Va195XfdPxbWUQ+F5F++bb9SkQK3wZYliYDfXyvBwHf+ClfC5gGDDPGTBSRKsBtwEPGGDeAMeYT4BjQuaTHMcZkABuBOiISDlyB995zv1dsz1LQngdgCPCiMWZNvvUTjTFzil+9EgnmcwEwF2glIiG+90gS8Gexa3cOCPakW9mXGP8UkT+BEfnWvQm8boy5FOgPfOhbvhZoZ4y5BBiO91s9jzFmC/Af37bNjDFzfatq4U0iVwIjfcs+Am4FEJEIvK3jSaVZQT++BW4QkUpAE2Chn/KfAe8YY773zScB24wxBwuVWwI0LOlxRKQ+UB/YgPee8ynGmHVApoi0KH61SiyYz0NDYFkJ6nK2gvlcABjgV6AH3vdI4XGt57xgT7rZvsTYzPdTZni+dV2Bd3zJeCJQ3ffNGgGME5GVeJ/605DimWCM8RhjVgNOAGPMbLyDo2vi/bb/wRjjKo2KFYcxJgXvz9RBeFse/vwK3OxrzZTmca73nedvgH8YY/b6yn7rW/8tZdjFEOTnIY+IxPgaCOtE5JGSHLsUYywsEOfiW7y/fm7Af0v8nBPsSbcoNqBNvqRc2xhzGHgOmGWMaQRcBVQq5v6O5Xud/4EZnwM34/1J9nEpxF1SE4FXKfTmFZGpvg/4h/kWj8J7F8048d6SuBFIFJFqhfbZAlhVnOP4fOc7x62NMeNFJBrvT9EPRWQL8ChwXb4+wbIQdOfBt2wV0BzAGJPpaxyMAcJLWsESCNZzAYAxZhHQGKjh+yWk8inPSXcacN/xGRFp5nsZwYlO/1tPs+0hvBcSiuNT4EEAXyvYah8DzxpjVuRfaIzp4XvT31Go/IPAQbxdI1l4f16OFu+zQRGRvwFVgJnFOc5pDAC+MMbUMcbUNcYkAJuBdn62OxvBeB7Am9SGicjF+ZaVqFV5BoL1XOQ3FHjiDLar8Mpz0r0faCkiKSKyGu/FMfB+CF4SkT84/W3OPwHXFLqQdkrGmHRgDfBJKcVdIsaYVGPMWyUob/DeC14L77l4HDgKrBOR9cBA4JrC94eX8DiDgPGFlv1A2XYxBON5wJeQHgA+F+9fGPgfcDHwdXH3UVLBei4KbfuLMWbWmWxb0eltwH74+sJWAM2NMQcCHY9Sqnwrzy3dMucb5L0GeFsTrlKqNGhLVymlLKQtXaWUspAmXaWUspAmXaWUspAmXaWUspAmXaWUstD/A2jJdEVcYdMdAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(y_test, pred, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b876158",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "c191bbf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HistGradientBoostingRegressor()"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training the Random forest here\n",
    "modelHGBR.fit(X_train, y_train)#training_inputs, training_outputs_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "89cd9e69",
   "metadata": {},
   "outputs": [],
   "source": [
    "hgbr_predictions_labels = modelHGBR.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "c37e774d",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = [np.int(np.round(k)) for k in list(hgbr_predictions_labels)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "2cbd2a54",
   "metadata": {},
   "outputs": [],
   "source": [
    "indices = [i for i, x in enumerate(pred) if x == 3]\n",
    "for k in indices:\n",
    "    pred[k]=3\n",
    "for k in indices:\n",
    "    if k>3.0:\n",
    "        pred[k]=4\n",
    "    else:\n",
    "        pred[k]=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "8aa4c989",
   "metadata": {},
   "outputs": [],
   "source": [
    "indices = [i for i, x in enumerate(pred) if x == 4]\n",
    "indices\n",
    "for k in indices:\n",
    "    pred[k]=3\n",
    "\n",
    "#for k in indices:\n",
    "#    print(hgbr_predictions_labels[k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "e7c5a4e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.58      0.73      2101\n",
      "           1       0.89      1.00      0.94     10487\n",
      "           2       0.32      0.20      0.24       461\n",
      "           3       0.91      0.19      0.32       362\n",
      "\n",
      "    accuracy                           0.88     13411\n",
      "   macro avg       0.77      0.49      0.56     13411\n",
      "weighted avg       0.88      0.88      0.86     13411\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(y_test, pred, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "3b7447f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1228,   841,    31,     1],\n",
       "       [   16, 10446,    23,     2],\n",
       "       [   30,   336,    91,     4],\n",
       "       [    1,   154,   138,    69]])"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "56f0b675",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ExtraTreesRegressor()"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelETR.fit(X_train, y_train)#training_inputs, training_outputs_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "04349c78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 0,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 4,\n",
       " 1,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 4,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " ...]"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "etr_predictions_labels = modelETR.predict(X_test)\n",
    "pred = [np.int(np.round(k)) for k in list(etr_predictions_labels)]\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "b98ef19d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.18      0.30       362\n",
      "           1       0.34      0.20      0.25       461\n",
      "           2       0.95      0.99      0.97     10487\n",
      "           4       0.89      0.89      0.89      2101\n",
      "\n",
      "    accuracy                           0.93     13411\n",
      "   macro avg       0.79      0.57      0.60     13411\n",
      "weighted avg       0.92      0.93      0.91     13411\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(y_test, pred, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56d8874c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "498fd0d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LGBMRegressor()"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelLGBM.fit(X_train, y_train)#training_inputs, training_outputs_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "2b27db0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbm_predictions_labels = modelLGBM.predict(X_test)\n",
    "pred = [np.int(np.round(k)) for k in list(lgbm_predictions_labels)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "804c2b53",
   "metadata": {},
   "outputs": [],
   "source": [
    "indices = [i for i, x in enumerate(pred) if x == 3]\n",
    "indices\n",
    "for k in indices:\n",
    "    if k>3.0:\n",
    "        pred[k]=4\n",
    "    else:\n",
    "        pred[k]=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "7a71d9fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "indices = [i for i, x in enumerate(pred) if x == 5]\n",
    "indices\n",
    "for k in indices:\n",
    "\n",
    "    pred[k]=4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "f862fa48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.14      0.25       362\n",
      "           1       0.33      0.16      0.21       461\n",
      "           2       0.93      0.99      0.96     10487\n",
      "           4       0.85      0.81      0.83      2101\n",
      "\n",
      "    accuracy                           0.91     13411\n",
      "   macro avg       0.76      0.52      0.56     13411\n",
      "weighted avg       0.90      0.91      0.89     13411\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate(y_test, pred, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21f10a67",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82cff1e5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a1f13493",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_predictions = rf_classifier.predict(X_test)#testing_inputs)#input_histdf.iloc[N:,:])#training_inputs)\n",
    "rf_predictions_labels = [np.argmax(p) for p in rf_predictions]\n",
    "y_hat = rf_predictions #_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ce6924f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = np.array(y_test)#testing_outputs_labels)#histdf.iloc[N:,:])\n",
    "#y = temp\n",
    "#y\n",
    "#temp = np.array(histdf.iloc[:N,:])\n",
    "#histdf_labels = [np.argmax(p) for p in temp]\n",
    "y = temp#histdf_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4e96bfa4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13060,    49,    15,     6],\n",
       "       [  285,  2299,    17,    31],\n",
       "       [   85,    82,   257,    24],\n",
       "       [   89,   235,    24,   207]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y,y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ed3d0fee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is for the \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.99      0.98     13130\n",
      "           1       0.86      0.87      0.87      2632\n",
      "           2       0.82      0.57      0.68       448\n",
      "           4       0.77      0.37      0.50       555\n",
      "\n",
      "    accuracy                           0.94     16765\n",
      "   macro avg       0.86      0.70      0.76     16765\n",
      "weighted avg       0.94      0.94      0.94     16765\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"This is for the \")\n",
    "print(classification_report(y,y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "2e2391ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelETR = ExtraTreesRegressor() # 10 minutes\n",
    "modelXGBM = XGBRegressor()  # 10 seconds\n",
    "modelHGBR = HistGradientBoostingRegressor() # 14 seconds\n",
    "modelRF = RandomForestRegressor() # 54 minutes!\n",
    "modelLGBM = LGBMRegressor() # 2 seconds\n",
    "modelBC   = BaggingClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "6453cafe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4min 34s, sys: 362 ms, total: 4min 35s\n",
      "Wall time: 6.41 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "HistGradientBoostingRegressor()"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "# Takes 6 seconds\n",
    "#modelLGBM = LGBMRegressor()\n",
    "modelHGBR.fit(X_train, y_train)#features_train, labels_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "dff7c605",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 49.2 s, sys: 383 ms, total: 49.5 s\n",
      "Wall time: 1.67 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LGBMRegressor()"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "# Takes 2 seconds\n",
    "#modelLGBM = LGBMRegressor()\n",
    "modelLGBM.fit(X_train, y_train)#features_train, labels_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "304d1870",
   "metadata": {},
   "outputs": [],
   "source": [
    "kf = KFold(n_splits =10,shuffle=True,random_state=160) # n_splits=10\n",
    "feats = pd.DataFrame({'features': X_train.columns})\n",
    "gbm_predictions = []\n",
    "cv_score_ = 0\n",
    "oof_preds = np.zeros((full_df.shape[0],))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "a94a4083",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3264</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34864</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33490</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18925</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8534</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43883</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11261</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25365</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48056</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59011</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50294 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Result\n",
       "3264        0\n",
       "34864       0\n",
       "33490       0\n",
       "18925       1\n",
       "8534        0\n",
       "...       ...\n",
       "43883       0\n",
       "11261       0\n",
       "25365       0\n",
       "48056       0\n",
       "59011       0\n",
       "\n",
       "[50294 rows x 1 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "af541c08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67045</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67046</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67047</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67048</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67049</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Result\n",
       "0           1\n",
       "1           2\n",
       "2           1\n",
       "3           1\n",
       "4           1\n",
       "...       ...\n",
       "67045       2\n",
       "67046       1\n",
       "67047       1\n",
       "67048       1\n",
       "67049       1\n",
       "\n",
       "[67050 rows x 1 columns]"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "92957bc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4504</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>141</td>\n",
       "      <td>102</td>\n",
       "      <td>66</td>\n",
       "      <td>47</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62378</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9014</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2714</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "      <td>19</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>41</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39069</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "      <td>19</td>\n",
       "      <td>25</td>\n",
       "      <td>27</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43883</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11261</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25365</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>19</td>\n",
       "      <td>23</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48056</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59011</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6705 rows × 300 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0    1    2    3    4    5    6    7    8    9    ...  290  291  292  \\\n",
       "4504     7    6    0    6    8   15   14   11   13   16  ...  141  102   66   \n",
       "62378    0    0    0    0    0    0    1    0    0    1  ...    1    1    1   \n",
       "9014     0    0    0    0    0    0    0    0    0    0  ...    1    2    2   \n",
       "2714     0    2    6   11   15   19   23   30   35   41  ...    0    2    5   \n",
       "39069    0    0    0    6    9   18   21   19   25   27  ...   17   13    1   \n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
       "43883    0    2    2    1    0    0    1    2    2    2  ...    4    3    4   \n",
       "11261    4    4    4    3    2    1    3    4    3    3  ...    3    3    3   \n",
       "25365    1    0    4    6    7   10   14   16   19   23  ...    3    0    1   \n",
       "48056    0    0    1    1    1    1    1    2    1    1  ...    5    6    5   \n",
       "59011    0    0    0    0    0    0    0    0    0    0  ...    0    0    1   \n",
       "\n",
       "       293  294  295  296  297  298  299  \n",
       "4504    47   30   25   12    2    3    0  \n",
       "62378    0    0    0    1    2    4    8  \n",
       "9014     2    2    2    3    3    4    6  \n",
       "2714     5    5    6    6    9   11   15  \n",
       "39069    1    1    2    2    0    5    5  \n",
       "...    ...  ...  ...  ...  ...  ...  ...  \n",
       "43883    4    5    7   10   13   15   18  \n",
       "11261    2    2    2    2    2    1    0  \n",
       "25365    1    2    2    5    3    4    4  \n",
       "48056    5    4    2    2    2    2    0  \n",
       "59011    2    2    2    3    3    3    4  \n",
       "\n",
       "[6705 rows x 300 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "d2cd26da",
   "metadata": {},
   "outputs": [],
   "source": [
    "XXX_train = XX_train.copy()\n",
    "yyy_train = yy_train.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "4fcb17ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "XX = X# XX_train\n",
    "yy = y# yy_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "b55edeab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "######### FOLD 1 / 10 \n",
      "60345 60345\n",
      "iter:  0 CV RMSE :  0.032720297819763364\n",
      "######### FOLD 2 / 10 \n",
      "60345 60345\n",
      "iter:  1 CV RMSE :  0.0674294255417747\n",
      "######### FOLD 3 / 10 \n",
      "60345 60345\n",
      "iter:  2 CV RMSE :  0.10211030899091293\n",
      "######### FOLD 4 / 10 \n",
      "60345 60345\n",
      "iter:  3 CV RMSE :  0.13531119602138497\n",
      "######### FOLD 5 / 10 \n",
      "60345 60345\n",
      "iter:  4 CV RMSE :  0.1685415980790332\n",
      "######### FOLD 6 / 10 \n",
      "60345 60345\n",
      "iter:  5 CV RMSE :  0.2034108833838144\n",
      "######### FOLD 7 / 10 \n",
      "60345 60345\n",
      "iter:  6 CV RMSE :  0.23595126019629864\n",
      "######### FOLD 8 / 10 \n",
      "60345 60345\n",
      "iter:  7 CV RMSE :  0.26841445769301053\n",
      "######### FOLD 9 / 10 \n",
      "60345 60345\n",
      "iter:  8 CV RMSE :  0.3030253602016222\n",
      "######### FOLD 10 / 10 \n",
      "60345 60345\n",
      "iter:  9 CV RMSE :  0.3363204726637504\n",
      "CV RMSE :  0.3363204726637504\n",
      "CPU times: user 11min 7s, sys: 927 ms, total: 11min 8s\n",
      "Wall time: 21 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "gbm_score = 0\n",
    "for i,(tr_index,test_index) in enumerate(kf.split(XX,yy)):\n",
    "  \n",
    "  #print(tr_index)\n",
    "  print(f'######### FOLD {i+1} / {kf.n_splits} ')\n",
    "  \n",
    "  XX_train,yy_train = XX.iloc[tr_index,:],yy.iloc[tr_index]\n",
    "  #tempX = XX.loc[XX.index.intersection(tr_index),:]  \n",
    "  #tempX = X.reindex[tr_index,:]\n",
    "  #tempy = yy.loc[yy.index.intersection(tr_index)] \n",
    "  #XX_train, yy_train = tempX, tempy\n",
    "  #tips_filtered = tips_df.reindex(columns = filtered_columns).\n",
    "\n",
    "  XX_test,yy_test = XX.iloc[test_index,:],yy.iloc[test_index]\n",
    "  #tempX = XX.loc[XX.index.intersection(test_index),:] \n",
    "  #tempy = yy.loc[yy.index.intersection(test_index)] \n",
    "  #XX_test, yy_test = tempX, tempy\n",
    "  \n",
    "  #gbm = xgb.ExtraTreesRegressor(eval_metric = 'rmse',n_estimators = 2000,learning_rate = 0.01,seed=162,random_state = 162,colsample_bytree=0.65)\n",
    "  #gbm = xgb.XGBRegressor(eval_metric = 'rmse',n_estimators = 2000,learning_rate = 0.01,seed=162,random_state = 162,colsample_bytree=0.65)\n",
    "  # WORKED gbm = lgb.LGBMClassifier(eval_metric = 'rmse',n_estimators = 2000,learning_rate = 0.01,seed=162,random_state = 162,colsample_bytree=0.65)\n",
    "\n",
    "  #gbm = xgb.LGBMRegressor(eval_metric = 'rmse',n_estimators = 2000,learning_rate = 0.01,seed=162,random_state = 162,colsample_bytree=0.65)\n",
    "  # WORKED with below fit gbm = ExtraTreesRegressor(n_estimators = 2000,random_state = 162)\n",
    "  # WORKED with above gbm.fit(X_train, y_train)\n",
    "  #gbm = #ExtraTreesClassifier(n_estimators=10, random_state=42)\n",
    "  #gbm=modelHGBR# parallel CV=0.17 2min for 10 folds\n",
    "  #gbm=modelXGBM# Parallel. CV = 0.35 2 min for 10 folds\n",
    "  gbm=modelLGBM# Parallel. CV = 0.52 0.5 min for 10 folds\n",
    "  #gbm=LGBMRegressor()\n",
    "  #gbm=modelETR# single thread. CV = 0.29 15 min for 2 folds\n",
    "  print(len(XX_train), len(yy_train))\n",
    "  gbm.fit(XX_train,yy_train)\n",
    "\n",
    "  #gbm.fit(X_train,y_train,eval_set = [(X_test, y_test)],early_stopping_rounds  = 200,verbose=100)\n",
    "  \n",
    "  #gbm.fit(X_train,y_train,eval_set = [(X_test, y_test)],early_stopping_rounds  = 200,verbose=100)\n",
    "  \n",
    "  gbm_score += gbm.score(XX_test, yy_test)/ kf.n_splits\n",
    "  cv_score_ += mean_squared_error(yy_test, gbm.predict(XX_test), squared=False) / kf.n_splits\n",
    "  #oof_preds[test_index] = gbm.predict(X_test)\n",
    "  \n",
    "  #preds = gbm.predict(nnfielddfNC[X_train.columns])\n",
    "  #gbm_predictions.append(preds)\n",
    "  print('iter: ',i,'CV RMSE : ', cv_score_)\n",
    "    \n",
    "  #feats[f'Fold {i}'] = gbm.feature_importances_\n",
    "#feats['Importances'] = feats.mean(axis=1)\n",
    "print('CV RMSE : ', cv_score_)\n",
    "#preds_xgb = np.average(gbm_predictions, axis=0)\n",
    "#print(preds_xgb.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "90c229ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " CV RMSE :  0.3363204726637504\n",
      "()\n",
      "CV Accuracy is : 0.5905875043414754\n"
     ]
    }
   ],
   "source": [
    "feats['Importances'] = feats.mean(axis=1)\n",
    "print( ' CV RMSE : ',cv_score_)\n",
    "preds_xgb = np.average(gbm_predictions, axis=0)\n",
    "print(preds_xgb.shape)\n",
    "print(\"CV Accuracy is :\", gbm_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "543f3be5",
   "metadata": {},
   "outputs": [],
   "source": [
    "predres = list(gbm.predict(X_test.iloc[:100,:]))\n",
    "trueres = list(y_test['Result'].iloc[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "9757eace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  0.,  0.,  1.,  2.,  0.,  0.,  0.,  1., -0.,  0.,  0.,  0.,\n",
       "        1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  1.,\n",
       "        3.,  0.,  0.,  0.])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(predres[:30])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "cc97a594",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61623    0\n",
       "57263    0\n",
       "41088    0\n",
       "16056    1\n",
       "15632    4\n",
       "38069    0\n",
       "48628    0\n",
       "40268    0\n",
       "66414    0\n",
       "35555    0\n",
       "41800    0\n",
       "47294    0\n",
       "20588    0\n",
       "38445    4\n",
       "8333     0\n",
       "6059     0\n",
       "63636    0\n",
       "37602    0\n",
       "23961    1\n",
       "45095    0\n",
       "61480    0\n",
       "60020    0\n",
       "35453    0\n",
       "2283     1\n",
       "25667    0\n",
       "11847    1\n",
       "24297    4\n",
       "57083    0\n",
       "34853    0\n",
       "47236    0\n",
       "Name: Result, dtype: int64"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trueres.iloc[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "b4cade95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correct:  14891 . Incorrect:  1874\n"
     ]
    }
   ],
   "source": [
    "#row = [[2.02220122, 0.31563495, 0.82797464, -0.30620401, 0.16003707, -1.44411381, 0.87616892, -0.50446586, 0.23009474, 0.76201118]]\n",
    "#k=17686\n",
    "sumcorrect=0\n",
    "sumincorrect=0\n",
    "eps=0.01\n",
    "N=len(y_test)\n",
    "predres = modelHGBR.predict(X_test.iloc[:N,:])\n",
    "trueres = y_test['Result'].iloc[:N]\n",
    "for k in range(N):#range(16797):\n",
    "    #row=X_test.iloc[k,:]\n",
    "    #trueres[k]#=y_test.iloc[k]\n",
    "    #predres=gbm.predict(row)\n",
    "    #print(\"true\", trueres, \"pred\", predres)\n",
    "    if abs(trueres.iloc[k]-np.round(predres[k]))<eps:\n",
    "        sumcorrect+=1 \n",
    "    else:\n",
    "        sumincorrect+=1\n",
    "print(\"Correct: \",sumcorrect,\". Incorrect: \",sumincorrect)\n",
    "print(\"missclassification rate = \", (sumincorrect)/sumcorrect)\n",
    "#print(y_train.iloc[k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "a9b0ef12",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=[]\n",
    "y_hat = []\n",
    "for k in trueres:\n",
    "    y.append(k)\n",
    "for k in predres:\n",
    "    y_hat.append(np.round(k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "16457c7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is for the \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.96      0.98      0.97     13130\n",
      "         1.0       0.80      0.66      0.72      2632\n",
      "         2.0       0.23      0.47      0.31       448\n",
      "         3.0       0.00      0.00      0.00         0\n",
      "         4.0       0.86      0.03      0.07       555\n",
      "\n",
      "    accuracy                           0.89     16765\n",
      "   macro avg       0.57      0.43      0.41     16765\n",
      "weighted avg       0.91      0.89      0.89     16765\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"This is for the \")\n",
    "print(classification_report(y, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "82f0a697",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12918,   191,    18,     3,     0],\n",
       "       [  412,  1742,   450,    26,     2],\n",
       "       [   60,   142,   212,    33,     1],\n",
       "       [    0,     0,     0,     0,     0],\n",
       "       [   63,   115,   230,   128,    19]])"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y,y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bed50d64",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelETR = ExtraTreesRegressor() # 10 minutes\n",
    "modelXGBM = XGBRegressor()  # 10 seconds\n",
    "modelHGBR = HistGradientBoostingRegressor() # 14 seconds\n",
    "modelRF = RandomForestRegressor() # 54 minutes!\n",
    "modelLGBM = LGBMRegressor() # 2 seconds\n",
    "modelBC   = BaggingClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8f14f9ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "model_lr = LogisticRegression().fit(XX_train, yy_train)#(X_train, y_train)\n",
    "probs_lr = model_lr.predict_proba(XX_test)#[:, 1]\n",
    "\n",
    "model_dt = DecisionTreeClassifier().fit(XX_train, yy_train)#(X_train, y_train)\n",
    "probs_dt = model_dt.predict_proba(XX_test)#[:, 1]\n",
    "\n",
    "#model_rf = RandomForestClassifier().fit(XX_train, yy_train)\n",
    "#probs_rf = model_rf.predict_proba(XX_test)#[:, 1]\n",
    "model_rf = model_dt\n",
    "probs_rf = probs_dt\n",
    "\n",
    "model_xg = XGBClassifier().fit(XX_train, yy_train)#(X_train, y_train)\n",
    "probs_xg = model_xg.predict_proba(XX_test)#[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "0469c5a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "conv_probs_lr = [np.where(probs_lr[k] == max(probs_lr[k]))[0][0] for k in range(len(XX_test))]\n",
    "conv_probs_dt = [np.where(probs_dt[k] == max(probs_dt[k]))[0][0] for k in range(len(XX_test))]\n",
    "conv_probs_rf = [np.where(probs_rf[k] == max(probs_rf[k]))[0][0] for k in range(len(XX_test))]\n",
    "conv_probs_xg = [np.where(probs_xg[k] == max(probs_xg[k]))[0][0] for k in range(len(XX_test))]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "d96f5499",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00304796 0.2217002  0.75052496 0.02472687] [0. 0. 1. 0.] 2 2\n",
      "[0.01677169 0.08112789 0.8861015  0.01599893] [0. 0. 1. 0.] 2 2\n",
      "[0.02162483 0.14859966 0.79802492 0.03175058] [0. 0. 1. 0.] 2 2\n",
      "[0.0084464  0.23859688 0.73011526 0.02284146] [0. 0. 1. 0.] 2 2\n",
      "[0.01419338 0.08289008 0.8935225  0.00939404] [0. 0. 1. 0.] 2 2\n",
      "[0.01411622 0.05212983 0.92584562 0.00790832] [0. 0. 1. 0.] 2 2\n",
      "[1.49493550e-04 5.01509347e-01 4.88503587e-01 9.83757307e-03] [0. 1. 0. 0.] 1 1\n",
      "[0.01097052 0.05443232 0.92834375 0.00625341] [0. 0. 1. 0.] 2 2\n",
      "[0.0019062  0.16452586 0.82198867 0.01157927] [0. 0. 1. 0.] 2 2\n",
      "[0.01271311 0.1612077  0.81021254 0.01586665] [0. 0. 1. 0.] 2 2\n",
      "[0.00093361 0.06105559 0.93138817 0.00662263] [0. 0. 1. 0.] 2 2\n",
      "[0.01040521 0.14713902 0.81843839 0.02401738] [0. 0. 1. 0.] 2 2\n",
      "[0.00509407 0.09668422 0.89258812 0.00563358] [0. 0. 1. 0.] 2 2\n",
      "[0.0159323 0.1278353 0.8346252 0.0216072] [0. 0. 1. 0.] 2 2\n",
      "[0.2586691  0.25328815 0.13000656 0.35803618] [0. 0. 0. 0.] 3 1\n",
      "[0.0060247  0.19811446 0.75498646 0.04087438] [0. 0. 1. 0.] 2 2\n",
      "[0.01708662 0.10675371 0.8493645  0.02679518] [0. 0. 1. 0.] 2 3\n",
      "[0.0260227  0.18645714 0.76014451 0.02737565] [0. 0. 1. 0.] 2 3\n",
      "[0.01379435 0.08565822 0.88302382 0.01752361] [0. 0. 1. 0.] 2 2\n",
      "[0.01267987 0.13445592 0.81848539 0.03437881] [0. 0. 1. 0.] 2 2\n"
     ]
    }
   ],
   "source": [
    "# converting to a single value instead of an array\n",
    "round_p_lr = np.round(probs_lr)\n",
    "#temp = model_dt.predict_proba(XX_test)\n",
    "for k in range(20):#len(XX_test)):\n",
    "    temp = np.where(probs_lr[k] == max(probs_lr[k]))[0][0]\n",
    "    #temp = np.where(round_p_lr[k]==1)[0]# for k in range(len(XX_test))]\n",
    "    \n",
    "    #print(probs_lr[k], round_p_lr[k], temp[0][0], list(yy_test)[k])\n",
    "    #model_dt.predict_proba(XX_test.iloc[k,:])#temp[k, :]\n",
    "    #print(temp[k])\n",
    "#    print(np.where(temp[k]==1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "df14fab0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1., 0., 0.])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "fc730036",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " ...]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conv_probs_lr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "61449b99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 0,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 0,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 2,\n",
       " 2,\n",
       " 2,\n",
       " ...]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y_test_int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "bf871d01",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "multiclass format is not supported",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[0;32mIn [138]\u001b[0m, in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m baseline_model \u001b[38;5;241m=\u001b[39m \u001b[38;5;28msum\u001b[39m(y_test_int \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m) \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mlen\u001b[39m(y_test_int)\n\u001b[1;32m      6\u001b[0m y_test_int \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(yy_test)\n\u001b[0;32m----> 7\u001b[0m precision_lr, recall_lr, _ \u001b[38;5;241m=\u001b[39m \u001b[43mprecision_recall_curve\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_test_int\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconv_probs_lr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      8\u001b[0m auc_lr \u001b[38;5;241m=\u001b[39m auc(recall_lr, precision_lr)\n\u001b[1;32m     10\u001b[0m precision_dt, recall_dt, _ \u001b[38;5;241m=\u001b[39m precision_recall_curve(y_test_int, conv_probs_dt)\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py:73\u001b[0m, in \u001b[0;36m_deprecate_positional_args.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPass \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m as keyword args. From version 0.25 \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     69\u001b[0m                   \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpassing these as positional arguments will \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     70\u001b[0m                   \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresult in an error\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(args_msg)),\n\u001b[1;32m     71\u001b[0m                   \u001b[38;5;167;01mFutureWarning\u001b[39;00m)\n\u001b[1;32m     72\u001b[0m kwargs\u001b[38;5;241m.\u001b[39mupdate({k: arg \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args)})\n\u001b[0;32m---> 73\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_ranking.py:675\u001b[0m, in \u001b[0;36mprecision_recall_curve\u001b[0;34m(y_true, probas_pred, pos_label, sample_weight)\u001b[0m\n\u001b[1;32m    600\u001b[0m \u001b[38;5;129m@_deprecate_positional_args\u001b[39m\n\u001b[1;32m    601\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mprecision_recall_curve\u001b[39m(y_true, probas_pred, \u001b[38;5;241m*\u001b[39m, pos_label\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    602\u001b[0m                            sample_weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    603\u001b[0m     \u001b[38;5;124;03m\"\"\"Compute precision-recall pairs for different probability thresholds\u001b[39;00m\n\u001b[1;32m    604\u001b[0m \n\u001b[1;32m    605\u001b[0m \u001b[38;5;124;03m    Note: this implementation is restricted to the binary classification task.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    673\u001b[0m \n\u001b[1;32m    674\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 675\u001b[0m     fps, tps, thresholds \u001b[38;5;241m=\u001b[39m \u001b[43m_binary_clf_curve\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mprobas_pred\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    676\u001b[0m \u001b[43m                                             \u001b[49m\u001b[43mpos_label\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpos_label\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    677\u001b[0m \u001b[43m                                             \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    679\u001b[0m     precision \u001b[38;5;241m=\u001b[39m tps \u001b[38;5;241m/\u001b[39m (tps \u001b[38;5;241m+\u001b[39m fps)\n\u001b[1;32m    680\u001b[0m     precision[np\u001b[38;5;241m.\u001b[39misnan(precision)] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_ranking.py:539\u001b[0m, in \u001b[0;36m_binary_clf_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight)\u001b[0m\n\u001b[1;32m    536\u001b[0m y_type \u001b[38;5;241m=\u001b[39m type_of_target(y_true)\n\u001b[1;32m    537\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (y_type \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbinary\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m\n\u001b[1;32m    538\u001b[0m         (y_type \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmulticlass\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m pos_label \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m)):\n\u001b[0;32m--> 539\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m format is not supported\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(y_type))\n\u001b[1;32m    541\u001b[0m check_consistent_length(y_true, y_score, sample_weight)\n\u001b[1;32m    542\u001b[0m y_true \u001b[38;5;241m=\u001b[39m column_or_1d(y_true)\n",
      "\u001b[0;31mValueError\u001b[0m: multiclass format is not supported"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import auc, precision_recall_curve\n",
    "\n",
    "y_test_int = yy_test#.replace({'Good': 1, 'Bad': 0})\n",
    "\n",
    "baseline_model = sum(y_test_int == 1) / len(y_test_int)\n",
    "y_test_int = list(yy_test)\n",
    "precision_lr, recall_lr, _ = precision_recall_curve(y_test_int, conv_probs_lr)\n",
    "auc_lr = auc(recall_lr, precision_lr)\n",
    "\n",
    "precision_dt, recall_dt, _ = precision_recall_curve(y_test_int, conv_probs_dt)\n",
    "auc_dt = auc(recall_dt, precision_dt)\n",
    "\n",
    "precision_rf, recall_rf, _ = precision_recall_curve(y_test_int, conv_probs_rf)\n",
    "auc_rf = auc(recall_rf, precision_rf)\n",
    "\n",
    "precision_xg, recall_xg, _ = precision_recall_curve(y_test_int, conv_probs_xg)\n",
    "auc_xg = auc(recall_xg, precision_xg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a2e32c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12, 7))\n",
    "plt.plot([0, 1], [baseline_model, baseline_model], linestyle='--', label='Baseline model')\n",
    "plt.plot(recall_lr, precision_lr, label=f'AUC (Logistic Regression) = {auc_lr:.2f}')\n",
    "plt.plot(recall_dt, precision_dt, label=f'AUC (Decision Tree) = {auc_dt:.2f}')\n",
    "plt.plot(recall_rf, precision_rf, label=f'AUC (Random Forests) = {auc_rf:.2f}')\n",
    "plt.plot(recall_xg, precision_xg, label=f'AUC (XGBoost) = {auc_xg:.2f}')\n",
    "plt.title('Precision-Recall Curve', size=20)\n",
    "plt.xlabel('Recall', size=14)\n",
    "plt.ylabel('Precision', size=14)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5e55061",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "3ee609ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# K-Fold Cross-Validation\n",
    "from sklearn.model_selection import cross_validate\n",
    "def cross_validation(model, _X, _y, _cv=5):\n",
    "      '''Function to perform 5 Folds Cross-Validation\n",
    "       Parameters\n",
    "       ----------\n",
    "      model: Python Class, default=None\n",
    "              This is the machine learning algorithm to be used for training.\n",
    "      _X: array\n",
    "           This is the matrix of features.\n",
    "      _y: array\n",
    "           This is the target variable.\n",
    "      _cv: int, default=5\n",
    "          Determines the number of folds for cross-validation.\n",
    "       Returns\n",
    "       -------\n",
    "       The function returns a dictionary containing the metrics 'accuracy', 'precision',\n",
    "       'recall', 'f1' for both training set and validation set.\n",
    "      '''\n",
    "      #_scoring = ['accuracy', 'precision', 'recall', 'f1']\n",
    "      _scoring = {'accuracy': 'accuracy',\n",
    "           'precision': make_scorer(precision_score, average='weighted'),\n",
    "           'recall': make_scorer(recall_score, average='weighted'),\n",
    "           'f1': make_scorer(f1_score, average='weighted'),\n",
    "           'log_loss': 'neg_log_loss'\n",
    "           }\n",
    "        \n",
    "      results = cross_validate(estimator=model,\n",
    "                               X=_X,\n",
    "                               y=_y,\n",
    "                               cv=_cv,\n",
    "                               scoring=_scoring,\n",
    "                               return_train_score=True)\n",
    "      \n",
    "      return {\"Training Accuracy scores\": results['train_accuracy'],\n",
    "              \"Mean Training Accuracy\": results['train_accuracy'].mean()*100,\n",
    "              \"Training Precision scores\": results['train_precision'],\n",
    "              \"Mean Training Precision\": results['train_precision'].mean(),\n",
    "              \"Training Recall scores\": results['train_recall'],\n",
    "              \"Mean Training Recall\": results['train_recall'].mean(),\n",
    "              \"Training F1 scores\": results['train_f1'],\n",
    "              \"Mean Training F1 Score\": results['train_f1'].mean(),\n",
    "              \"Validation Accuracy scores\": results['test_accuracy'],\n",
    "              \"Mean Validation Accuracy\": results['test_accuracy'].mean()*100,\n",
    "              \"Validation Precision scores\": results['test_precision'],\n",
    "              \"Mean Validation Precision\": results['test_precision'].mean(),\n",
    "              \"Validation Recall scores\": results['test_recall'],\n",
    "              \"Mean Validation Recall\": results['test_recall'].mean(),\n",
    "              \"Validation F1 scores\": results['test_f1'],\n",
    "              \"Mean Validation F1 Score\": results['test_f1'].mean()\n",
    "              }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "03c4aab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouped Bar Chart for both training and validation data\n",
    "def plot_result(x_label, y_label, plot_title, train_data, val_data):\n",
    "        '''Function to plot a grouped bar chart showing the training and validation\n",
    "          results of the ML model in each fold after applying K-fold cross-validation.\n",
    "         Parameters\n",
    "         ----------\n",
    "         x_label: str, \n",
    "            Name of the algorithm used for training e.g 'Decision Tree'\n",
    "          \n",
    "         y_label: str, \n",
    "            Name of metric being visualized e.g 'Accuracy'\n",
    "         plot_title: str, \n",
    "            This is the title of the plot e.g 'Accuracy Plot'\n",
    "         \n",
    "         train_result: list, array\n",
    "            This is the list containing either training precision, accuracy, or f1 score.\n",
    "        \n",
    "         val_result: list, array\n",
    "            This is the list containing either validation precision, accuracy, or f1 score.\n",
    "         Returns\n",
    "         -------\n",
    "         The function returns a Grouped Barchart showing the training and validation result\n",
    "         in each fold.\n",
    "        '''\n",
    "        \n",
    "        # Set size of plot\n",
    "        plt.figure(figsize=(12,6))\n",
    "        labels = [\"1st Fold\", \"2nd Fold\", \"3rd Fold\", \"4th Fold\", \"5th Fold\"]\n",
    "        X_axis = np.arange(len(labels))\n",
    "        ax = plt.gca()\n",
    "        plt.ylim(0.40000, 1)\n",
    "        plt.bar(X_axis-0.2, train_data, 0.4, color='blue', label='Training')\n",
    "        plt.bar(X_axis+0.2, val_data, 0.4, color='red', label='Validation')\n",
    "        plt.title(plot_title, fontsize=30)\n",
    "        plt.xticks(X_axis, labels)\n",
    "        plt.xlabel(x_label, fontsize=14)\n",
    "        plt.ylabel(y_label, fontsize=14)\n",
    "        plt.legend()\n",
    "        plt.grid(True)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7a815c34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        1\n",
       "1        0\n",
       "2        1\n",
       "3        1\n",
       "4        1\n",
       "        ..\n",
       "67054    0\n",
       "67055    1\n",
       "67056    1\n",
       "67057    1\n",
       "67058    1\n",
       "Name: Result, Length: 67059, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_main.iloc[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "22f18130",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix of features\n",
      "[[ 0  3  5 ... 72 69 54]\n",
      " [ 0  2  3 ...  4  6  9]\n",
      " [ 1  0  0 ...  6  9 13]\n",
      " ...\n",
      " [ 0  0  0 ...  0  1  1]\n",
      " [ 6  6  6 ...  0  0  1]\n",
      " [ 2  2  2 ...  3  3  4]]\n",
      "--------------------------------------------------\n",
      "Target Variable\n",
      "[1 0 1 ... 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "# Separate features and target variable\n",
    "X = df_main.iloc[:, 1:-1].values\n",
    "y = df_main. iloc [:, 0].values\n",
    "print(\"Matrix of features\", X, sep='\\n')\n",
    "print(\"--------------------------------------------------\")\n",
    "print(\"Target Variable\", y, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "a3e194b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mapping of Label Encoded Classes\n",
      "{0: 0, 1: 1, 2: 2, 3: 3}\n",
      "Label Encoded Target Variable\n",
      "[1 2 1 ... 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "# Label Encode the target variable\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "encoded_y = label_encoder.fit_transform(y)\n",
    "label_encoder_name_mapping = dict(zip(label_encoder.classes_,\n",
    "                                         label_encoder.transform(label_encoder.classes_)))\n",
    "print(\"Mapping of Label Encoded Classes\", label_encoder_name_mapping, sep=\"\\n\")\n",
    "print(\"Label Encoded Target Variable\", encoded_y, sep=\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "8d39b4cb",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'precision_score' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [159]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtree\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m DecisionTreeClassifier\n\u001b[1;32m      2\u001b[0m decision_tree_model \u001b[38;5;241m=\u001b[39m DecisionTreeClassifier(criterion\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mentropy\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m      3\u001b[0m                                      random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[0;32m----> 4\u001b[0m decision_tree_result \u001b[38;5;241m=\u001b[39m \u001b[43mcross_validation\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdecision_tree_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mencoded_y\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(decision_tree_result)\n",
      "Input \u001b[0;32mIn [156]\u001b[0m, in \u001b[0;36mcross_validation\u001b[0;34m(model, _X, _y, _cv)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;124;03m'''Function to perform 5 Folds Cross-Validation\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;124;03m Parameters\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;124;03m ----------\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;124;03m 'recall', 'f1' for both training set and validation set.\u001b[39;00m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;124;03m'''\u001b[39;00m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m#_scoring = ['accuracy', 'precision', 'recall', 'f1']\u001b[39;00m\n\u001b[1;32m     21\u001b[0m _scoring \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[0;32m---> 22\u001b[0m      \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprecision\u001b[39m\u001b[38;5;124m'\u001b[39m: make_scorer(\u001b[43mprecision_score\u001b[49m, average\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mweighted\u001b[39m\u001b[38;5;124m'\u001b[39m),\n\u001b[1;32m     23\u001b[0m      \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrecall\u001b[39m\u001b[38;5;124m'\u001b[39m: make_scorer(recall_score, average\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mweighted\u001b[39m\u001b[38;5;124m'\u001b[39m),\n\u001b[1;32m     24\u001b[0m      \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mf1\u001b[39m\u001b[38;5;124m'\u001b[39m: make_scorer(f1_score, average\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mweighted\u001b[39m\u001b[38;5;124m'\u001b[39m),\n\u001b[1;32m     25\u001b[0m      \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlog_loss\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mneg_log_loss\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m     26\u001b[0m      }\n\u001b[1;32m     28\u001b[0m results \u001b[38;5;241m=\u001b[39m cross_validate(estimator\u001b[38;5;241m=\u001b[39mmodel,\n\u001b[1;32m     29\u001b[0m                          X\u001b[38;5;241m=\u001b[39m_X,\n\u001b[1;32m     30\u001b[0m                          y\u001b[38;5;241m=\u001b[39m_y,\n\u001b[1;32m     31\u001b[0m                          cv\u001b[38;5;241m=\u001b[39m_cv,\n\u001b[1;32m     32\u001b[0m                          scoring\u001b[38;5;241m=\u001b[39m_scoring,\n\u001b[1;32m     33\u001b[0m                          return_train_score\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m     35\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTraining Accuracy scores\u001b[39m\u001b[38;5;124m\"\u001b[39m: results[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrain_accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m     36\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMean Training Accuracy\u001b[39m\u001b[38;5;124m\"\u001b[39m: results[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrain_accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mmean()\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m100\u001b[39m,\n\u001b[1;32m     37\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTraining Precision scores\u001b[39m\u001b[38;5;124m\"\u001b[39m: results[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrain_precision\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMean Validation F1 Score\u001b[39m\u001b[38;5;124m\"\u001b[39m: results[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtest_f1\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mmean()\n\u001b[1;32m     51\u001b[0m         }\n",
      "\u001b[0;31mNameError\u001b[0m: name 'precision_score' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "decision_tree_model = DecisionTreeClassifier(criterion=\"entropy\",\n",
    "                                     random_state=0)\n",
    "decision_tree_result = cross_validation(decision_tree_model, X, encoded_y, 5)\n",
    "print(decision_tree_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa698b1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Accuracy Result\n",
    "model_name = \"Decision Tree\"\n",
    "plot_result(model_name,\n",
    "            \"Accuracy\",\n",
    "            \"Accuracy scores in 5 Folds\",\n",
    "            decision_tree_result[\"Training Accuracy scores\"],\n",
    "            decision_tree_result[\"Validation Accuracy scores\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1042785e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Precision Result\n",
    "plot_result(model_name,\n",
    "            \"Precision\",\n",
    "            \"Precision scores in 5 Folds\",\n",
    "            decision_tree_result[\"Training Precision scores\"],\n",
    "            decision_tree_result[\"Validation Precision scores\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "d19e3a87",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'sklearn' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [168]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28msorted\u001b[39m(\u001b[43msklearn\u001b[49m\u001b[38;5;241m.\u001b[39mmetrics\u001b[38;5;241m.\u001b[39mSCORERS\u001b[38;5;241m.\u001b[39mkeys())\n",
      "\u001b[0;31mNameError\u001b[0m: name 'sklearn' is not defined"
     ]
    }
   ],
   "source": [
    "sorted(sklearn.metrics.SCORERS.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "56a36179",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.817 (0.004)\n"
     ]
    }
   ],
   "source": [
    "# evaluate a logistic regression model using k-fold cross-validation\n",
    "from numpy import mean\n",
    "from numpy import std\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "# create dataset\n",
    "#X, y = make_classification(n_samples=100, n_features=20, n_informative=15, n_redundant=5, random_state=1)\n",
    "# prepare the cross-validation procedure\n",
    "cv = KFold(n_splits=10, random_state=1, shuffle=True)\n",
    "# create model\n",
    "#model = modelLGBM#\n",
    "model = LogisticRegression()\n",
    "# evaluate model\n",
    "scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    "#scores = cross_val_score(model, X, y, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1)\n",
    "# report performance\n",
    "print('Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d411c877",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelETR = ExtraTreesRegressor() # 10 minutes\n",
    "modelXGBM = XGBRegressor()  # 10 seconds\n",
    "modelHGBR = HistGradientBoostingRegressor() # 14 seconds\n",
    "modelRF = RandomForestRegressor() # 54 minutes!\n",
    "modelLGBM = LGBMRegressor() # 2 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "320fe27a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_metrics(true, pred):\n",
    "    sumcorrect=0\n",
    "    sumincorrect=0\n",
    "    eps=0.5\n",
    "    N=len(true)#y_test)\n",
    "    #predres = modelHGBR.predict(X_test.iloc[:N,:])\n",
    "    #trueres = y_test['Result'].iloc[:N]\n",
    "    for k in range(N):#range(16797):\n",
    "        #row=X_test.iloc[k,:]\n",
    "        #trueres[k]#=y_test.iloc[k]\n",
    "        #predres=gbm.predict(row)\n",
    "        #print(\"true\", trueres, \"pred\", predres)\n",
    "        if abs(true[k]-pred[k])<eps:\n",
    "            sumcorrect+=1 \n",
    "        else:\n",
    "            sumincorrect+=1\n",
    "    #print(\"Correct: \",sumcorrect,\". Incorrect: \",sumincorrect)\n",
    "    #print(\"missclassification rate = \", (sumincorrect)/sumcorrect)\n",
    "    return [sumcorrect, sumincorrect]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "5eae6a73",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tqdm as tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cff0db93",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3d77da65",
   "metadata": {},
   "source": [
    "#### This k-fold worked! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d99e58b",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i,(tr_index,test_index) in enumerate(kf.split(XX,yy)):\n",
    "  \n",
    "  #print(tr_index)\n",
    "  print(f'######### FOLD {i+1} / {kf.n_splits} ')\n",
    "  \n",
    "  XX_train,yy_train = XX.iloc[tr_index,:],yy.iloc[tr_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "026da6af",
   "metadata": {},
   "outputs": [],
   "source": [
    "kf = KFold(n_splits=10, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "68cee151",
   "metadata": {},
   "outputs": [],
   "source": [
    "yy = yy[\"Result\"]\n",
    "yy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "021ae8e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "mse_scores = []\n",
    "corr=[]\n",
    "icorr = []\n",
    "for train_index, test_index in kf.split(XX,yy):\n",
    "    X_train, X_test = XX.iloc[train_index], XX.iloc[test_index]\n",
    "    y_train, y_test = yy.iloc[train_index], yy.iloc[test_index]\n",
    "    modelLGBM.fit(X_train, y_train)\n",
    "    y_pred = modelLGBM.predict(X_test)\n",
    "    mse_scores.append(mean_squared_error(y_test, y_pred))\n",
    "    #print(\"True\", y_test)\n",
    "    #print(\"Pred\", list(y_pred))\n",
    "    sumc, sumi = my_metrics(list(y_test), list(y_pred))\n",
    "    corr.append(sumc)\n",
    "    icorr.append(sumi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "772d1bb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.11222173540891622,\n",
       " 0.10956659780788189,\n",
       " 0.10993461894867407,\n",
       " 0.11418158451840045,\n",
       " 0.11723084029603024,\n",
       " 0.10961057767415608,\n",
       " 0.11659442250591553,\n",
       " 0.10759556887554153,\n",
       " 0.12942201560875055,\n",
       " 0.11293632156029397]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mse_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "239bec35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[612, 609, 581, 610, 590, 604, 622, 597, 646, 636]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icorr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd7e2772",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "5bdd5a6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "missclassification rate =  9.98959938501266\n",
      "Accuracy: 0.9089187173750932\n"
     ]
    }
   ],
   "source": [
    "missc = 0.0\n",
    "acc = 0.0\n",
    "for k in range(10):\n",
    "    missc += corr[k]/icorr[k]\n",
    "    acc += corr[k]/(corr[k]+icorr[k])\n",
    "print(\"missclassification rate = \", missc/len(corr))\n",
    "print(\"Accuracy:\",acc/10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "11c291ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean MSE: 0.11392942832045602\n",
      "[0.11222173540891622, 0.10956659780788189, 0.10993461894867407, 0.11418158451840045, 0.11723084029603024, 0.10961057767415608, 0.11659442250591553, 0.10759556887554153, 0.12942201560875055, 0.11293632156029397]\n"
     ]
    }
   ],
   "source": [
    "print(f\"Mean MSE: {np.mean(mse_scores)}\")\n",
    "print(mse_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "93290dac",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Classification metrics can't handle a mix of binary and continuous targets",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31m_RemoteTraceback\u001b[0m                          Traceback (most recent call last)",
      "\u001b[0;31m_RemoteTraceback\u001b[0m: \n\"\"\"\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.8/dist-packages/joblib/externals/loky/process_executor.py\", line 431, in _process_worker\n    r = call_item()\n  File \"/usr/local/lib/python3.8/dist-packages/joblib/externals/loky/process_executor.py\", line 285, in __call__\n    return self.fn(*self.args, **self.kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/joblib/_parallel_backends.py\", line 595, in __call__\n    return self.func(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/joblib/parallel.py\", line 262, in __call__\n    return [func(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/joblib/parallel.py\", line 262, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 560, in _fit_and_score\n    test_scores = _score(estimator, X_test, y_test, scorer)\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 607, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_scorer.py\", line 87, in __call__\n    score = scorer._score(cached_call, estimator,\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_scorer.py\", line 212, in _score\n    return self._sign * self._score_func(y_true, y_pred,\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\", line 73, in inner_f\n    return f(**kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py\", line 187, in accuracy_score\n    y_type, y_true, y_pred = _check_targets(y_true, y_pred)\n  File \"/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py\", line 90, in _check_targets\n    raise ValueError(\"Classification metrics can't handle a mix of {0} \"\nValueError: Classification metrics can't handle a mix of binary and continuous targets\n\"\"\"",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[0;32mIn [166]\u001b[0m, in \u001b[0;36m<cell line: 32>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     29\u001b[0m  \u001b[38;5;28;01mreturn\u001b[39;00m mean(scores), scores\u001b[38;5;241m.\u001b[39mmin(), scores\u001b[38;5;241m.\u001b[39mmax()\n\u001b[1;32m     31\u001b[0m \u001b[38;5;66;03m# calculate the ideal test condition\u001b[39;00m\n\u001b[0;32m---> 32\u001b[0m ideal, _, _ \u001b[38;5;241m=\u001b[39m \u001b[43mevaluate_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mLeaveOneOut\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mIdeal: \u001b[39m\u001b[38;5;132;01m%.3f\u001b[39;00m\u001b[38;5;124m'\u001b[39m \u001b[38;5;241m%\u001b[39m ideal)\n\u001b[1;32m     34\u001b[0m \u001b[38;5;66;03m# define folds to test\u001b[39;00m\n",
      "Input \u001b[0;32mIn [166]\u001b[0m, in \u001b[0;36mevaluate_model\u001b[0;34m(cv)\u001b[0m\n\u001b[1;32m     25\u001b[0m model \u001b[38;5;241m=\u001b[39m get_model()\n\u001b[1;32m     26\u001b[0m \u001b[38;5;66;03m# evaluate the model\u001b[39;00m\n\u001b[0;32m---> 27\u001b[0m scores \u001b[38;5;241m=\u001b[39m \u001b[43mcross_val_score\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscoring\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43maccuracy\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_jobs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     28\u001b[0m \u001b[38;5;66;03m# return scores\u001b[39;00m\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m mean(scores), scores\u001b[38;5;241m.\u001b[39mmin(), scores\u001b[38;5;241m.\u001b[39mmax()\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py:73\u001b[0m, in \u001b[0;36m_deprecate_positional_args.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPass \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m as keyword args. From version 0.25 \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     69\u001b[0m                   \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpassing these as positional arguments will \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     70\u001b[0m                   \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresult in an error\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(args_msg)),\n\u001b[1;32m     71\u001b[0m                   \u001b[38;5;167;01mFutureWarning\u001b[39;00m)\n\u001b[1;32m     72\u001b[0m kwargs\u001b[38;5;241m.\u001b[39mupdate({k: arg \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args)})\n\u001b[0;32m---> 73\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py:401\u001b[0m, in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    398\u001b[0m \u001b[38;5;66;03m# To ensure multimetric format is not supported\u001b[39;00m\n\u001b[1;32m    399\u001b[0m scorer \u001b[38;5;241m=\u001b[39m check_scoring(estimator, scoring\u001b[38;5;241m=\u001b[39mscoring)\n\u001b[0;32m--> 401\u001b[0m cv_results \u001b[38;5;241m=\u001b[39m \u001b[43mcross_validate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroups\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    402\u001b[0m \u001b[43m                            \u001b[49m\u001b[43mscoring\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mscore\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mscorer\u001b[49m\u001b[43m}\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcv\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    403\u001b[0m \u001b[43m                            \u001b[49m\u001b[43mn_jobs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_jobs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    404\u001b[0m \u001b[43m                            \u001b[49m\u001b[43mfit_params\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfit_params\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    405\u001b[0m \u001b[43m                            \u001b[49m\u001b[43mpre_dispatch\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpre_dispatch\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    406\u001b[0m \u001b[43m                            \u001b[49m\u001b[43merror_score\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merror_score\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    407\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m cv_results[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtest_score\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py:73\u001b[0m, in \u001b[0;36m_deprecate_positional_args.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPass \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m as keyword args. From version 0.25 \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     69\u001b[0m                   \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpassing these as positional arguments will \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     70\u001b[0m                   \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresult in an error\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(args_msg)),\n\u001b[1;32m     71\u001b[0m                   \u001b[38;5;167;01mFutureWarning\u001b[39;00m)\n\u001b[1;32m     72\u001b[0m kwargs\u001b[38;5;241m.\u001b[39mupdate({k: arg \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args)})\n\u001b[0;32m---> 73\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py:242\u001b[0m, in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    238\u001b[0m \u001b[38;5;66;03m# We clone the estimator to make sure that all the folds are\u001b[39;00m\n\u001b[1;32m    239\u001b[0m \u001b[38;5;66;03m# independent, and that it is pickle-able.\u001b[39;00m\n\u001b[1;32m    240\u001b[0m parallel \u001b[38;5;241m=\u001b[39m Parallel(n_jobs\u001b[38;5;241m=\u001b[39mn_jobs, verbose\u001b[38;5;241m=\u001b[39mverbose,\n\u001b[1;32m    241\u001b[0m                     pre_dispatch\u001b[38;5;241m=\u001b[39mpre_dispatch)\n\u001b[0;32m--> 242\u001b[0m scores \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    243\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    244\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscorers\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    245\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfit_params\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreturn_train_score\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreturn_train_score\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    246\u001b[0m \u001b[43m        \u001b[49m\u001b[43mreturn_times\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreturn_estimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreturn_estimator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    247\u001b[0m \u001b[43m        \u001b[49m\u001b[43merror_score\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merror_score\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    248\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    250\u001b[0m zipped_scores \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mzip\u001b[39m(\u001b[38;5;241m*\u001b[39mscores))\n\u001b[1;32m    251\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m return_train_score:\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/joblib/parallel.py:1054\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1051\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m   1053\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mretrieval_context():\n\u001b[0;32m-> 1054\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mretrieve\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1055\u001b[0m \u001b[38;5;66;03m# Make sure that we get a last message telling us we are done\u001b[39;00m\n\u001b[1;32m   1056\u001b[0m elapsed_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime() \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_start_time\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/joblib/parallel.py:933\u001b[0m, in \u001b[0;36mParallel.retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    931\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    932\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msupports_timeout\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[0;32m--> 933\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output\u001b[38;5;241m.\u001b[39mextend(\u001b[43mjob\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    934\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    935\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output\u001b[38;5;241m.\u001b[39mextend(job\u001b[38;5;241m.\u001b[39mget())\n",
      "File \u001b[0;32m/usr/local/lib/python3.8/dist-packages/joblib/_parallel_backends.py:542\u001b[0m, in \u001b[0;36mLokyBackend.wrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[38;5;124;03m\"\"\"Wrapper for Future.result to implement the same behaviour as\u001b[39;00m\n\u001b[1;32m    540\u001b[0m \u001b[38;5;124;03mAsyncResults.get from multiprocessing.\"\"\"\u001b[39;00m\n\u001b[1;32m    541\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 542\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfuture\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mresult\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    543\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m CfTimeoutError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    544\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTimeoutError\u001b[39;00m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n",
      "File \u001b[0;32m/usr/lib/python3.8/concurrent/futures/_base.py:444\u001b[0m, in \u001b[0;36mFuture.result\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    442\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m CancelledError()\n\u001b[1;32m    443\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state \u001b[38;5;241m==\u001b[39m FINISHED:\n\u001b[0;32m--> 444\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m__get_result\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    445\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    446\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTimeoutError\u001b[39;00m()\n",
      "File \u001b[0;32m/usr/lib/python3.8/concurrent/futures/_base.py:389\u001b[0m, in \u001b[0;36mFuture.__get_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception:\n\u001b[1;32m    388\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 389\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception\n\u001b[1;32m    390\u001b[0m     \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    391\u001b[0m         \u001b[38;5;66;03m# Break a reference cycle with the exception in self._exception\u001b[39;00m\n\u001b[1;32m    392\u001b[0m         \u001b[38;5;28mself\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of binary and continuous targets"
     ]
    }
   ],
   "source": [
    "\n",
    "# sensitivity analysis of k in k-fold cross-validation\n",
    "from numpy import mean\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import LeaveOneOut\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from matplotlib import pyplot\n",
    " \n",
    "# create the dataset\n",
    "def get_dataset(n_samples=100):\n",
    " X, y = make_classification(n_samples=n_samples, n_features=20, n_informative=15, n_redundant=5, random_state=1)\n",
    " return X, y\n",
    " \n",
    "# retrieve the model to be evaluate\n",
    "def get_model():\n",
    " model = modelLGBM#LogisticRegression()\n",
    " return model\n",
    " \n",
    "# evaluate the model using a given test condition\n",
    "def evaluate_model(cv):\n",
    " # get the dataset\n",
    " #X, y = get_dataset()\n",
    " # get the model\n",
    " model = get_model()\n",
    " # evaluate the model\n",
    " scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    " # return scores\n",
    " return mean(scores), scores.min(), scores.max()\n",
    " \n",
    "# calculate the ideal test condition\n",
    "ideal, _, _ = evaluate_model(LeaveOneOut())\n",
    "print('Ideal: %.3f' % ideal)\n",
    "# define folds to test\n",
    "folds = range(2,6)#31)\n",
    "# record mean and min/max of each set of results\n",
    "means, mins, maxs = list(),list(),list()\n",
    "# evaluate each k value\n",
    "for k in folds:\n",
    " # define the test condition\n",
    " cv = KFold(n_splits=k, shuffle=True, random_state=1)\n",
    " # evaluate k value\n",
    " k_mean, k_min, k_max = evaluate_model(cv)\n",
    " # report performance\n",
    " print('> folds=%d, accuracy=%.3f (%.3f,%.3f)' % (k, k_mean, k_min, k_max))\n",
    " # store mean accuracy\n",
    " means.append(k_mean)\n",
    " # store min and max relative to the mean\n",
    " mins.append(k_mean - k_min)\n",
    " maxs.append(k_max - k_mean)\n",
    "# line plot of k mean values with min/max error bars\n",
    "pyplot.errorbar(folds, means, yerr=[mins, maxs], fmt='o')\n",
    "# plot the ideal case in a separate color\n",
    "pyplot.plot(folds, [ideal for _ in range(len(folds))], color='r')\n",
    "# show the plot\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0c288be7",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'new_full_df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [20]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# \u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m# saving\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#pd.save_pickle('new_full_df',new_full_df)#'full_df_saved27Aug2023')\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m \u001b[43mnew_full_df\u001b[49m\u001b[38;5;241m.\u001b[39mto_pickle(\u001b[38;5;28mopen\u001b[39m( \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnew_full_df_Sept52023\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "\u001b[0;31mNameError\u001b[0m: name 'new_full_df' is not defined"
     ]
    }
   ],
   "source": [
    "# \n",
    "# saving\n",
    "#pd.save_pickle('new_full_df',new_full_df)#'full_df_saved27Aug2023')\n",
    "new_full_df.to_pickle(\"new_full_df_Sept52023\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9a571cf",
   "metadata": {},
   "source": [
    "## Reading the Sept 5 Dataset and running k-fold (later down) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cea77215",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Healthy</th>\n",
       "      <th>M-KOMPA</th>\n",
       "      <th>M-KOMPG</th>\n",
       "      <th>M-KOMPM</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67183</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67184</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67185</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67186</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67187</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 304 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Healthy  M-KOMPA  M-KOMPG  M-KOMPM  0  1  2  3   4   5  ...  290  291  \\\n",
       "0            1        0        0        0  0  3  5  9   6   9  ...   17   23   \n",
       "1            0        0        1        0  0  2  3  6  10  15  ...    1    1   \n",
       "2            1        0        0        0  1  0  0  2   1   3  ...    1    2   \n",
       "3            1        0        0        0  0  2  3  6  10  15  ...    1    1   \n",
       "4            1        0        0        0  0  2  4  3   6   7  ...    4    4   \n",
       "...        ...      ...      ...      ... .. .. .. ..  ..  ..  ...  ...  ...   \n",
       "67183        0        0        1        0  0  0  0  1   2   2  ...    0    0   \n",
       "67184        1        0        0        0  0  0  0  0   0   0  ...    1    1   \n",
       "67185        1        0        0        0  0  0  0  1   1   1  ...    0    0   \n",
       "67186        1        0        0        0  6  6  6  6   6   6  ...    4    1   \n",
       "67187        1        0        0        0  2  2  2  3   3   3  ...    0    1   \n",
       "\n",
       "       292  293  294  295  296  297  298  299  \n",
       "0       25   34   43   57   72   69   54   45  \n",
       "1        2    3    3    3    4    6    9   14  \n",
       "2        2    2    2    3    6    9   13   17  \n",
       "3        2    3    3    3    4    6    9   14  \n",
       "4        6    8   14   16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  \n",
       "67183    1    2    3    3    4    5    7    7  \n",
       "67184    1    1    1    1    1    1    1    3  \n",
       "67185    0    0    0    0    0    1    1    2  \n",
       "67186    0    0    0    0    0    0    1    1  \n",
       "67187    2    2    3    3    3    3    4    6  \n",
       "\n",
       "[67050 rows x 304 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_full_df = pd.read_pickle(\"new_full_df_Sept52023\")\n",
    "new_full_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b3a6bb79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Result</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>...</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>57</td>\n",
       "      <td>72</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>28</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>28</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>22</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67045</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67046</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67047</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67048</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67049</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67050 rows × 301 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Result  0  1  2  3   4   5   6   7   8  ...  290  291  292  293  294  \\\n",
       "0           3  0  3  5  9   6   9  15  18  22  ...   17   23   25   34   43   \n",
       "1           2  0  2  3  6  10  15  17  22  28  ...    1    1    2    3    3   \n",
       "2           3  1  0  0  2   1   3   2   3   4  ...    1    2    2    2    2   \n",
       "3           3  0  2  3  6  10  15  17  22  28  ...    1    1    2    3    3   \n",
       "4           3  0  2  4  3   6   7   9  13  15  ...    4    4    6    8   14   \n",
       "...       ... .. .. .. ..  ..  ..  ..  ..  ..  ...  ...  ...  ...  ...  ...   \n",
       "67045       2  0  0  0  1   2   2   3   4   5  ...    0    0    1    2    3   \n",
       "67046       3  0  0  0  0   0   0   1   1   1  ...    1    1    1    1    1   \n",
       "67047       3  0  0  0  1   1   1   1   1   1  ...    0    0    0    0    0   \n",
       "67048       3  6  6  6  6   6   6   6   6   5  ...    4    1    0    0    0   \n",
       "67049       3  2  2  2  3   3   3   3   3   4  ...    0    1    2    2    3   \n",
       "\n",
       "       295  296  297  298  299  \n",
       "0       57   72   69   54   45  \n",
       "1        3    4    6    9   14  \n",
       "2        3    6    9   13   17  \n",
       "3        3    4    6    9   14  \n",
       "4       16   18   22   29   36  \n",
       "...    ...  ...  ...  ...  ...  \n",
       "67045    3    4    5    7    7  \n",
       "67046    1    1    1    1    3  \n",
       "67047    0    0    1    1    2  \n",
       "67048    0    0    0    1    1  \n",
       "67049    3    3    3    4    6  \n",
       "\n",
       "[67050 rows x 301 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = new_full_df.drop(columns=['Healthy','M-KOMPG','M-KOMPA','M-KOMPM'])\n",
    "y = new_full_df[{'Healthy','M-KOMPG','M-KOMPA','M-KOMPM'}]\n",
    "cat_labels = np.where(y==1)[1]\n",
    "y = pd.DataFrame(cat_labels,columns=['Result'])\n",
    "\n",
    "X = X.reset_index(drop=True) # otherwise below will produce many more rows\n",
    "\n",
    "# Adding dataframe to the right of the y dataframe\n",
    "df_main = pd.concat([y,X], axis=1)\n",
    "df_main#.drop(columns=['index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5fcd9ee9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df_main.iloc[1,4])-(df_main.iloc[1,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0545fbbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "XX = X.copy()# XX_train\n",
    "yy = y.copy()# yy_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a7a8f6b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "75d618d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "kf = KFold(n_splits=10, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "c1d1dfce",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_metrics(true, pred):\n",
    "    sumcorrect=0\n",
    "    sumincorrect=0\n",
    "    eps=0.5\n",
    "    N=len(true)#y_test)\n",
    "    #predres = modelHGBR.predict(X_test.iloc[:N,:])\n",
    "    #trueres = y_test['Result'].iloc[:N]\n",
    "    for k in range(N):#range(16797):\n",
    "        #row=X_test.iloc[k,:]\n",
    "        #trueres[k]#=y_test.iloc[k]\n",
    "        #predres=gbm.predict(row)\n",
    "        #print(\"true\", true[k], \"pred\", pred[k])\n",
    "        if abs(true[k]-pred[k])<eps:\n",
    "            sumcorrect+=1 \n",
    "        else:\n",
    "            sumincorrect+=1\n",
    "    #print(\"Correct: \",sumcorrect,\". Incorrect: \",sumincorrect)\n",
    "    #print(\"missclassification rate = \", (sumincorrect)/sumcorrect)\n",
    "    return [sumcorrect, sumincorrect]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "0b471b7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "XX=XX.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "3f0708c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "yy=yy.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9c846963",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelETR = ExtraTreesRegressor() # 10 minutes\n",
    "modelXGBM = XGBRegressor()  # 10 seconds\n",
    "modelHGBR = HistGradientBoostingRegressor() # 14 seconds\n",
    "modelRF = RandomForestRegressor() # 54 minutes!\n",
    "modelLGBM = LGBMRegressor() # 2 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "8b577f10",
   "metadata": {},
   "outputs": [],
   "source": [
    "mse_scores = []\n",
    "corr=[]\n",
    "icorr = []\n",
    "#try_this_model = modelXGBM\n",
    "try_this_model = modelRF # modelETR # modelHGBR\n",
    "\n",
    "for train_index, test_index in kf.split(XX,yy):\n",
    "    X_train, X_test = XX[train_index], XX[test_index]\n",
    "    y_train, y_test = yy[train_index], yy[test_index]\n",
    "    try_this_model.fit(X_train, y_train)\n",
    "    #modelLGBM.fit(X_train, y_train)\n",
    "    y_pred = try_this_model.predict(X_test)\n",
    "    mse_scores.append(mean_squared_error(y_test, y_pred))\n",
    "    #print(\"True**\", y_test)\n",
    "    #print(\"Pred@@\", y_pred)\n",
    "    sumc, sumi = my_metrics(list(y_test), list(y_pred))\n",
    "    corr.append(sumc)\n",
    "    icorr.append(sumi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "6b933ebe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "missclassification rate =  14.310011277556594\n",
      "Accuracy: 0.9346010439970172\n"
     ]
    }
   ],
   "source": [
    "missc = 0.0\n",
    "acc = 0.0\n",
    "for k in range(10):\n",
    "    missc += corr[k]/icorr[k]\n",
    "    acc += corr[k]/(corr[k]+icorr[k])\n",
    "print(\"missclassification rate = \", missc/len(corr))\n",
    "print(\"Accuracy:\",acc/10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79704d8e",
   "metadata": {},
   "source": [
    "### We now find out the demographics for the dataset new_full_df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e925d08c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([    0,     1,     2,     3,     4,     5,     6,     7,     8,\n",
       "                9,\n",
       "            ...\n",
       "            67178, 67179, 67180, 67181, 67182, 67183, 67184, 67185, 67186,\n",
       "            67187],\n",
       "           dtype='int64', length=67050)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_full_df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04aa40fb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8377cef6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4fbc423f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openpyxl\n",
      "  Downloading openpyxl-3.1.2-py2.py3-none-any.whl (249 kB)\n",
      "\u001b[K     |████████████████████████████████| 249 kB 4.4 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting et-xmlfile\n",
      "  Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n",
      "Installing collected packages: et-xmlfile, openpyxl\n",
      "Successfully installed et-xmlfile-1.1.0 openpyxl-3.1.2\n"
     ]
    }
   ],
   "source": [
    "!pip3 install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3088d1e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/notebooks/notebooks/ProteinAnalysis/CodesFrom2023\r\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9e0b8668",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a870310",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "33dd185b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f1e9649",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "22ca6e49",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88d9d08c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "647f5d2c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d2f7f6b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  99.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  100.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  97.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  97.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  95.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  95.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  94.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  95.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  4.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  98.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  94.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "put into  91.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  4.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  97.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  95.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  95.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  97.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  97.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  95.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  101.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  99.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  96.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  4.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  98.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  96.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  98.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "put into  34.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  10.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  4.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  97.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  91.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  96.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  11.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  98.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  33.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  95.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  4.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  94.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  98.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  93.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  2.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  12.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  99.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  96.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  96.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  21.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  96.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  1.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  93.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  100.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  7.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  23.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  36.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  5.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  5.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  2.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  95.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  15.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  4.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  3.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  9.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  47.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  92.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  3.0 int  0-25\n",
      "put into  16.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  92.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  6.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  38.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  91.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  13.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  25.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  93.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  89.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  17.0 int  0-25\n",
      "put into  80.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  81.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  18.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  10.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  66.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  14.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  5.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  15.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  88.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  69.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  40.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  2.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  31.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  14.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  35.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  4.0 int  0-25\n",
      "put into  90.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  22.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  25.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  8.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  7.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  11.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  11.0 int  0-25\n",
      "put into  6.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  18.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  28.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  13.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  42.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  60.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  9.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  39.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  3.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  24.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  0.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  87.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  28.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  41.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  8.0 int  0-25\n",
      "put into  19.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  0.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  40.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  64.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  25.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  49.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  14.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  27.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  90.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  20.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  0.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  1.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  92.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  93.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  9.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  66.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  43.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  85.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  86.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  77.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  43.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  19.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  26.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  47.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  7.0 int  0-25\n",
      "put into  83.0 int  76-\n",
      "put into  80.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  1.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  18.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  46.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  54.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  6.0 int  0-25\n",
      "put into  62.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  29.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  50.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  4.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  37.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  38.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  8.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  70.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  2.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  65.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  88.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  60.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  55.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  29.0 int  26-50\n",
      "put into  17.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  21.0 int  0-25\n",
      "put into  73.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  7.0 int  0-25\n",
      "put into  76.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  27.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  31.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  33.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  35.0 int  26-50\n",
      "put into  73.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  32.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  87.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  83.0 int  76-\n",
      "put into  45.0 int  26-50\n",
      "put into  39.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  87.0 int  76-\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  16.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  12.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  81.0 int  76-\n",
      "put into  21.0 int  0-25\n",
      "put into  87.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  96.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  89.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  38.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  78.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  10.0 int  0-25\n",
      "put into  74.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  45.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  62.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  62.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  49.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  9.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  77.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  32.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  26.0 int  26-50\n",
      "put into  20.0 int  0-25\n",
      "put into  30.0 int  26-50\n",
      "put into  92.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  68.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  77.0 int  76-\n",
      "put into  48.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  64.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  10.0 int  0-25\n",
      "put into  79.0 int  76-\n",
      "put into  30.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  54.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  19.0 int  0-25\n",
      "put into  42.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  22.0 int  0-25\n",
      "put into  20.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  57.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  63.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  70.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  20.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  53.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  49.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  75.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  28.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  58.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  30.0 int  26-50\n",
      "put into  67.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  71.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  69.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  33.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  36.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  42.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  22.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  55.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  43.0 int  26-50\n",
      "put into  34.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  52.0 int  51-75\n",
      "put into  48.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  13.0 int  0-25\n",
      "put into  67.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  69.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  67.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  77.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  72.0 int  51-75\n",
      "put into  50.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  78.0 int  76-\n",
      "put into  46.0 int  26-50\n",
      "put into  41.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  27.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  59.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  16.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  53.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  39.0 int  26-50\n",
      "put into  53.0 int  51-75\n",
      "put into  4.0 int  0-25\n",
      "put into  34.0 int  26-50\n",
      "put into  21.0 int  0-25\n",
      "put into  63.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  52.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  72.0 int  51-75\n",
      "put into  63.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  72.0 int  51-75\n",
      "put into  43.0 int  26-50\n",
      "put into  51.0 int  51-75\n",
      "put into  88.0 int  76-\n",
      "put into  79.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  71.0 int  51-75\n",
      "put into  29.0 int  26-50\n",
      "put into  62.0 int  51-75\n",
      "put into  66.0 int  51-75\n",
      "put into  15.0 int  0-25\n",
      "put into  86.0 int  76-\n",
      "put into  59.0 int  51-75\n",
      "put into  37.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  75.0 int  76-\n",
      "put into  73.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  60.0 int  51-75\n",
      "put into  83.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  69.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  76.0 int  76-\n",
      "put into  55.0 int  51-75\n",
      "put into  82.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  90.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  74.0 int  51-75\n",
      "put into  94.0 int  76-\n",
      "put into  44.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  65.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  88.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  16.0 int  0-25\n",
      "put into  24.0 int  0-25\n",
      "put into  0.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  24.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  91.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  82.0 int  76-\n",
      "put into  76.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  33.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  45.0 int  26-50\n",
      "put into  57.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  14.0 int  0-25\n",
      "put into  82.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  86.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  58.0 int  51-75\n",
      "put into  38.0 int  26-50\n",
      "put into  26.0 int  26-50\n",
      "put into  79.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  37.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  47.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  48.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  82.0 int  76-\n",
      "put into  39.0 int  26-50\n",
      "put into  90.0 int  76-\n",
      "put into  41.0 int  26-50\n",
      "put into  76.0 int  76-\n",
      "put into  68.0 int  51-75\n",
      "put into  5.0 int  0-25\n",
      "put into  44.0 int  26-50\n",
      "put into  48.0 int  26-50\n",
      "put into  29.0 int  26-50\n",
      "put into  94.0 int  76-\n",
      "put into  26.0 int  26-50\n",
      "put into  54.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  23.0 int  0-25\n",
      "put into  85.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  89.0 int  76-\n",
      "put into  67.0 int  51-75\n",
      "put into  42.0 int  26-50\n",
      "put into  45.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  15.0 int  0-25\n",
      "put into  53.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  64.0 int  51-75\n",
      "put into  41.0 int  26-50\n",
      "put into  12.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  86.0 int  76-\n",
      "put into  61.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  80.0 int  76-\n",
      "put into  6.0 int  0-25\n",
      "put into  32.0 int  26-50\n",
      "put into  78.0 int  76-\n",
      "put into  64.0 int  51-75\n",
      "put into  84.0 int  76-\n",
      "put into  83.0 int  76-\n",
      "put into  3.0 int  0-25\n",
      "put into  31.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  44.0 int  26-50\n",
      "put into  11.0 int  0-25\n",
      "put into  89.0 int  76-\n",
      "put into  50.0 int  51-75\n",
      "put into  85.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  59.0 int  51-75\n",
      "put into  34.0 int  26-50\n",
      "put into  52.0 int  51-75\n",
      "put into  73.0 int  51-75\n",
      "put into  68.0 int  51-75\n",
      "put into  24.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  17.0 int  0-25\n",
      "put into  8.0 int  0-25\n",
      "put into  51.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  13.0 int  0-25\n",
      "put into  84.0 int  76-\n",
      "put into  85.0 int  76-\n",
      "put into  34.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  32.0 int  26-50\n",
      "put into  74.0 int  51-75\n",
      "put into  17.0 int  0-25\n",
      "put into  59.0 int  51-75\n",
      "put into  58.0 int  51-75\n",
      "put into  80.0 int  76-\n",
      "put into  65.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  71.0 int  51-75\n",
      "put into  51.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  74.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "put into  46.0 int  26-50\n",
      "put into  75.0 int  76-\n",
      "put into  12.0 int  0-25\n",
      "put into  57.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  19.0 int  0-25\n",
      "put into  50.0 int  51-75\n",
      "put into  72.0 int  51-75\n",
      "put into  61.0 int  51-75\n",
      "put into  35.0 int  26-50\n",
      "put into  70.0 int  51-75\n",
      "put into  70.0 int  51-75\n",
      "put into  47.0 int  26-50\n",
      "put into  1.0 int  0-25\n",
      "put into  61.0 int  51-75\n",
      "put into  91.0 int  76-\n",
      "put into  52.0 int  51-75\n",
      "put into  36.0 int  26-50\n",
      "put into  71.0 int  51-75\n",
      "put into  25.0 int  26-50\n",
      "put into  84.0 int  76-\n",
      "put into  84.0 int  76-\n",
      "put into  56.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  54.0 int  51-75\n",
      "put into  65.0 int  51-75\n",
      "put into  79.0 int  76-\n",
      "put into  63.0 int  51-75\n",
      "put into  57.0 int  51-75\n",
      "put into  18.0 int  0-25\n",
      "put into  55.0 int  51-75\n",
      "put into  81.0 int  76-\n",
      "put into  22.0 int  0-25\n",
      "put into  75.0 int  76-\n",
      "put into  58.0 int  51-75\n",
      "put into  56.0 int  51-75\n",
      "put into  31.0 int  26-50\n",
      "put into  68.0 int  51-75\n",
      "put into  60.0 int  51-75\n",
      "put into  30.0 int  26-50\n",
      "put into  49.0 int  26-50\n",
      "put into  40.0 int  26-50\n",
      "put into  56.0 int  51-75\n",
      "put into  23.0 int  0-25\n",
      "put into  78.0 int  76-\n",
      "put into  81.0 int  76-\n",
      "put into  35.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  27.0 int  26-50\n",
      "put into  28.0 int  26-50\n",
      "put into  66.0 int  51-75\n",
      "put into  46.0 int  26-50\n",
      "put into  61.0 int  51-75\n",
      "put into  44.0 int  26-50\n",
      "32939\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_quartiles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>63.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>46.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>89.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32934</th>\n",
       "      <td>28.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32935</th>\n",
       "      <td>66.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32936</th>\n",
       "      <td>46.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32937</th>\n",
       "      <td>61.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32938</th>\n",
       "      <td>44.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32939 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age Age_quartiles\n",
       "0     67.00         51-75\n",
       "1     64.00         51-75\n",
       "2     63.00         51-75\n",
       "3     46.00         26-50\n",
       "4     89.00           76-\n",
       "...     ...           ...\n",
       "32934 28.00         26-50\n",
       "32935 66.00         51-75\n",
       "32936 46.00         26-50\n",
       "32937 61.00         51-75\n",
       "32938 44.00         26-50\n",
       "\n",
       "[32939 rows x 2 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = [25., 50., 75., 100.]\n",
    "use_this = ['0-25','26-50','51-75','76-']\n",
    "labeled_list = []\n",
    "#N=34566\n",
    "for k in incoms:#[:N]:\n",
    "    #print(\"AGe:\",k)\n",
    "    #for l in range(len(labels)):\n",
    "    if k<labels[0]: \n",
    "        found = 0\n",
    "        print(\"put into \",k,'int ',use_this[found])\n",
    "    elif k < labels[1]:\n",
    "        found = 1\n",
    "        print(\"put into \",k,'int ',use_this[found])\n",
    "    elif k < labels[2]:\n",
    "        found = 2\n",
    "        print(\"put into \",k,'int ',use_this[found])\n",
    "    else:\n",
    "        found = 3\n",
    "        print(\"put into \",k,'int ',use_this[found])\n",
    "    labeled_list.append(use_this[found])\n",
    "    \n",
    "\n",
    "p1 = pd.DataFrame()\n",
    "p1['Age_quartiles'] = pd.Series(labeled_list)\n",
    "print(len(labeled_list))\n",
    "p1.insert(0,'Age', incoms)#[:N] )\n",
    "p1\n",
    "#print(labeled_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "1ad73c13",
   "metadata": {},
   "outputs": [],
   "source": [
    "#p1 = pd.DataFrame()\n",
    "#p1['Age_quartiles'] = pd.qcut(incoms, 4, labels=['0-25', '25-50', '50-75', '75-100'])\n",
    "#p1['Age_quartiles'] = pd.qcut(incoms[:100], 4, labels=['0-25', '25-50', '50-75', '75-100'])\n",
    "\n",
    "#p1.boxplot(column='N0_YLDF', by='MAT_quartiles')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bd22b4fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_quartiles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>63.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>46.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>89.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32934</th>\n",
       "      <td>28.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32935</th>\n",
       "      <td>66.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32936</th>\n",
       "      <td>46.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32937</th>\n",
       "      <td>61.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32938</th>\n",
       "      <td>44.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32939 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age Age_quartiles\n",
       "0     67.00         51-75\n",
       "1     64.00         51-75\n",
       "2     63.00         51-75\n",
       "3     46.00         26-50\n",
       "4     89.00           76-\n",
       "...     ...           ...\n",
       "32934 28.00         26-50\n",
       "32935 66.00         51-75\n",
       "32936 46.00         26-50\n",
       "32937 61.00         51-75\n",
       "32938 44.00         26-50\n",
       "\n",
       "[32939 rows x 2 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "216d3bc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#p1.insert(0,'Age', incoms)#[:100] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "fdad849a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_quartiles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32919</th>\n",
       "      <td>58.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32920</th>\n",
       "      <td>56.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32921</th>\n",
       "      <td>31.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32922</th>\n",
       "      <td>68.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32923</th>\n",
       "      <td>60.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32924</th>\n",
       "      <td>30.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32925</th>\n",
       "      <td>49.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32926</th>\n",
       "      <td>40.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32927</th>\n",
       "      <td>56.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32928</th>\n",
       "      <td>23.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32929</th>\n",
       "      <td>78.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32930</th>\n",
       "      <td>81.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32931</th>\n",
       "      <td>35.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32932</th>\n",
       "      <td>61.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32933</th>\n",
       "      <td>27.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32934</th>\n",
       "      <td>28.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32935</th>\n",
       "      <td>66.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32936</th>\n",
       "      <td>46.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32937</th>\n",
       "      <td>61.00</td>\n",
       "      <td>51-75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32938</th>\n",
       "      <td>44.00</td>\n",
       "      <td>26-50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age Age_quartiles\n",
       "32919 58.00         51-75\n",
       "32920 56.00         51-75\n",
       "32921 31.00         26-50\n",
       "32922 68.00         51-75\n",
       "32923 60.00         51-75\n",
       "32924 30.00         26-50\n",
       "32925 49.00         26-50\n",
       "32926 40.00         26-50\n",
       "32927 56.00         51-75\n",
       "32928 23.00          0-25\n",
       "32929 78.00           76-\n",
       "32930 81.00           76-\n",
       "32931 35.00         26-50\n",
       "32932 61.00         51-75\n",
       "32933 27.00         26-50\n",
       "32934 28.00         26-50\n",
       "32935 66.00         51-75\n",
       "32936 46.00         26-50\n",
       "32937 61.00         51-75\n",
       "32938 44.00         26-50"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p1[-20:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f9a23b2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_quartiles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16469</th>\n",
       "      <td>24.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24634</th>\n",
       "      <td>10.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14551</th>\n",
       "      <td>17.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6948</th>\n",
       "      <td>21.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24617</th>\n",
       "      <td>18.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4373</th>\n",
       "      <td>88.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21286</th>\n",
       "      <td>77.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21288</th>\n",
       "      <td>86.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21244</th>\n",
       "      <td>79.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20986</th>\n",
       "      <td>87.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32939 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age Age_quartiles\n",
       "16469 24.00          0-25\n",
       "24634 10.00          0-25\n",
       "14551 17.00          0-25\n",
       "6948  21.00          0-25\n",
       "24617 18.00          0-25\n",
       "...     ...           ...\n",
       "4373  88.00           76-\n",
       "21286 77.00           76-\n",
       "21288 86.00           76-\n",
       "21244 79.00           76-\n",
       "20986 87.00           76-\n",
       "\n",
       "[32939 rows x 2 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "rslt_df = p1.sort_values(by = ['Age_quartiles'])\n",
    "rslt_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fbc5621f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 3216 people with age in the interval 0-25.\n"
     ]
    }
   ],
   "source": [
    "firstg = rslt_df[rslt_df['Age_quartiles']=='0-25']\n",
    "print('There are {} people with age in the interval 0-25.'.format(len(firstg)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "2b537d4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "rslt_df#.insert('Age':55,'51-75')\n",
    "# Create a dictionary with the data for the new row\n",
    "new_row = {'Age': 55.00, 'Age_quartiles': '51-75'}\n",
    "\n",
    "# Append the dictionary to the DataFrame\n",
    "new_rslt = rslt_df.append(new_row, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "988f53f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 7576 people with age in the interval 26-50.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "secg = rslt_df[rslt_df['Age_quartiles']=='26-50']\n",
    "print('There are {} people with age in the interval 26-50.'.format(len(secg)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "9091823d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 14838 people with age in the interval 51-75.\n"
     ]
    }
   ],
   "source": [
    "thirdg = new_rslt[new_rslt['Age_quartiles']=='51-75']\n",
    "print('There are {} people with age in the interval 51-75.'.format(len(thirdg)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d656871c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 7310 people over 75.\n"
     ]
    }
   ],
   "source": [
    "over76 = rslt_df[rslt_df['Age_quartiles']=='76-']\n",
    "print('There are {} people over 75.'.format(len(over76)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f603eedb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from io import BytesIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6f4f7d96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_quartiles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16469</th>\n",
       "      <td>24.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24634</th>\n",
       "      <td>10.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14551</th>\n",
       "      <td>17.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6948</th>\n",
       "      <td>21.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24617</th>\n",
       "      <td>18.00</td>\n",
       "      <td>0-25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4373</th>\n",
       "      <td>88.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21286</th>\n",
       "      <td>77.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21288</th>\n",
       "      <td>86.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21244</th>\n",
       "      <td>79.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20986</th>\n",
       "      <td>87.00</td>\n",
       "      <td>76-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32939 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age Age_quartiles\n",
       "16469 24.00          0-25\n",
       "24634 10.00          0-25\n",
       "14551 17.00          0-25\n",
       "6948  21.00          0-25\n",
       "24617 18.00          0-25\n",
       "...     ...           ...\n",
       "4373  88.00           76-\n",
       "21286 77.00           76-\n",
       "21288 86.00           76-\n",
       "21244 79.00           76-\n",
       "20986 87.00           76-\n",
       "\n",
       "[32939 rows x 2 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rslt_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ea089c5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.lines import Line2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "94d62a03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 6000x3600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create percentiles\n",
    "legend_elements = [Line2D([0], [0], color='blue', lw=4, label=len(firstg)),\n",
    "Line2D([0], [0], color='orange', lw=4, label=len(secg)),\n",
    "Line2D([0], [0], color='green', lw=4, label=len(thirdg)),\n",
    "Line2D([0], [0], color='maroon', lw=4, label=len(over76))]\n",
    "\n",
    "\n",
    "# Create the figure\n",
    "#fig, ax = plt.subplots()\n",
    "\n",
    "# fig setup\n",
    "fig = plt.figure(figsize=(10,6), dpi=600)\n",
    "ax = fig.gca()\n",
    "\n",
    "sns.set_style('whitegrid')\n",
    "ax = sns.boxplot(x='Age',y='Age_quartiles', data=rslt_df,palette=['blue','orange','green','maroon'],notch=True, showfliers=True, width=0.75)#, labels=[\"Metric\", \"Length\"])#labels=[\"Metric\", \"Length\",\"A\",\"B\"])#, whis=.5)\n",
    "#bp1 = ax.boxplot(rslt_df, positions = [1], notch=True, widths=0.75)#,labels=[\"Metric\", \"Length\",\"A\",\"B\"])#, whis=.5)\n",
    "#legend_label = [len(rslt_df), \"(30, 40)\", \"(40, 50)\", \"(50, 60)\", \"(60, 70)\", \"(70, 80)\"]\n",
    "#ax.legend(title=\"Age Group\", labels=legend_label)\n",
    "#ax = sns.stripplot(x=\"Age\", y=\"Age_quartiles\",data=rslt_df)\n",
    "\n",
    "ax.legend(title=\"Number in Group\", handles=legend_elements)#, loc='center')\n",
    "#ax.axes.set_title(\"Title\",fontsize=30)\n",
    "ax.set_xlabel(\"Age\",fontsize=20)\n",
    "ax.set_yticklabels(ax.get_yticklabels(),rotation=30)\n",
    "ax.set_ylabel(\"Age Quartiles\",fontsize=20)\n",
    "ax.tick_params(labelsize=15)\n",
    "plt.grid()\n",
    "ax.xaxis.grid(True) # Show the vertical gridlines\n",
    "#handles, _ = ax.get_legend_handles_labels()          # Get the artists.\n",
    "\n",
    "#ax.legend([\"8901\", \"8547\",\"8673\",\"8446\"], loc=\"best\") # Associate manually the artists to a label.\n",
    "#legend_label = [\"(18, 30)\", \"(30, 40)\", \"(40, 50)\", \"(50, 60)\"]#, \"(60, 70)\", \"(70, 80)\"]\n",
    "#ax.legend(title=\"Number per Group\")\n",
    "\n",
    "            \n",
    "#handles, _ = ax.get_legend_handles_labels()          # Get the artists.\n",
    "#ax.legend(handles, [\"label1\", \"label2\"], loc=\"best\") \n",
    "#bp1 = ax.boxplot(data1, positions=[1,4], notch=True, widths=0.35, \n",
    "                 #patch_artist=True, boxprops=dict(facecolor=\"C0\"))\n",
    "#bp2 = ax.boxplot(data2, positions=[2,5], notch=True, widths=0.35, \n",
    "                 #patch_artist=True, boxprops=dict(facecolor=\"C2\"))\n",
    "#ax.legend([bp1[\"boxes\"][0], bp2[\"boxes\"][0]], ['A', 'B'], loc='upper right')\n",
    "# save figure\n",
    "# (1) save the image in memory in PNG format\n",
    "#png1 = BytesIO()\n",
    "#fig.savefig(png1, format='png')\n",
    "\n",
    "# (2) load this image into PIL\n",
    "#png2 = Image.open(png1)\n",
    "\n",
    "# (3) save as TIFF\n",
    "#png2.save('BoxPlot.tiff')\n",
    "#png1.close()\n",
    "fig.savefig('boxplotSept13.tiff', dpi=600, format=\"tiff\", pil_kwargs={\"compression\": \"tiff_lzw\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "64848f36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32939"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3216+7576+14837+7310"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "077f7a94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34420"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "15818+18602"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "348fc6ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
